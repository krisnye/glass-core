// Generated by CommonJS Everywhere 0.7.0
(function (global) {
  function require(file, parentModule) {
    if ({}.hasOwnProperty.call(require.cache, file))
      return require.cache[file];
    var resolved = require.resolve(file);
    if (!resolved)
      throw new Error('Failed to resolve module ' + file);
    var module$ = {
        id: file,
        require: require,
        filename: file,
        exports: {},
        loaded: false,
        parent: parentModule,
        children: []
      };
    if (parentModule)
      parentModule.children.push(module$);
    var dirname = file.slice(0, file.lastIndexOf('/') + 1);
    require.cache[file] = module$.exports;
    resolved.call(module$.exports, module$, module$.exports, dirname, file);
    module$.loaded = true;
    return require.cache[file] = module$.exports;
  }
  require.modules = {};
  require.cache = {};
  require.resolve = function (file) {
    return {}.hasOwnProperty.call(require.modules, file) ? require.modules[file] : void 0;
  };
  require.define = function (file, fn) {
    require.modules[file] = fn;
  };
  var process = function () {
      var cwd = '/';
      return {
        title: 'browser',
        version: 'v0.11.0',
        browser: true,
        env: {},
        argv: [],
        nextTick: global.setImmediate || function (fn) {
          setTimeout(fn, 0);
        },
        cwd: function () {
          return cwd;
        },
        chdir: function (dir) {
          cwd = dir;
        }
      };
    }();
  require.define('/index.coffee', function (module, exports, __dirname, __filename) {
    require('/global.coffee', module);
    global.glass = exports;
    Object.merge(exports, {
      Component: require('/Component.coffee', module),
      Enum: require('/Enum.coffee', module)
    });
    Object.merge(exports, {
      patch: require('/patch.coffee', module),
      ui: require('/ui\\index.coffee', module)
    });
  });
  require.define('/ui\\index.coffee', function (module, exports, __dirname, __filename) {
    Object.merge(exports, {
      Color: require('/ui\\Color.coffee', module),
      Control: require('/ui\\Control.coffee', module),
      Element: require('/ui\\Element.coffee', module)
    });
    Object.merge(exports, {
      canvas: {},
      html: require('/ui\\html\\index.coffee', module),
      webgl: require('/ui\\webgl\\index.coffee', module)
    });
  });
  require.define('/ui\\webgl\\index.coffee', function (module, exports, __dirname, __filename) {
    var Enum, key, value, webglConstants;
    Enum = require('/Enum.coffee', module);
    Object.merge(exports, require('/..\\node_modules\\gl-matrix\\dist\\gl-matrix.js', module));
    for (key in webglConstants = require('/ui\\webgl\\constants.coffee', module)) {
      value = (webglConstants = require('/ui\\webgl\\constants.coffee', module))[key];
      exports[key] = new Enum(key, value);
    }
  });
  require.define('/ui\\webgl\\constants.coffee', function (module, exports, __dirname, __filename) {
    var exports;
    module.exports = exports = {
      DEPTH_BUFFER_BIT: 256,
      STENCIL_BUFFER_BIT: 1024,
      COLOR_BUFFER_BIT: 16384,
      POINTS: 0,
      LINES: 1,
      LINE_LOOP: 2,
      LINE_STRIP: 3,
      TRIANGLES: 4,
      TRIANGLE_STRIP: 5,
      TRIANGLE_FAN: 6,
      ZERO: 0,
      ONE: 1,
      SRC_COLOR: 768,
      ONE_MINUS_SRC_COLOR: 769,
      SRC_ALPHA: 770,
      ONE_MINUS_SRC_ALPHA: 771,
      DST_ALPHA: 772,
      ONE_MINUS_DST_ALPHA: 773,
      DST_COLOR: 774,
      ONE_MINUS_DST_COLOR: 775,
      SRC_ALPHA_SATURATE: 776,
      FUNC_ADD: 32774,
      BLEND_EQUATION: 32777,
      BLEND_EQUATION_RGB: 32777,
      BLEND_EQUATION_ALPHA: 34877,
      FUNC_SUBTRACT: 32778,
      FUNC_REVERSE_SUBTRACT: 32779,
      BLEND_DST_RGB: 32968,
      BLEND_SRC_RGB: 32969,
      BLEND_DST_ALPHA: 32970,
      BLEND_SRC_ALPHA: 32971,
      CONSTANT_COLOR: 32769,
      ONE_MINUS_CONSTANT_COLOR: 32770,
      CONSTANT_ALPHA: 32771,
      ONE_MINUS_CONSTANT_ALPHA: 32772,
      BLEND_COLOR: 32773,
      ARRAY_BUFFER: 34962,
      ELEMENT_ARRAY_BUFFER: 34963,
      ARRAY_BUFFER_BINDING: 34964,
      ELEMENT_ARRAY_BUFFER_BINDING: 34965,
      STREAM_DRAW: 35040,
      STATIC_DRAW: 35044,
      DYNAMIC_DRAW: 35048,
      BUFFER_SIZE: 34660,
      BUFFER_USAGE: 34661,
      CURRENT_VERTEX_ATTRIB: 34342,
      FRONT: 1028,
      BACK: 1029,
      FRONT_AND_BACK: 1032,
      CULL_FACE: 2884,
      BLEND: 3042,
      DITHER: 3024,
      STENCIL_TEST: 2960,
      DEPTH_TEST: 2929,
      SCISSOR_TEST: 3089,
      POLYGON_OFFSET_FILL: 32823,
      SAMPLE_ALPHA_TO_COVERAGE: 32926,
      SAMPLE_COVERAGE: 32928,
      NO_ERROR: 0,
      INVALID_ENUM: 1280,
      INVALID_VALUE: 1281,
      INVALID_OPERATION: 1282,
      OUT_OF_MEMORY: 1285,
      CW: 2304,
      CCW: 2305,
      LINE_WIDTH: 2849,
      ALIASED_POINT_SIZE_RANGE: 33901,
      ALIASED_LINE_WIDTH_RANGE: 33902,
      CULL_FACE_MODE: 2885,
      FRONT_FACE: 2886,
      DEPTH_RANGE: 2928,
      DEPTH_WRITEMASK: 2930,
      DEPTH_CLEAR_VALUE: 2931,
      DEPTH_FUNC: 2932,
      STENCIL_CLEAR_VALUE: 2961,
      STENCIL_FUNC: 2962,
      STENCIL_FAIL: 2964,
      STENCIL_PASS_DEPTH_FAIL: 2965,
      STENCIL_PASS_DEPTH_PASS: 2966,
      STENCIL_REF: 2967,
      STENCIL_VALUE_MASK: 2963,
      STENCIL_WRITEMASK: 2968,
      STENCIL_BACK_FUNC: 34816,
      STENCIL_BACK_FAIL: 34817,
      STENCIL_BACK_PASS_DEPTH_FAIL: 34818,
      STENCIL_BACK_PASS_DEPTH_PASS: 34819,
      STENCIL_BACK_REF: 36003,
      STENCIL_BACK_VALUE_MASK: 36004,
      STENCIL_BACK_WRITEMASK: 36005,
      VIEWPORT: 2978,
      SCISSOR_BOX: 3088,
      COLOR_CLEAR_VALUE: 3106,
      COLOR_WRITEMASK: 3107,
      UNPACK_ALIGNMENT: 3317,
      PACK_ALIGNMENT: 3333,
      MAX_TEXTURE_SIZE: 3379,
      MAX_VIEWPORT_DIMS: 3386,
      SUBPIXEL_BITS: 3408,
      RED_BITS: 3410,
      GREEN_BITS: 3411,
      BLUE_BITS: 3412,
      ALPHA_BITS: 3413,
      DEPTH_BITS: 3414,
      STENCIL_BITS: 3415,
      POLYGON_OFFSET_UNITS: 10752,
      POLYGON_OFFSET_FACTOR: 32824,
      TEXTURE_BINDING_2D: 32873,
      SAMPLE_BUFFERS: 32936,
      SAMPLES: 32937,
      SAMPLE_COVERAGE_VALUE: 32938,
      SAMPLE_COVERAGE_INVERT: 32939,
      NUM_COMPRESSED_TEXTURE_FORMATS: 34466,
      COMPRESSED_TEXTURE_FORMATS: 34467,
      DONT_CARE: 4352,
      FASTEST: 4353,
      NICEST: 4354,
      GENERATE_MIPMAP_HINT: 33170,
      BYTE: 5120,
      UNSIGNED_BYTE: 5121,
      SHORT: 5122,
      UNSIGNED_SHORT: 5123,
      INT: 5124,
      UNSIGNED_INT: 5125,
      FLOAT: 5126,
      DEPTH_COMPONENT: 6402,
      ALPHA: 6406,
      RGB: 6407,
      RGBA: 6408,
      LUMINANCE: 6409,
      LUMINANCE_ALPHA: 6410,
      UNSIGNED_SHORT_4_4_4_4: 32819,
      UNSIGNED_SHORT_5_5_5_1: 32820,
      UNSIGNED_SHORT_5_6_5: 33635,
      FRAGMENT_SHADER: 35632,
      VERTEX_SHADER: 35633,
      MAX_VERTEX_ATTRIBS: 34921,
      MAX_VERTEX_UNIFORM_VECTORS: 36347,
      MAX_VARYING_VECTORS: 36348,
      MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661,
      MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660,
      MAX_TEXTURE_IMAGE_UNITS: 34930,
      MAX_FRAGMENT_UNIFORM_VECTORS: 36349,
      SHADER_TYPE: 35663,
      DELETE_STATUS: 35712,
      LINK_STATUS: 35714,
      VALIDATE_STATUS: 35715,
      ATTACHED_SHADERS: 35717,
      ACTIVE_UNIFORMS: 35718,
      ACTIVE_UNIFORM_MAX_LENGTH: 35719,
      ACTIVE_ATTRIBUTES: 35721,
      ACTIVE_ATTRIBUTE_MAX_LENGTH: 35722,
      SHADING_LANGUAGE_VERSION: 35724,
      CURRENT_PROGRAM: 35725,
      NEVER: 512,
      LESS: 513,
      EQUAL: 514,
      LEQUAL: 515,
      GREATER: 516,
      NOTEQUAL: 517,
      GEQUAL: 518,
      ALWAYS: 519,
      KEEP: 7680,
      REPLACE: 7681,
      INCR: 7682,
      DECR: 7683,
      INVERT: 5386,
      INCR_WRAP: 34055,
      DECR_WRAP: 34056,
      VENDOR: 7936,
      RENDERER: 7937,
      VERSION: 7938,
      EXTENSIONS: 7939,
      NEAREST: 9728,
      LINEAR: 9729,
      NEAREST_MIPMAP_NEAREST: 9984,
      LINEAR_MIPMAP_NEAREST: 9985,
      NEAREST_MIPMAP_LINEAR: 9986,
      LINEAR_MIPMAP_LINEAR: 9987,
      TEXTURE_MAG_FILTER: 10240,
      TEXTURE_MIN_FILTER: 10241,
      TEXTURE_WRAP_S: 10242,
      TEXTURE_WRAP_T: 10243,
      TEXTURE_2D: 3553,
      TEXTURE: 5890,
      TEXTURE_CUBE_MAP: 34067,
      TEXTURE_BINDING_CUBE_MAP: 34068,
      TEXTURE_CUBE_MAP_POSITIVE_X: 34069,
      TEXTURE_CUBE_MAP_NEGATIVE_X: 34070,
      TEXTURE_CUBE_MAP_POSITIVE_Y: 34071,
      TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072,
      TEXTURE_CUBE_MAP_POSITIVE_Z: 34073,
      TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074,
      MAX_CUBE_MAP_TEXTURE_SIZE: 34076,
      TEXTURE0: 33984,
      TEXTURE1: 33985,
      TEXTURE2: 33986,
      TEXTURE3: 33987,
      TEXTURE4: 33988,
      TEXTURE5: 33989,
      TEXTURE6: 33990,
      TEXTURE7: 33991,
      TEXTURE8: 33992,
      TEXTURE9: 33993,
      TEXTURE10: 33994,
      TEXTURE11: 33995,
      TEXTURE12: 33996,
      TEXTURE13: 33997,
      TEXTURE14: 33998,
      TEXTURE15: 33999,
      TEXTURE16: 34e3,
      TEXTURE17: 34001,
      TEXTURE18: 34002,
      TEXTURE19: 34003,
      TEXTURE20: 34004,
      TEXTURE21: 34005,
      TEXTURE22: 34006,
      TEXTURE23: 34007,
      TEXTURE24: 34008,
      TEXTURE25: 34009,
      TEXTURE26: 34010,
      TEXTURE27: 34011,
      TEXTURE28: 34012,
      TEXTURE29: 34013,
      TEXTURE30: 34014,
      TEXTURE31: 34015,
      ACTIVE_TEXTURE: 34016,
      REPEAT: 10497,
      CLAMP_TO_EDGE: 33071,
      MIRRORED_REPEAT: 33648,
      FLOAT_VEC2: 35664,
      FLOAT_VEC3: 35665,
      FLOAT_VEC4: 35666,
      INT_VEC2: 35667,
      INT_VEC3: 35668,
      INT_VEC4: 35669,
      BOOL: 35670,
      BOOL_VEC2: 35671,
      BOOL_VEC3: 35672,
      BOOL_VEC4: 35673,
      FLOAT_MAT2: 35674,
      FLOAT_MAT3: 35675,
      FLOAT_MAT4: 35676,
      SAMPLER_2D: 35678,
      SAMPLER_CUBE: 35680,
      VERTEX_ATTRIB_ARRAY_ENABLED: 34338,
      VERTEX_ATTRIB_ARRAY_SIZE: 34339,
      VERTEX_ATTRIB_ARRAY_STRIDE: 34340,
      VERTEX_ATTRIB_ARRAY_TYPE: 34341,
      VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922,
      VERTEX_ATTRIB_ARRAY_POINTER: 34373,
      VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975,
      IMPLEMENTATION_COLOR_READ_TYPE: 35738,
      IMPLEMENTATION_COLOR_READ_FORMAT: 35739,
      COMPILE_STATUS: 35713,
      INFO_LOG_LENGTH: 35716,
      SHADER_SOURCE_LENGTH: 35720,
      SHADER_COMPILER: 36346,
      LOW_FLOAT: 36336,
      MEDIUM_FLOAT: 36337,
      HIGH_FLOAT: 36338,
      LOW_INT: 36339,
      MEDIUM_INT: 36340,
      HIGH_INT: 36341,
      FRAMEBUFFER: 36160,
      RENDERBUFFER: 36161,
      RGBA4: 32854,
      RGB5_A1: 32855,
      RGB565: 36194,
      DEPTH_COMPONENT16: 33189,
      STENCIL_INDEX: 6401,
      STENCIL_INDEX8: 36168,
      DEPTH_STENCIL: 34041,
      RENDERBUFFER_WIDTH: 36162,
      RENDERBUFFER_HEIGHT: 36163,
      RENDERBUFFER_INTERNAL_FORMAT: 36164,
      RENDERBUFFER_RED_SIZE: 36176,
      RENDERBUFFER_GREEN_SIZE: 36177,
      RENDERBUFFER_BLUE_SIZE: 36178,
      RENDERBUFFER_ALPHA_SIZE: 36179,
      RENDERBUFFER_DEPTH_SIZE: 36180,
      RENDERBUFFER_STENCIL_SIZE: 36181,
      FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048,
      FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049,
      FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050,
      FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051,
      COLOR_ATTACHMENT0: 36064,
      DEPTH_ATTACHMENT: 36096,
      STENCIL_ATTACHMENT: 36128,
      DEPTH_STENCIL_ATTACHMENT: 33306,
      NONE: 0,
      FRAMEBUFFER_COMPLETE: 36053,
      FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054,
      FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055,
      FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057,
      FRAMEBUFFER_UNSUPPORTED: 36061,
      FRAMEBUFFER_BINDING: 36006,
      RENDERBUFFER_BINDING: 36007,
      MAX_RENDERBUFFER_SIZE: 34024,
      INVALID_FRAMEBUFFER_OPERATION: 1286
    };
  });
  require.define('/..\\node_modules\\gl-matrix\\dist\\gl-matrix.js', function (module, exports, __dirname, __filename) {
    (function () {
      'use strict';
      var shim = {};
      if (typeof exports === 'undefined') {
        if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
          shim.exports = {};
          define(function () {
            return shim.exports;
          });
        } else {
          shim.exports = window;
        }
      } else {
        shim.exports = exports;
      }
      (function (exports) {
        var vec2 = {};
        if (!GLMAT_EPSILON) {
          var GLMAT_EPSILON = 1e-6;
        }
        vec2.create = function () {
          return new Float32Array(2);
        };
        vec2.clone = function (a) {
          var out = new Float32Array(2);
          out[0] = a[0];
          out[1] = a[1];
          return out;
        };
        vec2.fromValues = function (x, y) {
          var out = new Float32Array(2);
          out[0] = x;
          out[1] = y;
          return out;
        };
        vec2.copy = function (out, a) {
          out[0] = a[0];
          out[1] = a[1];
          return out;
        };
        vec2.set = function (out, x, y) {
          out[0] = x;
          out[1] = y;
          return out;
        };
        vec2.add = function (out, a, b) {
          out[0] = a[0] + b[0];
          out[1] = a[1] + b[1];
          return out;
        };
        vec2.sub = vec2.subtract = function (out, a, b) {
          out[0] = a[0] - b[0];
          out[1] = a[1] - b[1];
          return out;
        };
        vec2.mul = vec2.multiply = function (out, a, b) {
          out[0] = a[0] * b[0];
          out[1] = a[1] * b[1];
          return out;
        };
        vec2.div = vec2.divide = function (out, a, b) {
          out[0] = a[0] / b[0];
          out[1] = a[1] / b[1];
          return out;
        };
        vec2.min = function (out, a, b) {
          out[0] = Math.min(a[0], b[0]);
          out[1] = Math.min(a[1], b[1]);
          return out;
        };
        vec2.max = function (out, a, b) {
          out[0] = Math.max(a[0], b[0]);
          out[1] = Math.max(a[1], b[1]);
          return out;
        };
        vec2.scale = function (out, a, b) {
          out[0] = a[0] * b;
          out[1] = a[1] * b;
          return out;
        };
        vec2.dist = vec2.distance = function (a, b) {
          var x = b[0] - a[0], y = b[1] - a[1];
          return Math.sqrt(x * x + y * y);
        };
        vec2.sqrDist = vec2.squaredDistance = function (a, b) {
          var x = b[0] - a[0], y = b[1] - a[1];
          return x * x + y * y;
        };
        vec2.len = vec2.length = function (a) {
          var x = a[0], y = a[1];
          return Math.sqrt(x * x + y * y);
        };
        vec2.sqrLen = vec2.squaredLength = function (a) {
          var x = a[0], y = a[1];
          return x * x + y * y;
        };
        vec2.negate = function (out, a) {
          out[0] = -a[0];
          out[1] = -a[1];
          return out;
        };
        vec2.normalize = function (out, a) {
          var x = a[0], y = a[1];
          var len = x * x + y * y;
          if (len > 0) {
            len = 1 / Math.sqrt(len);
            out[0] = a[0] * len;
            out[1] = a[1] * len;
          }
          return out;
        };
        vec2.dot = function (a, b) {
          return a[0] * b[0] + a[1] * b[1];
        };
        vec2.cross = function (out, a, b) {
          var z = a[0] * b[1] - a[1] * b[0];
          out[0] = out[1] = 0;
          out[2] = z;
          return out;
        };
        vec2.lerp = function (out, a, b, t) {
          var ax = a[0], ay = a[1];
          out[0] = ax + t * (b[0] - ax);
          out[1] = ay + t * (b[1] - ay);
          return out;
        };
        vec2.transformMat2 = function (out, a, m) {
          var x = a[0], y = a[1];
          out[0] = x * m[0] + y * m[1];
          out[1] = x * m[2] + y * m[3];
          return out;
        };
        vec2.forEach = function () {
          var vec = new Float32Array(2);
          return function (a, stride, offset, count, fn, arg) {
            var i, l;
            if (!stride) {
              stride = 2;
            }
            if (!offset) {
              offset = 0;
            }
            if (count) {
              l = Math.min(count * stride + offset, a.length);
            } else {
              l = a.length;
            }
            for (i = offset; i < l; i += stride) {
              vec[0] = a[i];
              vec[1] = a[i + 1];
              fn(vec, vec, arg);
              a[i] = vec[0];
              a[i + 1] = vec[1];
            }
            return a;
          };
        }();
        vec2.str = function (a) {
          return 'vec2(' + a[0] + ', ' + a[1] + ')';
        };
        if (typeof exports !== 'undefined') {
          exports.vec2 = vec2;
        }
        ;
        var vec3 = {};
        if (!GLMAT_EPSILON) {
          var GLMAT_EPSILON = 1e-6;
        }
        vec3.create = function () {
          return new Float32Array(3);
        };
        vec3.clone = function (a) {
          var out = new Float32Array(3);
          out[0] = a[0];
          out[1] = a[1];
          out[2] = a[2];
          return out;
        };
        vec3.fromValues = function (x, y, z) {
          var out = new Float32Array(3);
          out[0] = x;
          out[1] = y;
          out[2] = z;
          return out;
        };
        vec3.copy = function (out, a) {
          out[0] = a[0];
          out[1] = a[1];
          out[2] = a[2];
          return out;
        };
        vec3.set = function (out, x, y, z) {
          out[0] = x;
          out[1] = y;
          out[2] = z;
          return out;
        };
        vec3.add = function (out, a, b) {
          out[0] = a[0] + b[0];
          out[1] = a[1] + b[1];
          out[2] = a[2] + b[2];
          return out;
        };
        vec3.sub = vec3.subtract = function (out, a, b) {
          out[0] = a[0] - b[0];
          out[1] = a[1] - b[1];
          out[2] = a[2] - b[2];
          return out;
        };
        vec3.mul = vec3.multiply = function (out, a, b) {
          out[0] = a[0] * b[0];
          out[1] = a[1] * b[1];
          out[2] = a[2] * b[2];
          return out;
        };
        vec3.div = vec3.divide = function (out, a, b) {
          out[0] = a[0] / b[0];
          out[1] = a[1] / b[1];
          out[2] = a[2] / b[2];
          return out;
        };
        vec3.min = function (out, a, b) {
          out[0] = Math.min(a[0], b[0]);
          out[1] = Math.min(a[1], b[1]);
          out[2] = Math.min(a[2], b[2]);
          return out;
        };
        vec3.max = function (out, a, b) {
          out[0] = Math.max(a[0], b[0]);
          out[1] = Math.max(a[1], b[1]);
          out[2] = Math.max(a[2], b[2]);
          return out;
        };
        vec3.scale = function (out, a, b) {
          out[0] = a[0] * b;
          out[1] = a[1] * b;
          out[2] = a[2] * b;
          return out;
        };
        vec3.dist = vec3.distance = function (a, b) {
          var x = b[0] - a[0], y = b[1] - a[1], z = b[2] - a[2];
          return Math.sqrt(x * x + y * y + z * z);
        };
        vec3.sqrDist = vec3.squaredDistance = function (a, b) {
          var x = b[0] - a[0], y = b[1] - a[1], z = b[2] - a[2];
          return x * x + y * y + z * z;
        };
        vec3.len = vec3.length = function (a) {
          var x = a[0], y = a[1], z = a[2];
          return Math.sqrt(x * x + y * y + z * z);
        };
        vec3.sqrLen = vec3.squaredLength = function (a) {
          var x = a[0], y = a[1], z = a[2];
          return x * x + y * y + z * z;
        };
        vec3.negate = function (out, a) {
          out[0] = -a[0];
          out[1] = -a[1];
          out[2] = -a[2];
          return out;
        };
        vec3.normalize = function (out, a) {
          var x = a[0], y = a[1], z = a[2];
          var len = x * x + y * y + z * z;
          if (len > 0) {
            len = 1 / Math.sqrt(len);
            out[0] = a[0] * len;
            out[1] = a[1] * len;
            out[2] = a[2] * len;
          }
          return out;
        };
        vec3.dot = function (a, b) {
          return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
        };
        vec3.cross = function (out, a, b) {
          var ax = a[0], ay = a[1], az = a[2], bx = b[0], by = b[1], bz = b[2];
          out[0] = ay * bz - az * by;
          out[1] = az * bx - ax * bz;
          out[2] = ax * by - ay * bx;
          return out;
        };
        vec3.lerp = function (out, a, b, t) {
          var ax = a[0], ay = a[1], az = a[2];
          out[0] = ax + t * (b[0] - ax);
          out[1] = ay + t * (b[1] - ay);
          out[2] = az + t * (b[2] - az);
          return out;
        };
        vec3.transformMat4 = function (out, a, m) {
          var x = a[0], y = a[1], z = a[2];
          out[0] = m[0] * x + m[4] * y + m[8] * z + m[12];
          out[1] = m[1] * x + m[5] * y + m[9] * z + m[13];
          out[2] = m[2] * x + m[6] * y + m[10] * z + m[14];
          return out;
        };
        vec3.transformQuat = function (out, a, q) {
          var x = a[0], y = a[1], z = a[2], qx = q[0], qy = q[1], qz = q[2], qw = q[3], ix = qw * x + qy * z - qz * y, iy = qw * y + qz * x - qx * z, iz = qw * z + qx * y - qy * x, iw = -qx * x - qy * y - qz * z;
          out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
          out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
          out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
          return out;
        };
        vec3.forEach = function () {
          var vec = new Float32Array(3);
          return function (a, stride, offset, count, fn, arg) {
            var i, l;
            if (!stride) {
              stride = 3;
            }
            if (!offset) {
              offset = 0;
            }
            if (count) {
              l = Math.min(count * stride + offset, a.length);
            } else {
              l = a.length;
            }
            for (i = offset; i < l; i += stride) {
              vec[0] = a[i];
              vec[1] = a[i + 1];
              vec[2] = a[i + 2];
              fn(vec, vec, arg);
              a[i] = vec[0];
              a[i + 1] = vec[1];
              a[i + 2] = vec[2];
            }
            return a;
          };
        }();
        vec3.str = function (a) {
          return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
        };
        if (typeof exports !== 'undefined') {
          exports.vec3 = vec3;
        }
        ;
        var vec4 = {};
        if (!GLMAT_EPSILON) {
          var GLMAT_EPSILON = 1e-6;
        }
        vec4.create = function () {
          return new Float32Array(4);
        };
        vec4.clone = function (a) {
          var out = new Float32Array(4);
          out[0] = a[0];
          out[1] = a[1];
          out[2] = a[2];
          out[3] = a[3];
          return out;
        };
        vec4.fromValues = function (x, y, z, w) {
          var out = new Float32Array(4);
          out[0] = x;
          out[1] = y;
          out[2] = z;
          out[3] = w;
          return out;
        };
        vec4.copy = function (out, a) {
          out[0] = a[0];
          out[1] = a[1];
          out[2] = a[2];
          out[3] = a[3];
          return out;
        };
        vec4.set = function (out, x, y, z, w) {
          out[0] = x;
          out[1] = y;
          out[2] = z;
          out[3] = w;
          return out;
        };
        vec4.add = function (out, a, b) {
          out[0] = a[0] + b[0];
          out[1] = a[1] + b[1];
          out[2] = a[2] + b[2];
          out[3] = a[3] + b[3];
          return out;
        };
        vec4.sub = vec4.subtract = function (out, a, b) {
          out[0] = a[0] - b[0];
          out[1] = a[1] - b[1];
          out[2] = a[2] - b[2];
          out[3] = a[3] - b[3];
          return out;
        };
        vec4.mul = vec4.multiply = function (out, a, b) {
          out[0] = a[0] * b[0];
          out[1] = a[1] * b[1];
          out[2] = a[2] * b[2];
          out[3] = a[3] * b[3];
          return out;
        };
        vec4.div = vec4.divide = function (out, a, b) {
          out[0] = a[0] / b[0];
          out[1] = a[1] / b[1];
          out[2] = a[2] / b[2];
          out[3] = a[3] / b[3];
          return out;
        };
        vec4.min = function (out, a, b) {
          out[0] = Math.min(a[0], b[0]);
          out[1] = Math.min(a[1], b[1]);
          out[2] = Math.min(a[2], b[2]);
          out[3] = Math.min(a[3], b[3]);
          return out;
        };
        vec4.max = function (out, a, b) {
          out[0] = Math.max(a[0], b[0]);
          out[1] = Math.max(a[1], b[1]);
          out[2] = Math.max(a[2], b[2]);
          out[3] = Math.max(a[3], b[3]);
          return out;
        };
        vec4.scale = function (out, a, b) {
          out[0] = a[0] * b;
          out[1] = a[1] * b;
          out[2] = a[2] * b;
          out[3] = a[3] * b;
          return out;
        };
        vec4.dist = vec4.distance = function (a, b) {
          var x = b[0] - a[0], y = b[1] - a[1], z = b[2] - a[2], w = b[3] - a[3];
          return Math.sqrt(x * x + y * y + z * z + w * w);
        };
        vec4.sqrDist = vec4.squaredDistance = function (a, b) {
          var x = b[0] - a[0], y = b[1] - a[1], z = b[2] - a[2], w = b[3] - a[3];
          return x * x + y * y + z * z + w * w;
        };
        vec4.len = vec4.length = function (a) {
          var x = a[0], y = a[1], z = a[2], w = a[3];
          return Math.sqrt(x * x + y * y + z * z + w * w);
        };
        vec4.sqrLen = vec4.squaredLength = function (a) {
          var x = a[0], y = a[1], z = a[2], w = a[3];
          return x * x + y * y + z * z + w * w;
        };
        vec4.negate = function (out, a) {
          out[0] = -a[0];
          out[1] = -a[1];
          out[2] = -a[2];
          out[3] = -a[3];
          return out;
        };
        vec4.normalize = function (out, a) {
          var x = a[0], y = a[1], z = a[2], w = a[3];
          var len = x * x + y * y + z * z + w * w;
          if (len > 0) {
            len = 1 / Math.sqrt(len);
            out[0] = a[0] * len;
            out[1] = a[1] * len;
            out[2] = a[2] * len;
            out[3] = a[3] * len;
          }
          return out;
        };
        vec4.dot = function (a, b) {
          return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
        };
        vec4.lerp = function (out, a, b, t) {
          var ax = a[0], ay = a[1], az = a[2], aw = a[3];
          out[0] = ax + t * (b[0] - ax);
          out[1] = ay + t * (b[1] - ay);
          out[2] = az + t * (b[2] - az);
          out[3] = aw + t * (b[3] - aw);
          return out;
        };
        vec4.transformMat4 = function (out, a, m) {
          var x = a[0], y = a[1], z = a[2], w = a[3];
          out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
          out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
          out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
          out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
          return out;
        };
        vec4.transformQuat = function (out, a, q) {
          var x = a[0], y = a[1], z = a[2], qx = q[0], qy = q[1], qz = q[2], qw = q[3], ix = qw * x + qy * z - qz * y, iy = qw * y + qz * x - qx * z, iz = qw * z + qx * y - qy * x, iw = -qx * x - qy * y - qz * z;
          out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
          out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
          out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
          return out;
        };
        vec4.forEach = function () {
          var vec = new Float32Array(4);
          return function (a, stride, offset, count, fn, arg) {
            var i, l;
            if (!stride) {
              stride = 4;
            }
            if (!offset) {
              offset = 0;
            }
            if (count) {
              l = Math.min(count * stride + offset, a.length);
            } else {
              l = a.length;
            }
            for (i = offset; i < l; i += stride) {
              vec[0] = a[i];
              vec[1] = a[i + 1];
              vec[2] = a[i + 2];
              vec[3] = a[i + 3];
              fn(vec, vec, arg);
              a[i] = vec[0];
              a[i + 1] = vec[1];
              a[i + 2] = vec[2];
              a[i + 3] = vec[3];
            }
            return a;
          };
        }();
        vec4.str = function (a) {
          return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
        };
        if (typeof exports !== 'undefined') {
          exports.vec4 = vec4;
        }
        ;
        var mat2 = {};
        var mat2Identity = new Float32Array([
            1,
            0,
            0,
            1
          ]);
        if (!GLMAT_EPSILON) {
          var GLMAT_EPSILON = 1e-6;
        }
        mat2.create = function () {
          return new Float32Array(mat2Identity);
        };
        mat2.clone = function (a) {
          var out = new Float32Array(4);
          out[0] = a[0];
          out[1] = a[1];
          out[2] = a[2];
          out[3] = a[3];
          return out;
        };
        mat2.copy = function (out, a) {
          out[0] = a[0];
          out[1] = a[1];
          out[2] = a[2];
          out[3] = a[3];
          return out;
        };
        mat2.identity = function (out) {
          out[0] = 1;
          out[1] = 0;
          out[2] = 0;
          out[3] = 1;
          return out;
        };
        mat2.transpose = function (out, a) {
          if (out === a) {
            var a1 = a[1];
            out[1] = a[2];
            out[2] = a1;
          } else {
            out[0] = a[0];
            out[1] = a[2];
            out[2] = a[1];
            out[3] = a[3];
          }
          return out;
        };
        mat2.invert = function (out, a) {
          var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], det = a0 * a3 - a2 * a1;
          if (!det) {
            return null;
          }
          det = 1 / det;
          out[0] = a3 * det;
          out[1] = -a1 * det;
          out[2] = -a2 * det;
          out[3] = a0 * det;
          return out;
        };
        mat2.adjoint = function (out, a) {
          var a0 = a[0];
          out[0] = a[3];
          out[1] = -a[1];
          out[2] = -a[2];
          out[3] = a0;
          return out;
        };
        mat2.determinant = function (a) {
          return a[0] * a[3] - a[2] * a[1];
        };
        mat2.mul = mat2.multiply = function (out, a, b) {
          var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
          var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
          out[0] = a0 * b0 + a1 * b2;
          out[1] = a0 * b1 + a1 * b3;
          out[2] = a2 * b0 + a3 * b2;
          out[3] = a2 * b1 + a3 * b3;
          return out;
        };
        mat2.rotate = function (out, a, rad) {
          var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], s = Math.sin(rad), c = Math.cos(rad);
          out[0] = a0 * c + a1 * s;
          out[1] = a0 * -s + a1 * c;
          out[2] = a2 * c + a3 * s;
          out[3] = a2 * -s + a3 * c;
          return out;
        };
        mat2.scale = function (out, a, v) {
          var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], v0 = v[0], v1 = v[1];
          out[0] = a0 * v0;
          out[1] = a1 * v1;
          out[2] = a2 * v0;
          out[3] = a3 * v1;
          return out;
        };
        mat2.str = function (a) {
          return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
        };
        if (typeof exports !== 'undefined') {
          exports.mat2 = mat2;
        }
        ;
        var mat3 = {};
        var mat3Identity = new Float32Array([
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1
          ]);
        if (!GLMAT_EPSILON) {
          var GLMAT_EPSILON = 1e-6;
        }
        mat3.create = function () {
          return new Float32Array(mat3Identity);
        };
        mat3.clone = function (a) {
          var out = new Float32Array(9);
          out[0] = a[0];
          out[1] = a[1];
          out[2] = a[2];
          out[3] = a[3];
          out[4] = a[4];
          out[5] = a[5];
          out[6] = a[6];
          out[7] = a[7];
          out[8] = a[8];
          return out;
        };
        mat3.copy = function (out, a) {
          out[0] = a[0];
          out[1] = a[1];
          out[2] = a[2];
          out[3] = a[3];
          out[4] = a[4];
          out[5] = a[5];
          out[6] = a[6];
          out[7] = a[7];
          out[8] = a[8];
          return out;
        };
        mat3.identity = function (out) {
          out[0] = 1;
          out[1] = 0;
          out[2] = 0;
          out[3] = 0;
          out[4] = 1;
          out[5] = 0;
          out[6] = 0;
          out[7] = 0;
          out[8] = 1;
          return out;
        };
        mat3.transpose = function (out, a) {
          if (out === a) {
            var a01 = a[1], a02 = a[2], a12 = a[5];
            out[1] = a[3];
            out[2] = a[6];
            out[3] = a01;
            out[5] = a[7];
            out[6] = a02;
            out[7] = a12;
          } else {
            out[0] = a[0];
            out[1] = a[3];
            out[2] = a[6];
            out[3] = a[1];
            out[4] = a[4];
            out[5] = a[7];
            out[6] = a[2];
            out[7] = a[5];
            out[8] = a[8];
          }
          return out;
        };
        mat3.invert = function (out, a) {
          var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], b01 = a22 * a11 - a12 * a21, b11 = -a22 * a10 + a12 * a20, b21 = a21 * a10 - a11 * a20, det = a00 * b01 + a01 * b11 + a02 * b21;
          if (!det) {
            return null;
          }
          det = 1 / det;
          out[0] = b01 * det;
          out[1] = (-a22 * a01 + a02 * a21) * det;
          out[2] = (a12 * a01 - a02 * a11) * det;
          out[3] = b11 * det;
          out[4] = (a22 * a00 - a02 * a20) * det;
          out[5] = (-a12 * a00 + a02 * a10) * det;
          out[6] = b21 * det;
          out[7] = (-a21 * a00 + a01 * a20) * det;
          out[8] = (a11 * a00 - a01 * a10) * det;
          return out;
        };
        mat3.adjoint = function (out, a) {
          var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8];
          out[0] = a11 * a22 - a12 * a21;
          out[1] = a02 * a21 - a01 * a22;
          out[2] = a01 * a12 - a02 * a11;
          out[3] = a12 * a20 - a10 * a22;
          out[4] = a00 * a22 - a02 * a20;
          out[5] = a02 * a10 - a00 * a12;
          out[6] = a10 * a21 - a11 * a20;
          out[7] = a01 * a20 - a00 * a21;
          out[8] = a00 * a11 - a01 * a10;
          return out;
        };
        mat3.determinant = function (a) {
          var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8];
          return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
        };
        mat3.mul = mat3.multiply = function (out, a, b) {
          var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], b00 = b[0], b01 = b[1], b02 = b[2], b10 = b[3], b11 = b[4], b12 = b[5], b20 = b[6], b21 = b[7], b22 = b[8];
          out[0] = b00 * a00 + b01 * a10 + b02 * a20;
          out[1] = b00 * a01 + b01 * a11 + b02 * a21;
          out[2] = b00 * a02 + b01 * a12 + b02 * a22;
          out[3] = b10 * a00 + b11 * a10 + b12 * a20;
          out[4] = b10 * a01 + b11 * a11 + b12 * a21;
          out[5] = b10 * a02 + b11 * a12 + b12 * a22;
          out[6] = b20 * a00 + b21 * a10 + b22 * a20;
          out[7] = b20 * a01 + b21 * a11 + b22 * a21;
          out[8] = b20 * a02 + b21 * a12 + b22 * a22;
          return out;
        };
        mat3.str = function (a) {
          return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';
        };
        if (typeof exports !== 'undefined') {
          exports.mat3 = mat3;
        }
        ;
        var mat4 = {};
        var mat4Identity = new Float32Array([
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1
          ]);
        if (!GLMAT_EPSILON) {
          var GLMAT_EPSILON = 1e-6;
        }
        mat4.create = function () {
          return new Float32Array(mat4Identity);
        };
        mat4.clone = function (a) {
          var out = new Float32Array(16);
          out[0] = a[0];
          out[1] = a[1];
          out[2] = a[2];
          out[3] = a[3];
          out[4] = a[4];
          out[5] = a[5];
          out[6] = a[6];
          out[7] = a[7];
          out[8] = a[8];
          out[9] = a[9];
          out[10] = a[10];
          out[11] = a[11];
          out[12] = a[12];
          out[13] = a[13];
          out[14] = a[14];
          out[15] = a[15];
          return out;
        };
        mat4.copy = function (out, a) {
          out[0] = a[0];
          out[1] = a[1];
          out[2] = a[2];
          out[3] = a[3];
          out[4] = a[4];
          out[5] = a[5];
          out[6] = a[6];
          out[7] = a[7];
          out[8] = a[8];
          out[9] = a[9];
          out[10] = a[10];
          out[11] = a[11];
          out[12] = a[12];
          out[13] = a[13];
          out[14] = a[14];
          out[15] = a[15];
          return out;
        };
        mat4.identity = function (out) {
          out[0] = 1;
          out[1] = 0;
          out[2] = 0;
          out[3] = 0;
          out[4] = 0;
          out[5] = 1;
          out[6] = 0;
          out[7] = 0;
          out[8] = 0;
          out[9] = 0;
          out[10] = 1;
          out[11] = 0;
          out[12] = 0;
          out[13] = 0;
          out[14] = 0;
          out[15] = 1;
          return out;
        };
        mat4.transpose = function (out, a) {
          if (out === a) {
            var a01 = a[1], a02 = a[2], a03 = a[3], a12 = a[6], a13 = a[7], a23 = a[11];
            out[1] = a[4];
            out[2] = a[8];
            out[3] = a[12];
            out[4] = a01;
            out[6] = a[9];
            out[7] = a[13];
            out[8] = a02;
            out[9] = a12;
            out[11] = a[14];
            out[12] = a03;
            out[13] = a13;
            out[14] = a23;
          } else {
            out[0] = a[0];
            out[1] = a[4];
            out[2] = a[8];
            out[3] = a[12];
            out[4] = a[1];
            out[5] = a[5];
            out[6] = a[9];
            out[7] = a[13];
            out[8] = a[2];
            out[9] = a[6];
            out[10] = a[10];
            out[11] = a[14];
            out[12] = a[3];
            out[13] = a[7];
            out[14] = a[11];
            out[15] = a[15];
          }
          return out;
        };
        mat4.invert = function (out, a) {
          var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15], b00 = a00 * a11 - a01 * a10, b01 = a00 * a12 - a02 * a10, b02 = a00 * a13 - a03 * a10, b03 = a01 * a12 - a02 * a11, b04 = a01 * a13 - a03 * a11, b05 = a02 * a13 - a03 * a12, b06 = a20 * a31 - a21 * a30, b07 = a20 * a32 - a22 * a30, b08 = a20 * a33 - a23 * a30, b09 = a21 * a32 - a22 * a31, b10 = a21 * a33 - a23 * a31, b11 = a22 * a33 - a23 * a32, det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
          if (!det) {
            return null;
          }
          det = 1 / det;
          out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
          out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
          out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
          out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
          out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
          out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
          out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
          out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
          out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
          out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
          out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
          out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
          out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
          out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
          out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
          out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
          return out;
        };
        mat4.adjoint = function (out, a) {
          var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
          out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
          out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
          out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
          out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
          out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
          out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
          out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
          out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
          out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
          out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
          out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
          out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
          out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
          out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
          out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
          out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
          return out;
        };
        mat4.determinant = function (a) {
          var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15], b00 = a00 * a11 - a01 * a10, b01 = a00 * a12 - a02 * a10, b02 = a00 * a13 - a03 * a10, b03 = a01 * a12 - a02 * a11, b04 = a01 * a13 - a03 * a11, b05 = a02 * a13 - a03 * a12, b06 = a20 * a31 - a21 * a30, b07 = a20 * a32 - a22 * a30, b08 = a20 * a33 - a23 * a30, b09 = a21 * a32 - a22 * a31, b10 = a21 * a33 - a23 * a31, b11 = a22 * a33 - a23 * a32;
          return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
        };
        mat4.mul = mat4.multiply = function (out, a, b) {
          var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
          var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
          out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
          out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
          out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
          out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
          b0 = b[4];
          b1 = b[5];
          b2 = b[6];
          b3 = b[7];
          out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
          out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
          out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
          out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
          b0 = b[8];
          b1 = b[9];
          b2 = b[10];
          b3 = b[11];
          out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
          out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
          out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
          out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
          b0 = b[12];
          b1 = b[13];
          b2 = b[14];
          b3 = b[15];
          out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
          out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
          out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
          out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
          return out;
        };
        mat4.translate = function (out, a, v) {
          var x = v[0], y = v[1], z = v[2], a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23;
          if (a === out) {
            out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
            out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
            out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
            out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
          } else {
            a00 = a[0];
            a01 = a[1];
            a02 = a[2];
            a03 = a[3];
            a10 = a[4];
            a11 = a[5];
            a12 = a[6];
            a13 = a[7];
            a20 = a[8];
            a21 = a[9];
            a22 = a[10];
            a23 = a[11];
            out[0] = a00;
            out[1] = a01;
            out[2] = a02;
            out[3] = a03;
            out[4] = a10;
            out[5] = a11;
            out[6] = a12;
            out[7] = a13;
            out[8] = a20;
            out[9] = a21;
            out[10] = a22;
            out[11] = a23;
            out[12] = a00 * x + a10 * y + a20 * z + a[12];
            out[13] = a01 * x + a11 * y + a21 * z + a[13];
            out[14] = a02 * x + a12 * y + a22 * z + a[14];
            out[15] = a03 * x + a13 * y + a23 * z + a[15];
          }
          return out;
        };
        mat4.scale = function (out, a, v) {
          var x = v[0], y = v[1], z = v[2];
          out[0] = a[0] * x;
          out[1] = a[1] * x;
          out[2] = a[2] * x;
          out[3] = a[3] * x;
          out[4] = a[4] * y;
          out[5] = a[5] * y;
          out[6] = a[6] * y;
          out[7] = a[7] * y;
          out[8] = a[8] * z;
          out[9] = a[9] * z;
          out[10] = a[10] * z;
          out[11] = a[11] * z;
          out[12] = a[12];
          out[13] = a[13];
          out[14] = a[14];
          out[15] = a[15];
          return out;
        };
        mat4.rotate = function (out, a, rad, axis) {
          var x = axis[0], y = axis[1], z = axis[2], len = Math.sqrt(x * x + y * y + z * z), s, c, t, a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, b00, b01, b02, b10, b11, b12, b20, b21, b22;
          if (Math.abs(len) < GLMAT_EPSILON) {
            return null;
          }
          len = 1 / len;
          x *= len;
          y *= len;
          z *= len;
          s = Math.sin(rad);
          c = Math.cos(rad);
          t = 1 - c;
          a00 = a[0];
          a01 = a[1];
          a02 = a[2];
          a03 = a[3];
          a10 = a[4];
          a11 = a[5];
          a12 = a[6];
          a13 = a[7];
          a20 = a[8];
          a21 = a[9];
          a22 = a[10];
          a23 = a[11];
          b00 = x * x * t + c;
          b01 = y * x * t + z * s;
          b02 = z * x * t - y * s;
          b10 = x * y * t - z * s;
          b11 = y * y * t + c;
          b12 = z * y * t + x * s;
          b20 = x * z * t + y * s;
          b21 = y * z * t - x * s;
          b22 = z * z * t + c;
          out[0] = a00 * b00 + a10 * b01 + a20 * b02;
          out[1] = a01 * b00 + a11 * b01 + a21 * b02;
          out[2] = a02 * b00 + a12 * b01 + a22 * b02;
          out[3] = a03 * b00 + a13 * b01 + a23 * b02;
          out[4] = a00 * b10 + a10 * b11 + a20 * b12;
          out[5] = a01 * b10 + a11 * b11 + a21 * b12;
          out[6] = a02 * b10 + a12 * b11 + a22 * b12;
          out[7] = a03 * b10 + a13 * b11 + a23 * b12;
          out[8] = a00 * b20 + a10 * b21 + a20 * b22;
          out[9] = a01 * b20 + a11 * b21 + a21 * b22;
          out[10] = a02 * b20 + a12 * b21 + a22 * b22;
          out[11] = a03 * b20 + a13 * b21 + a23 * b22;
          if (a !== out) {
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
          }
          return out;
        };
        mat4.rotateX = function (out, a, rad) {
          var s = Math.sin(rad), c = Math.cos(rad), a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
          if (a !== out) {
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
          }
          out[4] = a10 * c + a20 * s;
          out[5] = a11 * c + a21 * s;
          out[6] = a12 * c + a22 * s;
          out[7] = a13 * c + a23 * s;
          out[8] = a20 * c - a10 * s;
          out[9] = a21 * c - a11 * s;
          out[10] = a22 * c - a12 * s;
          out[11] = a23 * c - a13 * s;
          return out;
        };
        mat4.rotateY = function (out, a, rad) {
          var s = Math.sin(rad), c = Math.cos(rad), a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
          if (a !== out) {
            out[4] = a[4];
            out[5] = a[5];
            out[6] = a[6];
            out[7] = a[7];
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
          }
          out[0] = a00 * c - a20 * s;
          out[1] = a01 * c - a21 * s;
          out[2] = a02 * c - a22 * s;
          out[3] = a03 * c - a23 * s;
          out[8] = a00 * s + a20 * c;
          out[9] = a01 * s + a21 * c;
          out[10] = a02 * s + a22 * c;
          out[11] = a03 * s + a23 * c;
          return out;
        };
        mat4.rotateZ = function (out, a, rad) {
          var s = Math.sin(rad), c = Math.cos(rad), a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
          if (a !== out) {
            out[8] = a[8];
            out[9] = a[9];
            out[10] = a[10];
            out[11] = a[11];
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
          }
          out[0] = a00 * c + a10 * s;
          out[1] = a01 * c + a11 * s;
          out[2] = a02 * c + a12 * s;
          out[3] = a03 * c + a13 * s;
          out[4] = a10 * c - a00 * s;
          out[5] = a11 * c - a01 * s;
          out[6] = a12 * c - a02 * s;
          out[7] = a13 * c - a03 * s;
          return out;
        };
        mat4.fromRotationTranslation = function (out, q, v) {
          var x = q[0], y = q[1], z = q[2], w = q[3], x2 = x + x, y2 = y + y, z2 = z + z, xx = x * x2, xy = x * y2, xz = x * z2, yy = y * y2, yz = y * z2, zz = z * z2, wx = w * x2, wy = w * y2, wz = w * z2;
          out[0] = 1 - (yy + zz);
          out[1] = xy + wz;
          out[2] = xz - wy;
          out[3] = 0;
          out[4] = xy - wz;
          out[5] = 1 - (xx + zz);
          out[6] = yz + wx;
          out[7] = 0;
          out[8] = xz + wy;
          out[9] = yz - wx;
          out[10] = 1 - (xx + yy);
          out[11] = 0;
          out[12] = v[0];
          out[13] = v[1];
          out[14] = v[2];
          out[15] = 1;
          return out;
        };
        mat4.frustum = function (out, left, right, bottom, top, near, far) {
          var rl = 1 / (right - left), tb = 1 / (top - bottom), nf = 1 / (near - far);
          out[0] = near * 2 * rl;
          out[1] = 0;
          out[2] = 0;
          out[3] = 0;
          out[4] = 0;
          out[5] = near * 2 * tb;
          out[6] = 0;
          out[7] = 0;
          out[8] = (right + left) * rl;
          out[9] = (top + bottom) * tb;
          out[10] = (far + near) * nf;
          out[11] = -1;
          out[12] = 0;
          out[13] = 0;
          out[14] = far * near * 2 * nf;
          out[15] = 0;
          return out;
        };
        mat4.perspective = function (out, fovy, aspect, near, far) {
          var f = 1 / Math.tan(fovy / 2), nf = 1 / (near - far);
          out[0] = f / aspect;
          out[1] = 0;
          out[2] = 0;
          out[3] = 0;
          out[4] = 0;
          out[5] = f;
          out[6] = 0;
          out[7] = 0;
          out[8] = 0;
          out[9] = 0;
          out[10] = (far + near) * nf;
          out[11] = -1;
          out[12] = 0;
          out[13] = 0;
          out[14] = 2 * far * near * nf;
          out[15] = 0;
          return out;
        };
        mat4.ortho = function (out, left, right, bottom, top, near, far) {
          var lr = 1 / (left - right), bt = 1 / (bottom - top), nf = 1 / (near - far);
          out[0] = -2 * lr;
          out[1] = 0;
          out[2] = 0;
          out[3] = 0;
          out[4] = 0;
          out[5] = -2 * bt;
          out[6] = 0;
          out[7] = 0;
          out[8] = 0;
          out[9] = 0;
          out[10] = 2 * nf;
          out[11] = 0;
          out[12] = (left + right) * lr;
          out[13] = (top + bottom) * bt;
          out[14] = (far + near) * nf;
          out[15] = 1;
          return out;
        };
        mat4.lookAt = function (out, eye, center, up) {
          var x0, x1, x2, y0, y1, y2, z0, z1, z2, len, eyex = eye[0], eyey = eye[1], eyez = eye[2], upx = up[0], upy = up[1], upz = up[2], centerx = center[0], centery = center[1], centerz = center[2];
          if (Math.abs(eyex - centerx) < GLMAT_EPSILON && Math.abs(eyey - centery) < GLMAT_EPSILON && Math.abs(eyez - centerz) < GLMAT_EPSILON) {
            return mat4.identity(out);
          }
          z0 = eyex - centerx;
          z1 = eyey - centery;
          z2 = eyez - centerz;
          len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
          z0 *= len;
          z1 *= len;
          z2 *= len;
          x0 = upy * z2 - upz * z1;
          x1 = upz * z0 - upx * z2;
          x2 = upx * z1 - upy * z0;
          len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
          if (!len) {
            x0 = 0;
            x1 = 0;
            x2 = 0;
          } else {
            len = 1 / len;
            x0 *= len;
            x1 *= len;
            x2 *= len;
          }
          y0 = z1 * x2 - z2 * x1;
          y1 = z2 * x0 - z0 * x2;
          y2 = z0 * x1 - z1 * x0;
          len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
          if (!len) {
            y0 = 0;
            y1 = 0;
            y2 = 0;
          } else {
            len = 1 / len;
            y0 *= len;
            y1 *= len;
            y2 *= len;
          }
          out[0] = x0;
          out[1] = y0;
          out[2] = z0;
          out[3] = 0;
          out[4] = x1;
          out[5] = y1;
          out[6] = z1;
          out[7] = 0;
          out[8] = x2;
          out[9] = y2;
          out[10] = z2;
          out[11] = 0;
          out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
          out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
          out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
          out[15] = 1;
          return out;
        };
        mat4.str = function (a) {
          return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
        };
        if (typeof exports !== 'undefined') {
          exports.mat4 = mat4;
        }
        ;
        var quat = {};
        var quatIdentity = new Float32Array([
            0,
            0,
            0,
            1
          ]);
        if (!GLMAT_EPSILON) {
          var GLMAT_EPSILON = 1e-6;
        }
        quat.create = function () {
          return new Float32Array(quatIdentity);
        };
        quat.clone = vec4.clone;
        quat.fromValues = vec4.fromValues;
        quat.copy = vec4.copy;
        quat.set = vec4.set;
        quat.identity = function (out) {
          out[0] = 0;
          out[1] = 0;
          out[2] = 0;
          out[3] = 1;
          return out;
        };
        quat.setAxisAngle = function (out, axis, rad) {
          rad = rad * .5;
          var s = Math.sin(rad);
          out[0] = s * axis[0];
          out[1] = s * axis[1];
          out[2] = s * axis[2];
          out[3] = Math.cos(rad);
          return out;
        };
        quat.add = vec4.add;
        quat.mul = quat.multiply = function (out, a, b) {
          var ax = a[0], ay = a[1], az = a[2], aw = a[3], bx = b[0], by = b[1], bz = b[2], bw = b[3];
          out[0] = ax * bw + aw * bx + ay * bz - az * by;
          out[1] = ay * bw + aw * by + az * bx - ax * bz;
          out[2] = az * bw + aw * bz + ax * by - ay * bx;
          out[3] = aw * bw - ax * bx - ay * by - az * bz;
          return out;
        };
        quat.scale = vec4.scale;
        quat.rotateX = function (out, a, rad) {
          rad *= .5;
          var ax = a[0], ay = a[1], az = a[2], aw = a[3], bx = Math.sin(rad), bw = Math.cos(rad);
          out[0] = ax * bw + aw * bx;
          out[1] = ay * bw + az * bx;
          out[2] = az * bw - ay * bx;
          out[3] = aw * bw - ax * bx;
          return out;
        };
        quat.rotateY = function (out, a, rad) {
          rad *= .5;
          var ax = a[0], ay = a[1], az = a[2], aw = a[3], by = Math.sin(rad), bw = Math.cos(rad);
          out[0] = ax * bw - az * by;
          out[1] = ay * bw + aw * by;
          out[2] = az * bw + ax * by;
          out[3] = aw * bw - ay * by;
          return out;
        };
        quat.rotateZ = function (out, a, rad) {
          rad *= .5;
          var ax = a[0], ay = a[1], az = a[2], aw = a[3], bz = Math.sin(rad), bw = Math.cos(rad);
          out[0] = ax * bw + ay * bz;
          out[1] = ay * bw - ax * bz;
          out[2] = az * bw + aw * bz;
          out[3] = aw * bw - az * bz;
          return out;
        };
        quat.calculateW = function (out, a) {
          var x = a[0], y = a[1], z = a[2];
          out[0] = x;
          out[1] = y;
          out[2] = z;
          out[3] = -Math.sqrt(Math.abs(1 - x * x - y * y - z * z));
          return out;
        };
        quat.dot = vec4.dot;
        quat.lerp = vec4.lerp;
        quat.slerp = function (out, a, b, t) {
          var ax = a[0], ay = a[1], az = a[2], aw = a[3], bx = b[0], by = b[1], bz = b[2], bw = a[3];
          var cosHalfTheta = ax * bx + ay * by + az * bz + aw * bw, halfTheta, sinHalfTheta, ratioA, ratioB;
          if (Math.abs(cosHalfTheta) >= 1) {
            if (out !== a) {
              out[0] = ax;
              out[1] = ay;
              out[2] = az;
              out[3] = aw;
            }
            return out;
          }
          halfTheta = Math.acos(cosHalfTheta);
          sinHalfTheta = Math.sqrt(1 - cosHalfTheta * cosHalfTheta);
          if (Math.abs(sinHalfTheta) < .001) {
            out[0] = ax * .5 + bx * .5;
            out[1] = ay * .5 + by * .5;
            out[2] = az * .5 + bz * .5;
            out[3] = aw * .5 + bw * .5;
            return out;
          }
          ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta;
          ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
          out[0] = ax * ratioA + bx * ratioB;
          out[1] = ay * ratioA + by * ratioB;
          out[2] = az * ratioA + bz * ratioB;
          out[3] = aw * ratioA + bw * ratioB;
          return out;
        };
        quat.invert = function (out, a) {
          var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3, invDot = dot ? 1 / dot : 0;
          out[0] = -a0 * invDot;
          out[1] = -a1 * invDot;
          out[2] = -a2 * invDot;
          out[3] = a3 * invDot;
          return out;
        };
        quat.conjugate = function (out, a) {
          out[0] = -a[0];
          out[1] = -a[1];
          out[2] = -a[2];
          out[3] = a[3];
          return out;
        };
        quat.len = quat.length = vec4.length;
        quat.sqrLen = quat.squaredLength = vec4.squaredLength;
        quat.normalize = vec4.normalize;
        quat.str = function (a) {
          return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
        };
        if (typeof exports !== 'undefined') {
          exports.quat = quat;
        }
        ;
      }(shim.exports));
    }());
  });
  require.define('/Enum.coffee', function (module, exports, __dirname, __filename) {
    var Enum;
    module.exports = Enum = function () {
      function Enum(param$, param$1) {
        this.name = param$;
        this.value = param$1;
      }
      Enum.prototype.toString = function () {
        return this.name;
      };
      Enum.prototype.valueOf = function () {
        return this.value;
      };
      return Enum;
    }();
  });
  require.define('/ui\\html\\index.coffee', function (module, exports, __dirname, __filename) {
    var assert;
    Object.merge(exports, {
      isNode: function (a) {
        return null != (null != a ? a.nodeName : void 0);
      },
      isElement: function (a) {
        return null != (null != a ? a.tagName : void 0);
      },
      createElement: function () {
        var creator;
        if (null != (null != global.document ? global.document.createElement : void 0)) {
          creator = global.document.createElement('div');
          return function (html) {
            var element;
            creator.innerHTML = html;
            element = creator.firstChild;
            if (null != element)
              creator.removeChild(element);
            return element;
          };
        } else {
          return function () {
            throw new Error("Can't create elements without document");
          };
        }
      }()
    });
    Object.merge(exports, { Control: require('/ui\\html\\Control.coffee', module) });
    if (typeof describe === 'function') {
      assert = require('assert', module);
      describe('glass.ui.html', function () {
        if (null != global.window)
          return describe('createElement', function () {
            return it('creates with correct tag, attributes and children', function () {
              var element;
              element = exports.createElement('<div id="test">Test</div>');
              assert.equal(element.tagName, 'DIV');
              assert.equal(element.getAttribute('id'), 'test');
              return assert.equal(element.innerHTML, 'Test');
            });
          });
      });
    }
  });
  require.define('assert', function (module, exports, __dirname, __filename) {
    var util = require('util', module);
    var pSlice = Array.prototype.slice;
    var assert = module.exports = ok;
    assert.AssertionError = function AssertionError(options) {
      this.name = 'AssertionError';
      this.message = options.message;
      this.actual = options.actual;
      this.expected = options.expected;
      this.operator = options.operator;
      var stackStartFunction = options.stackStartFunction || fail;
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, stackStartFunction);
      }
    };
    util.inherits(assert.AssertionError, Error);
    function replacer(key, value) {
      if (value === undefined) {
        return '' + value;
      }
      if (typeof value === 'number' && (isNaN(value) || !isFinite(value))) {
        return value.toString();
      }
      if (typeof value === 'function' || value instanceof RegExp) {
        return value.toString();
      }
      return value;
    }
    function truncate(s, n) {
      if (typeof s == 'string') {
        return s.length < n ? s : s.slice(0, n);
      } else {
        return s;
      }
    }
    assert.AssertionError.prototype.toString = function () {
      if (this.message) {
        return [
          this.name + ':',
          this.message
        ].join(' ');
      } else {
        return [
          this.name + ':',
          truncate(JSON.stringify(this.actual, replacer), 128),
          this.operator,
          truncate(JSON.stringify(this.expected, replacer), 128)
        ].join(' ');
      }
    };
    function fail(actual, expected, message, operator, stackStartFunction) {
      throw new assert.AssertionError({
        message: message,
        actual: actual,
        expected: expected,
        operator: operator,
        stackStartFunction: stackStartFunction
      });
    }
    assert.fail = fail;
    function ok(value, message) {
      if (!!!value)
        fail(value, true, message, '==', assert.ok);
    }
    assert.ok = ok;
    assert.equal = function equal(actual, expected, message) {
      if (actual != expected)
        fail(actual, expected, message, '==', assert.equal);
    };
    assert.notEqual = function notEqual(actual, expected, message) {
      if (actual == expected) {
        fail(actual, expected, message, '!=', assert.notEqual);
      }
    };
    assert.deepEqual = function deepEqual(actual, expected, message) {
      if (!_deepEqual(actual, expected)) {
        fail(actual, expected, message, 'deepEqual', assert.deepEqual);
      }
    };
    function _deepEqual(actual, expected) {
      if (actual === expected) {
        return true;
      } else if (Buffer.isBuffer(actual) && Buffer.isBuffer(expected)) {
        if (actual.length != expected.length)
          return false;
        for (var i = 0; i < actual.length; i++) {
          if (actual[i] !== expected[i])
            return false;
        }
        return true;
      } else if (actual instanceof Date && expected instanceof Date) {
        return actual.getTime() === expected.getTime();
      } else if (actual instanceof RegExp && expected instanceof RegExp) {
        return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase;
      } else if (typeof actual != 'object' && typeof expected != 'object') {
        return actual == expected;
      } else {
        return objEquiv(actual, expected);
      }
    }
    function isUndefinedOrNull(value) {
      return value === null || value === undefined;
    }
    function isArguments(object) {
      return Object.prototype.toString.call(object) == '[object Arguments]';
    }
    function objEquiv(a, b) {
      if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
        return false;
      if (a.prototype !== b.prototype)
        return false;
      if (isArguments(a)) {
        if (!isArguments(b)) {
          return false;
        }
        a = pSlice.call(a);
        b = pSlice.call(b);
        return _deepEqual(a, b);
      }
      try {
        var ka = Object.keys(a), kb = Object.keys(b), key, i;
      } catch (e) {
        return false;
      }
      if (ka.length != kb.length)
        return false;
      ka.sort();
      kb.sort();
      for (i = ka.length - 1; i >= 0; i--) {
        if (ka[i] != kb[i])
          return false;
      }
      for (i = ka.length - 1; i >= 0; i--) {
        key = ka[i];
        if (!_deepEqual(a[key], b[key]))
          return false;
      }
      return true;
    }
    assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
      if (_deepEqual(actual, expected)) {
        fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
      }
    };
    assert.strictEqual = function strictEqual(actual, expected, message) {
      if (actual !== expected) {
        fail(actual, expected, message, '===', assert.strictEqual);
      }
    };
    assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
      if (actual === expected) {
        fail(actual, expected, message, '!==', assert.notStrictEqual);
      }
    };
    function expectedException(actual, expected) {
      if (!actual || !expected) {
        return false;
      }
      if (Object.prototype.toString.call(expected) == '[object RegExp]') {
        return expected.test(actual);
      } else if (actual instanceof expected) {
        return true;
      } else if (expected.call({}, actual) === true) {
        return true;
      }
      return false;
    }
    function _throws(shouldThrow, block, expected, message) {
      var actual;
      if (typeof expected === 'string') {
        message = expected;
        expected = null;
      }
      try {
        block();
      } catch (e) {
        actual = e;
      }
      message = (expected && expected.name ? ' (' + expected.name + ').' : '.') + (message ? ' ' + message : '.');
      if (shouldThrow && !actual) {
        fail(actual, expected, 'Missing expected exception' + message);
      }
      if (!shouldThrow && expectedException(actual, expected)) {
        fail(actual, expected, 'Got unwanted exception' + message);
      }
      if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {
        throw actual;
      }
    }
    assert.throws = function (block, error, message) {
      _throws.apply(this, [true].concat(pSlice.call(arguments)));
    };
    assert.doesNotThrow = function (block, message) {
      _throws.apply(this, [false].concat(pSlice.call(arguments)));
    };
    assert.ifError = function (err) {
      if (err) {
        throw err;
      }
    };
  });
  require.define('util', function (module, exports, __dirname, __filename) {
    var formatRegExp = /%[sdj%]/g;
    exports.format = function (f) {
      if (typeof f !== 'string') {
        var objects = [];
        for (var i = 0; i < arguments.length; i++) {
          objects.push(inspect(arguments[i]));
        }
        return objects.join(' ');
      }
      var i = 1;
      var args = arguments;
      var len = args.length;
      var str = String(f).replace(formatRegExp, function (x) {
          if (x === '%%')
            return '%';
          if (i >= len)
            return x;
          switch (x) {
          case '%s':
            return String(args[i++]);
          case '%d':
            return Number(args[i++]);
          case '%j':
            return JSON.stringify(args[i++]);
          default:
            return x;
          }
        });
      for (var x = args[i]; i < len; x = args[++i]) {
        if (x === null || typeof x !== 'object') {
          str += ' ' + x;
        } else {
          str += ' ' + inspect(x);
        }
      }
      return str;
    };
    exports.deprecate = function (fn, msg) {
      if (process.noDeprecation === true) {
        return fn;
      }
      var warned = false;
      function deprecated() {
        if (!warned) {
          if (process.throwDeprecation) {
            throw new Error(msg);
          } else if (process.traceDeprecation) {
            console.trace(msg);
          } else {
            console.error(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }
      return deprecated;
    };
    exports.print = function () {
      for (var i = 0, len = arguments.length; i < len; ++i) {
        process.stdout.write(String(arguments[i]));
      }
    };
    exports.puts = function () {
      for (var i = 0, len = arguments.length; i < len; ++i) {
        process.stdout.write(arguments[i] + '\n');
      }
    };
    exports.debug = function (x) {
      process.stderr.write('DEBUG: ' + x + '\n');
    };
    var error = exports.error = function (x) {
        for (var i = 0, len = arguments.length; i < len; ++i) {
          process.stderr.write(arguments[i] + '\n');
        }
      };
    function inspect(obj, opts) {
      var ctx = {
          seen: [],
          stylize: stylizeNoColor
        };
      if (arguments.length >= 3)
        ctx.depth = arguments[2];
      if (arguments.length >= 4)
        ctx.colors = arguments[3];
      if (typeof opts === 'boolean') {
        ctx.showHidden = opts;
      } else if (opts) {
        exports._extend(ctx, opts);
      }
      if (typeof ctx.showHidden === 'undefined')
        ctx.showHidden = false;
      if (typeof ctx.depth === 'undefined')
        ctx.depth = 2;
      if (typeof ctx.colors === 'undefined')
        ctx.colors = false;
      if (typeof ctx.customInspect === 'undefined')
        ctx.customInspect = true;
      if (ctx.colors)
        ctx.stylize = stylizeWithColor;
      return formatValue(ctx, obj, ctx.depth);
    }
    exports.inspect = inspect;
    inspect.colors = {
      'bold': [
        1,
        22
      ],
      'italic': [
        3,
        23
      ],
      'underline': [
        4,
        24
      ],
      'inverse': [
        7,
        27
      ],
      'white': [
        37,
        39
      ],
      'grey': [
        90,
        39
      ],
      'black': [
        30,
        39
      ],
      'blue': [
        34,
        39
      ],
      'cyan': [
        36,
        39
      ],
      'green': [
        32,
        39
      ],
      'magenta': [
        35,
        39
      ],
      'red': [
        31,
        39
      ],
      'yellow': [
        33,
        39
      ]
    };
    inspect.styles = {
      'special': 'cyan',
      'number': 'yellow',
      'boolean': 'yellow',
      'undefined': 'grey',
      'null': 'bold',
      'string': 'green',
      'date': 'magenta',
      'regexp': 'red'
    };
    function stylizeWithColor(str, styleType) {
      var style = inspect.styles[styleType];
      if (style) {
        return '\x1b[' + inspect.colors[style][0] + 'm' + str + '\x1b[' + inspect.colors[style][1] + 'm';
      } else {
        return str;
      }
    }
    function stylizeNoColor(str, styleType) {
      return str;
    }
    function arrayToHash(array) {
      var hash = {};
      array.forEach(function (val, idx) {
        hash[val] = true;
      });
      return hash;
    }
    function formatValue(ctx, value, recurseTimes) {
      if (ctx.customInspect && value && typeof value.inspect === 'function' && value.inspect !== exports.inspect && !(value.constructor && value.constructor.prototype === value)) {
        return String(value.inspect(recurseTimes));
      }
      var primitive = formatPrimitive(ctx, value);
      if (primitive) {
        return primitive;
      }
      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);
      if (ctx.showHidden) {
        keys = Object.getOwnPropertyNames(value);
      }
      if (keys.length === 0) {
        if (typeof value === 'function') {
          var name = value.name ? ': ' + value.name : '';
          return ctx.stylize('[Function' + name + ']', 'special');
        }
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        }
        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), 'date');
        }
        if (isError(value)) {
          return formatError(value);
        }
      }
      var base = '', array = false, braces = [
          '{',
          '}'
        ];
      if (isArray(value)) {
        array = true;
        braces = [
          '[',
          ']'
        ];
      }
      if (typeof value === 'function') {
        var n = value.name ? ': ' + value.name : '';
        base = ' [Function' + n + ']';
      }
      if (isRegExp(value)) {
        base = ' ' + RegExp.prototype.toString.call(value);
      }
      if (isDate(value)) {
        base = ' ' + Date.prototype.toUTCString.call(value);
      }
      if (isError(value)) {
        base = ' ' + formatError(value);
      }
      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }
      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        } else {
          return ctx.stylize('[Object]', 'special');
        }
      }
      ctx.seen.push(value);
      var output;
      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function (key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }
      ctx.seen.pop();
      return reduceToSingleString(output, base, braces);
    }
    function formatPrimitive(ctx, value) {
      switch (typeof value) {
      case 'undefined':
        return ctx.stylize('undefined', 'undefined');
      case 'string':
        var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return ctx.stylize(simple, 'string');
      case 'number':
        return ctx.stylize('' + value, 'number');
      case 'boolean':
        return ctx.stylize('' + value, 'boolean');
      }
      if (value === null) {
        return ctx.stylize('null', 'null');
      }
    }
    function formatError(value) {
      return '[' + Error.prototype.toString.call(value) + ']';
    }
    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];
      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty(value, String(i))) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
        } else {
          output.push('');
        }
      }
      keys.forEach(function (key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
        }
      });
      return output;
    }
    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize('[Getter/Setter]', 'special');
        } else {
          str = ctx.stylize('[Getter]', 'special');
        }
      } else {
        if (desc.set) {
          str = ctx.stylize('[Setter]', 'special');
        }
      }
      if (!hasOwnProperty(visibleKeys, key)) {
        name = '[' + key + ']';
      }
      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (recurseTimes === null) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }
          if (str.indexOf('\n') > -1) {
            if (array) {
              str = str.split('\n').map(function (line) {
                return '  ' + line;
              }).join('\n').substr(2);
            } else {
              str = '\n' + str.split('\n').map(function (line) {
                return '   ' + line;
              }).join('\n');
            }
          }
        } else {
          str = ctx.stylize('[Circular]', 'special');
        }
      }
      if (typeof name === 'undefined') {
        if (array && key.match(/^\d+$/)) {
          return str;
        }
        name = JSON.stringify('' + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = ctx.stylize(name, 'name');
        } else {
          name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, 'string');
        }
      }
      return name + ': ' + str;
    }
    function reduceToSingleString(output, base, braces) {
      var numLinesEst = 0;
      var length = output.reduce(function (prev, cur) {
          numLinesEst++;
          if (cur.indexOf('\n') >= 0)
            numLinesEst++;
          return prev + cur.length + 1;
        }, 0);
      if (length > 60) {
        return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
      }
      return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }
    function isArray(ar) {
      return Array.isArray(ar) || typeof ar === 'object' && objectToString(ar) === '[object Array]';
    }
    exports.isArray = isArray;
    function isRegExp(re) {
      return typeof re === 'object' && objectToString(re) === '[object RegExp]';
    }
    exports.isRegExp = isRegExp;
    function isDate(d) {
      return typeof d === 'object' && objectToString(d) === '[object Date]';
    }
    exports.isDate = isDate;
    function isError(e) {
      return typeof e === 'object' && objectToString(e) === '[object Error]';
    }
    exports.isError = isError;
    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }
    exports.p = exports.deprecate(function () {
      for (var i = 0, len = arguments.length; i < len; ++i) {
        error(exports.inspect(arguments[i]));
      }
    }, 'util.p: Use console.error() instead.');
    function pad(n) {
      return n < 10 ? '0' + n.toString(10) : n.toString(10);
    }
    var months = [
        'Jan',
        'Feb',
        'Mar',
        'Apr',
        'May',
        'Jun',
        'Jul',
        'Aug',
        'Sep',
        'Oct',
        'Nov',
        'Dec'
      ];
    function timestamp() {
      var d = new Date;
      var time = [
          pad(d.getHours()),
          pad(d.getMinutes()),
          pad(d.getSeconds())
        ].join(':');
      return [
        d.getDate(),
        months[d.getMonth()],
        time
      ].join(' ');
    }
    exports.log = function (msg) {
      exports.puts(timestamp() + ' - ' + msg.toString());
    };
    exports.exec = exports.deprecate(function () {
      return null.exec.apply(this, arguments);
    }, 'util.exec is now called `child_process.exec`.');
    function pump(readStream, writeStream, callback) {
      var callbackCalled = false;
      function call(a, b, c) {
        if (callback && !callbackCalled) {
          callback(a, b, c);
          callbackCalled = true;
        }
      }
      readStream.addListener('data', function (chunk) {
        if (writeStream.write(chunk) === false)
          readStream.pause();
      });
      writeStream.addListener('drain', function () {
        readStream.resume();
      });
      readStream.addListener('end', function () {
        writeStream.end();
      });
      readStream.addListener('close', function () {
        call();
      });
      readStream.addListener('error', function (err) {
        writeStream.end();
        call(err);
      });
      writeStream.addListener('error', function (err) {
        readStream.destroy();
        call(err);
      });
    }
    exports.pump = exports.deprecate(pump, 'util.pump() is deprecated. Use readableStream.pipe() instead.');
    exports.inherits = function (ctor, superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
    exports._extend = function (origin, add) {
      if (!add || typeof add !== 'object')
        return origin;
      var keys = Object.keys(add);
      var i = keys.length;
      while (i--) {
        origin[keys[i]] = add[keys[i]];
      }
      return origin;
    };
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
  });
  require.define('/ui\\html\\Control.coffee', function (module, exports, __dirname, __filename) {
    var assert, Control, createElement, dispose, exports, initialize, isElement, isNode, UiControl;
    UiControl = require('/ui\\Control.coffee', module);
    cache$ = require('/ui\\html\\index.coffee', module);
    isElement = cache$.isElement;
    isNode = cache$.isNode;
    createElement = cache$.createElement;
    module.exports = exports = Control = UiControl.extend({
      id: 'glass.ui.html.Control',
      properties: {
        initialize: initialize = function () {
          var parentNode;
          this.inner(initialize);
          if (!isNode(this.element))
            throw new Error('element property is required');
          if (null != this.container)
            this.container;
          else
            this.container = this.element;
          parentNode = isElement(this.parent.container) ? this.parent.container : isElement(this.parent) ? this.parent : null != global.window ? global.window.document.body : void 0;
          return parentNode.appendChild(this.element);
        },
        dispose: dispose = function () {
          this.element.parentNode.removeChild(this.element);
          return this.inner(dispose);
        },
        element: { description: 'The actual DOM node or element' },
        container: { description: 'The element to add children to.  Usually same as this.element.' }
      }
    });
    if (typeof describe === 'function') {
      assert = require('assert', module);
      describe('glass.ui.html.Control', function () {
        if (global.window)
          return it('should be able to add to window', function () {
            var control;
            control = new Control({
              parent: global,
              element: createElement('<span>Test</span>')
            });
            assert.equal(window.document.body, control.element.parentNode);
            assert.equal(window.document.body.lastChild, control.element);
            control.dispose();
            return assert(!(null != control.element.parentNode));
          });
      });
    }
  });
  require.define('/ui\\Control.coffee', function (module, exports, __dirname, __filename) {
    var Control, draw, Element, exports;
    Element = require('/ui\\Element.coffee', module);
    module.exports = exports = Control = Element.extend({
      id: 'glass.ui.Control',
      properties: {
        draw: draw = function (c) {
          return this.inner(draw, c);
        },
        position: null,
        size: null
      }
    });
  });
  require.define('/ui\\Element.coffee', function (module, exports, __dirname, __filename) {
    var Component, draw, Element, exports;
    Component = require('/Component.coffee', module);
    module.exports = exports = Element = Component.extend({
      id: 'glass.ui.Element',
      properties: {
        visible: true,
        draw: draw = function (c) {
          if (this.visible)
            return this.inner(draw, c);
        },
        getBoundingRect: function () {
        },
        getBoundingSphere: function () {
        },
        getBoundingBox: function () {
        },
        pick: function (ray, radius) {
        }
      }
    });
  });
  require.define('/Component.coffee', function (module, exports, __dirname, __filename) {
    var assert, Component, dispose, extend, generateId, getBaseDefiningClass, getUnderrideName, glass_Component, initialize, isPrimitive, properties, underride;
    require('/global.coffee', module);
    generateId = function (parent, type) {
      var count, counts, name;
      name = type.name;
      if (!(null != name))
        throw new Error('type did not have a name: ' + type);
      counts = null != parent._Component_generateId_counts ? parent._Component_generateId_counts : parent._Component_generateId_counts = {};
      count = null != counts[name] ? counts[name] : counts[name] = 0;
      count++;
      counts[name] = count;
      return '' + name + '_' + count;
    };
    module.exports = Component = glass_Component = function () {
      function glass_Component(properties) {
        this.initialize(properties);
        this;
      }
      return glass_Component;
    }();
    isPrimitive = function (object) {
      return Object.isNumber(object) || Object.isBoolean(object) || Object.isString(object);
    };
    Component.normalizeProperties = function (properties, definingClass) {
      var name, property;
      if (null == properties)
        properties = {};
      for (name in properties) {
        property = properties[name];
        if (Object.isFunction(property)) {
          property = {
            writable: false,
            value: property
          };
        } else if (!(null != property) || isPrimitive(property) || Object.isArray(property)) {
          property = { value: property };
        }
        if (!(null != property.get) && !(null != property.set) && !property.hasOwnProperty('value'))
          property.value = null;
        if (property.hasOwnProperty('value'))
          if (null != property.writable)
            property.writable;
          else
            property.writable = true;
        if (Object.isFunction(property.value))
          if (null != property.value.id)
            property.value.id;
          else
            property.value.id = name;
        if (null != definingClass) {
          if (null != property.definingClass)
            property.definingClass;
          else
            property.definingClass = definingClass;
          if (Object.isFunction(property.value))
            if (null != property.value.definingClass)
              property.value.definingClass;
            else
              property.value.definingClass = definingClass;
        }
        properties[name] = property;
      }
      return properties;
    };
    Component.defineProperties = function (object, properties, definingClass) {
      properties = Component.normalizeProperties(properties, definingClass);
      Object.defineProperties(object, properties);
      return properties;
    };
    Component.disposeProperties = function (object) {
      var key, value;
      for (key in object) {
        value = object[key];
        if ('undefined' !== typeof value && null != value && value.parent === object && Object.isFunction(value.dispose))
          value.dispose();
      }
    };
    Component.id = 'glass.Component';
    Component.toString = function () {
      return this.id;
    };
    Component.valueOf = function () {
      return null != this.value ? this.value : this.id;
    };
    properties = {
      id: {
        get: function () {
          return this._id;
        },
        set: function (value) {
          if (null != this._id)
            throw new Error('id has already been set to ' + this._id);
          return this._id = value;
        }
      },
      parent: {
        get: function () {
          return this._parent;
        },
        set: function (value) {
          if (null != this._parent)
            throw new Error('parent has already been set to ' + this._parent);
          return this._parent = value;
        }
      },
      inner: {
        description: 'Calls the subclass defined function if present.',
        value: function (fn, args) {
          var innerName;
          args = 2 <= arguments.length ? [].slice.call(arguments, 1) : [];
          innerName = null != fn.innerName ? fn.innerName : fn.innerName = getUnderrideName(fn.definingClass, fn.id);
          if (null != this[innerName])
            return this[innerName].apply(this, args);
        }
      },
      initialize: initialize = function (properties) {
        var id, key, parent, value;
        if (!(null != properties))
          throw new Error('properties object is required ' + properties);
        if (!(null != properties.parent))
          throw new Error('parent is required');
        parent = properties.parent;
        id = null != properties.id ? properties.id : properties.id = generateId(parent, this.constructor);
        parent[id] = this;
        for (key in properties) {
          value = properties[key];
          this[key] = value;
        }
        return this.inner(initialize);
      },
      dispose: dispose = function () {
        if (null != this._parent) {
          Component.disposeProperties(this);
          if (this._parent === global) {
            delete this._parent[this.id];
          } else {
            this._parent[this.id] = null;
          }
          this._parent = null;
          this.inner(dispose);
        }
      },
      disposed: {
        get: function () {
          return this._parent === null;
        }
      },
      get: function (id, parsed) {
        var colon, factory, isClass, throwError, type, value;
        if (!(null != id))
          throw new Error('id is required');
        value = this[id];
        if (null != value)
          if (value.disposed === true) {
            value = null;
          } else {
            return value;
          }
        throwError = !(null != parsed);
        if (!(null != parsed)) {
          colon = id.indexOf(':');
          if (colon > 0) {
            parsed = {
              type: id.substring(0, colon),
              properties: JSON.parse(id.substring(colon + 1))
            };
          } else {
            parsed = false;
          }
        }
        if (parsed) {
          type = parsed.type;
          properties = parsed.properties;
          factory = this[type];
          if (Object.isFunction(factory)) {
            properties.parent = this;
            isClass = null != factory.properties;
            if (isClass) {
              value = new factory(properties);
            } else {
              value = factory(properties);
            }
          }
        }
        if (null != value)
          value;
        else
          value = 'function' === typeof this.parent.get ? this.parent.get(id, parsed) : void 0;
        if (null != value) {
          this[id] = value;
        } else if (throwError) {
          throw new Error('Component not found: ' + id);
        }
        return value;
      }
    };
    Component.properties = Component.defineProperties(Component.prototype, properties, Component);
    getUnderrideName = function (baseDefiningClass, name) {
      return '' + baseDefiningClass.name + '_subclass_' + name;
    };
    getBaseDefiningClass = function (classDefinition, properties, name) {
      var baseDefiningClass, baseFunction, baseProperty, callsUnderride, underrideName, underrideProperty;
      baseProperty = properties[name];
      while (true) {
        baseFunction = baseProperty.value;
        baseDefiningClass = baseProperty.definingClass;
        underrideName = getUnderrideName(baseDefiningClass, name);
        callsUnderride = baseFunction.toString().has(underrideName) || baseFunction.toString().has(/\binner\b/);
        if (!callsUnderride)
          throw new Error('' + classDefinition.name + '.' + name + ' cannot be defined because ' + baseDefiningClass.name + '.' + name + ' does not call ' + underrideName + '.');
        underrideProperty = properties[underrideName];
        if (null != underrideProperty) {
          baseProperty = underrideProperty;
        } else {
          return baseDefiningClass;
        }
      }
    };
    underride = function (classDefinition, properties, rootDefiningClass, name, fn) {
      var baseDefiningClass;
      baseDefiningClass = getBaseDefiningClass(classDefinition, properties, name);
      properties[getUnderrideName(baseDefiningClass, name)] = fn;
    };
    extend = function (baseClass, subClassDefinition) {
      var baseProperty, name, property, prototype, subClass, subProperties;
      if (!Object.isString(null != subClassDefinition ? subClassDefinition.id : void 0))
        throw new Error('missing id property');
      subClassDefinition.name = subClassDefinition.id.replace(/[\.\/]/g, '_');
      subClass = eval('\r\n(function ' + subClassDefinition.name + '(properties) {\r\n    this.initialize(properties);\r\n})');
      subProperties = subClassDefinition.properties = Component.normalizeProperties(subClassDefinition.properties, subClass);
      prototype = subClass.prototype;
      properties = Object.clone(baseClass.properties);
      for (name in subProperties) {
        property = subProperties[name];
        baseProperty = properties[name];
        if (Object.isFunction(null != baseProperty ? baseProperty.value : void 0)) {
          if (!Object.isFunction(property.value))
            throw new Error('Functions can only be overridden with other functions: ' + property.value);
          underride(subClassDefinition, properties, baseProperty.definingClass, name, property.value);
        } else {
          properties[name] = property;
        }
      }
      subClassDefinition.properties = properties;
      Object.merge(subClass, subClassDefinition);
      Component.defineProperties(prototype, properties, subClass);
      subClass.extend = function (subClassDefinition) {
        return extend(subClass, subClassDefinition);
      };
      return subClass;
    };
    Component.extend = function (subClassDefinition) {
      return extend(Component, subClassDefinition);
    };
    if (typeof describe === 'function') {
      assert = require('assert', module);
      describe('glass.Component', function () {
        it('should have an id', function () {
          return assert(Object.isString(Component.id));
        });
        it("its toString should return it's id", function () {
          return assert.equal(Component.toString(), 'glass.Component');
        });
        it('should have a name', function () {
          return assert.equal(Component.name, 'glass_Component');
        });
        describe('#dispose', function () {
          it('should mark self disposed', function () {
            var a;
            a = new Component({ parent: global });
            a.dispose();
            return assert(a.disposed);
          });
          it('should dispose of children', function () {
            var a, b;
            a = new Component({ parent: global });
            b = new Component({ parent: a });
            a.dispose();
            return assert(b.disposed);
          });
          return it('should remove property from parent', function () {
            var a;
            a = new Component({ parent: global });
            a.dispose();
            return assert(!(null != global[a.id]));
          });
        });
        describe('#defineProperties', function () {
          return it('should allow primitive values', function () {
            var object;
            object = {};
            Component.defineProperties(object, {
              f: function () {
                return 'function';
              },
              i: 2,
              b: true,
              a: [],
              s: 'hello'
            });
            assert(Object.isFunction(object.f));
            assert.equal(object.f(), 'function');
            assert.equal(object.i, 2);
            assert.equal(object.b, true);
            assert(Object.equal(object.a, []));
            return assert.equal(object.s, 'hello');
          });
        });
        describe('#Constructor', function () {
          it('should set itself as property on parent', function () {
            var a;
            a = new Component({ parent: global });
            assert(Object.isString(a.id));
            assert.equal(global[a.id], a);
            return a.dispose();
          });
          it('should require parent', function () {
            return assert.throws(function () {
              var a;
              return a = new Component;
            });
          });
          return it('should generate a missing id', function () {
            var a;
            a = new Component({ parent: global });
            assert(Object.isString(a.id));
            return a.dispose();
          });
        });
        describe('#get', function () {
          it('should throw exception if instance not found', function () {
            var a;
            a = new Component({ parent: global });
            assert.throws(function () {
              return a.get('foo');
            });
            return a.dispose();
          });
          return it('should create instances with factory', function () {
            var a, b, c;
            a = new Component({ parent: global });
            b = new Component({ parent: a });
            a[Component] = Component;
            c = b.get('glass.Component:{"x":2,"y":3}');
            assert.equal(c.x, 2);
            assert.equal(c.y, 3);
            assert.equal(c.parent, a);
            return a.dispose();
          });
        });
        return describe('extend', function () {
          it('should inherit base properties', function () {
            var SubComponent;
            SubComponent = Component.extend({ id: 'SubComponent' });
            return assert(null != SubComponent.properties.id);
          });
          it('should allow underriding constructors and functions', function () {
            var sub, SubComponent;
            SubComponent = Component.extend({
              id: 'SubComponent',
              properties: {
                initialize: function () {
                  this.constructorCalled = true;
                  return this;
                },
                dispose: function () {
                  this.disposeCalled = true;
                }
              }
            });
            sub = new SubComponent({ parent: global });
            assert(sub.constructorCalled);
            sub.dispose();
            assert(sub.disposed);
            return assert(sub.disposeCalled);
          });
          it('should allow recursive extension', function () {
            var AComponent, BComponent;
            AComponent = Component.extend({
              id: 'AComponent',
              properties: {
                dispose: function () {
                }
              }
            });
            return BComponent = AComponent.extend({
              id: 'BComponent',
              properties: {
                foo: function () {
                }
              }
            });
          });
          return it('should not allow final functions to be underridden', function () {
            var AComponent;
            AComponent = Component.extend({
              id: 'AComponent',
              properties: {
                dispose: function () {
                }
              }
            });
            return assert.throws(function () {
              var BComponent;
              return BComponent = AComponent.extend({
                id: 'BComponent',
                properties: {
                  dispose: function () {
                  }
                }
              });
            });
          });
        });
      });
    }
  });
  require.define('/global.coffee', function (module, exports, __dirname, __filename) {
    var exports, global;
    require('/..\\node_modules\\sugar\\release\\sugar-full.development.js', module);
    global = function () {
      return this;
    }();
    if (null != global.global)
      global.global;
    else
      global.global = global;
    module.exports = exports = global;
  });
  require.define('/..\\node_modules\\sugar\\release\\sugar-full.development.js', function (module, exports, __dirname, __filename) {
    (function () {
      var object = Object, array = Array, regexp = RegExp, date = Date, string = String, number = Number, math = Math, Undefined;
      var globalContext = typeof global !== 'undefined' ? global : this;
      var typeChecks = {};
      var definePropertySupport = object.defineProperty && object.defineProperties;
      var ClassNames = 'Array,Boolean,Date,Function,Number,String,RegExp'.split(',');
      var isArray = buildClassCheck(ClassNames[0]);
      var isBoolean = buildClassCheck(ClassNames[1]);
      var isDate = buildClassCheck(ClassNames[2]);
      var isFunction = buildClassCheck(ClassNames[3]);
      var isNumber = buildClassCheck(ClassNames[4]);
      var isString = buildClassCheck(ClassNames[5]);
      var isRegExp = buildClassCheck(ClassNames[6]);
      function buildClassCheck(name) {
        var type, fn;
        if (/String|Number|Boolean/.test(name)) {
          type = name.toLowerCase();
        }
        fn = name === 'Array' && array.isArray || function (obj) {
          if (type && typeof obj === type) {
            return true;
          }
          return className(obj) === '[object ' + name + ']';
        };
        typeChecks[name] = fn;
        return fn;
      }
      function className(obj) {
        return object.prototype.toString.call(obj);
      }
      function initializeClasses() {
        initializeClass(object);
        iterateOverObject(ClassNames, function (i, name) {
          initializeClass(globalContext[name]);
        });
      }
      function initializeClass(klass) {
        if (klass['SugarMethods'])
          return;
        defineProperty(klass, 'SugarMethods', {});
        extend(klass, false, false, {
          'extend': function (methods, override, instance) {
            extend(klass, instance !== false, override, methods);
          },
          'sugarRestore': function () {
            return batchMethodExecute(klass, arguments, function (target, name, m) {
              defineProperty(target, name, m.method);
            });
          },
          'sugarRevert': function () {
            return batchMethodExecute(klass, arguments, function (target, name, m) {
              if (m.existed) {
                defineProperty(target, name, m.original);
              } else {
                delete target[name];
              }
            });
          }
        });
      }
      function extend(klass, instance, override, methods) {
        var extendee = instance ? klass.prototype : klass;
        initializeClass(klass);
        iterateOverObject(methods, function (name, method) {
          var original = extendee[name];
          var existed = hasOwnProperty(extendee, name);
          if (typeof override === 'function') {
            method = wrapNative(extendee[name], method, override);
          }
          if (override !== false || !extendee[name]) {
            defineProperty(extendee, name, method);
          }
          klass['SugarMethods'][name] = {
            instance: instance,
            method: method,
            original: original,
            existed: existed
          };
        });
      }
      function extendSimilar(klass, instance, override, set, fn) {
        var methods = {};
        set = isString(set) ? set.split(',') : set;
        set.forEach(function (name, i) {
          fn(methods, name, i);
        });
        extend(klass, instance, override, methods);
      }
      function batchMethodExecute(klass, args, fn) {
        var all = args.length === 0, methods = multiArgs(args), changed = false;
        iterateOverObject(klass['SugarMethods'], function (name, m) {
          if (all || methods.indexOf(name) > -1) {
            changed = true;
            fn(m.instance ? klass.prototype : klass, name, m);
          }
        });
        return changed;
      }
      function wrapNative(nativeFn, extendedFn, condition) {
        return function () {
          var fn;
          if (nativeFn && (condition === true || !condition.apply(this, arguments))) {
            fn = nativeFn;
          } else {
            fn = extendedFn;
          }
          return fn.apply(this, arguments);
        };
      }
      function defineProperty(target, name, method) {
        if (definePropertySupport) {
          object.defineProperty(target, name, {
            'value': method,
            'configurable': true,
            'enumerable': false,
            'writable': true
          });
        } else {
          target[name] = method;
        }
      }
      function multiArgs(args, fn) {
        var result = [], i, len;
        for (i = 0, len = args.length; i < len; i++) {
          result.push(args[i]);
          if (fn)
            fn.call(args, args[i], i);
        }
        return result;
      }
      function flattenedArgs(obj, fn, from) {
        multiArgs(array.prototype.concat.apply([], array.prototype.slice.call(obj, from || 0)), fn);
      }
      function checkCallback(fn) {
        if (!fn || !fn.call) {
          throw new TypeError('Callback is not callable');
        }
      }
      function isDefined(o) {
        return o !== Undefined;
      }
      function isUndefined(o) {
        return o === Undefined;
      }
      function isObjectPrimitive(obj) {
        return obj && typeof obj === 'object';
      }
      function isObject(obj) {
        return !!obj && className(obj) === '[object Object]' && 'hasOwnProperty' in obj;
      }
      function hasOwnProperty(obj, key) {
        return object['hasOwnProperty'].call(obj, key);
      }
      function iterateOverObject(obj, fn) {
        var key;
        for (key in obj) {
          if (!hasOwnProperty(obj, key))
            continue;
          if (fn.call(obj, key, obj[key], obj) === false)
            break;
        }
      }
      function simpleMerge(target, source) {
        iterateOverObject(source, function (key) {
          target[key] = source[key];
        });
        return target;
      }
      function Hash(obj) {
        simpleMerge(this, obj);
      }
      ;
      Hash.prototype.constructor = object;
      function getRange(start, stop, fn, step) {
        var arr = [], i = parseInt(start), down = step < 0;
        while (!down && i <= stop || down && i >= stop) {
          arr.push(i);
          if (fn)
            fn.call(this, i);
          i += step || 1;
        }
        return arr;
      }
      function round(val, precision, method) {
        var fn = math[method || 'round'];
        var multiplier = math.pow(10, math.abs(precision || 0));
        if (precision < 0)
          multiplier = 1 / multiplier;
        return fn(val * multiplier) / multiplier;
      }
      function ceil(val, precision) {
        return round(val, precision, 'ceil');
      }
      function floor(val, precision) {
        return round(val, precision, 'floor');
      }
      function padNumber(num, place, sign, base) {
        var str = math.abs(num).toString(base || 10);
        str = repeatString(place - str.replace(/\.\d+/, '').length, '0') + str;
        if (sign || num < 0) {
          str = (num < 0 ? '-' : '+') + str;
        }
        return str;
      }
      function getOrdinalizedSuffix(num) {
        if (num >= 11 && num <= 13) {
          return 'th';
        } else {
          switch (num % 10) {
          case 1:
            return 'st';
          case 2:
            return 'nd';
          case 3:
            return 'rd';
          default:
            return 'th';
          }
        }
      }
      function getTrimmableCharacters() {
        return '\t\n\x0B\f\r \xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u2028\u2029\u3000\ufeff';
      }
      function repeatString(times, str) {
        return array(math.max(0, isDefined(times) ? times : 1) + 1).join(str || '');
      }
      function getRegExpFlags(reg, add) {
        var flags = reg.toString().match(/[^/]*$/)[0];
        if (add) {
          flags = (flags + add).split('').sort().join('').replace(/([gimy])\1+/g, '$1');
        }
        return flags;
      }
      function escapeRegExp(str) {
        if (!isString(str))
          str = string(str);
        return str.replace(/([\\/'*+?|()\[\]{}.^$])/g, '\\$1');
      }
      function stringify(thing, stack) {
        var type = typeof thing, thingIsObject, thingIsArray, klass, value, arr, key, i, len;
        if (type === 'string')
          return thing;
        klass = object.prototype.toString.call(thing);
        thingIsObject = isObject(thing);
        thingIsArray = klass === '[object Array]';
        if (thing != null && thingIsObject || thingIsArray) {
          if (!stack)
            stack = [];
          if (stack.length > 1) {
            i = stack.length;
            while (i--) {
              if (stack[i] === thing) {
                return 'CYC';
              }
            }
          }
          stack.push(thing);
          value = string(thing.constructor);
          arr = thingIsArray ? thing : object.keys(thing).sort();
          for (i = 0, len = arr.length; i < len; i++) {
            key = thingIsArray ? i : arr[i];
            value += key + stringify(thing[key], stack);
          }
          stack.pop();
        } else if (1 / thing === -Infinity) {
          value = '-0';
        } else {
          value = string(thing && thing.valueOf ? thing.valueOf() : thing);
        }
        return type + klass + value;
      }
      function isEqual(a, b) {
        if (objectIsMatchedByValue(a) && objectIsMatchedByValue(b)) {
          return stringify(a) === stringify(b);
        } else {
          return a === b;
        }
      }
      function objectIsMatchedByValue(obj) {
        var klass = className(obj);
        return /^\[object Date|Array|String|Number|RegExp|Boolean|Arguments\]$/.test(klass) || isObject(obj);
      }
      function entryAtIndex(arr, args, str) {
        var result = [], length = arr.length, loop = args[args.length - 1] !== false, r;
        multiArgs(args, function (index) {
          if (isBoolean(index))
            return false;
          if (loop) {
            index = index % length;
            if (index < 0)
              index = length + index;
          }
          r = str ? arr.charAt(index) || '' : arr[index];
          result.push(r);
        });
        return result.length < 2 ? result[0] : result;
      }
      function buildObjectInstanceMethods(set, target) {
        extendSimilar(target, true, false, set, function (methods, name) {
          methods[name + (name === 'equal' ? 's' : '')] = function () {
            return object[name].apply(null, [this].concat(multiArgs(arguments)));
          };
        });
      }
      initializeClasses();
      extend(object, false, false, {
        'keys': function (obj) {
          var keys = [];
          if (!isObjectPrimitive(obj) && !isRegExp(obj) && !isFunction(obj)) {
            throw new TypeError('Object required');
          }
          iterateOverObject(obj, function (key, value) {
            keys.push(key);
          });
          return keys;
        }
      });
      function arrayIndexOf(arr, search, fromIndex, increment) {
        var length = arr.length, fromRight = increment == -1, start = fromRight ? length - 1 : 0, index = toIntegerWithDefault(fromIndex, start);
        if (index < 0) {
          index = length + index;
        }
        if (!fromRight && index < 0 || fromRight && index >= length) {
          index = start;
        }
        while (fromRight && index >= 0 || !fromRight && index < length) {
          if (arr[index] === search) {
            return index;
          }
          index += increment;
        }
        return -1;
      }
      function arrayReduce(arr, fn, initialValue, fromRight) {
        var length = arr.length, count = 0, defined = isDefined(initialValue), result, index;
        checkCallback(fn);
        if (length == 0 && !defined) {
          throw new TypeError('Reduce called on empty array with no initial value');
        } else if (defined) {
          result = initialValue;
        } else {
          result = arr[fromRight ? length - 1 : count];
          count++;
        }
        while (count < length) {
          index = fromRight ? length - count - 1 : count;
          if (index in arr) {
            result = fn(result, arr[index], index, arr);
          }
          count++;
        }
        return result;
      }
      function toIntegerWithDefault(i, d) {
        if (isNaN(i)) {
          return d;
        } else {
          return parseInt(i >> 0);
        }
      }
      function checkFirstArgumentExists(args) {
        if (args.length === 0) {
          throw new TypeError('First argument must be defined');
        }
      }
      extend(array, false, false, {
        'isArray': function (obj) {
          return isArray(obj);
        }
      });
      extend(array, true, false, {
        'every': function (fn, scope) {
          var length = this.length, index = 0;
          checkFirstArgumentExists(arguments);
          while (index < length) {
            if (index in this && !fn.call(scope, this[index], index, this)) {
              return false;
            }
            index++;
          }
          return true;
        },
        'some': function (fn, scope) {
          var length = this.length, index = 0;
          checkFirstArgumentExists(arguments);
          while (index < length) {
            if (index in this && fn.call(scope, this[index], index, this)) {
              return true;
            }
            index++;
          }
          return false;
        },
        'map': function (fn, scope) {
          var length = this.length, index = 0, result = new Array(length);
          checkFirstArgumentExists(arguments);
          while (index < length) {
            if (index in this) {
              result[index] = fn.call(scope, this[index], index, this);
            }
            index++;
          }
          return result;
        },
        'filter': function (fn, scope) {
          var length = this.length, index = 0, result = [];
          checkFirstArgumentExists(arguments);
          while (index < length) {
            if (index in this && fn.call(scope, this[index], index, this)) {
              result.push(this[index]);
            }
            index++;
          }
          return result;
        },
        'indexOf': function (search, fromIndex) {
          if (isString(this))
            return this.indexOf(search, fromIndex);
          return arrayIndexOf(this, search, fromIndex, 1);
        },
        'lastIndexOf': function (search, fromIndex) {
          if (isString(this))
            return this.lastIndexOf(search, fromIndex);
          return arrayIndexOf(this, search, fromIndex, -1);
        },
        'forEach': function (fn, scope) {
          var length = this.length, index = 0;
          checkCallback(fn);
          while (index < length) {
            if (index in this) {
              fn.call(scope, this[index], index, this);
            }
            index++;
          }
        },
        'reduce': function (fn, init) {
          return arrayReduce(this, fn, init);
        },
        'reduceRight': function (fn, init) {
          return arrayReduce(this, fn, init, true);
        }
      });
      function buildTrim() {
        var support = getTrimmableCharacters().match(/^\s+$/);
        try {
          string.prototype.trim.call([1]);
        } catch (e) {
          support = false;
        }
        extend(string, true, !support, {
          'trim': function () {
            return this.toString().trimLeft().trimRight();
          },
          'trimLeft': function () {
            return this.replace(regexp('^[' + getTrimmableCharacters() + ']+'), '');
          },
          'trimRight': function () {
            return this.replace(regexp('[' + getTrimmableCharacters() + ']+$'), '');
          }
        });
      }
      extend(Function, true, false, {
        'bind': function (scope) {
          var fn = this, args = multiArgs(arguments).slice(1), nop, bound;
          if (!isFunction(this)) {
            throw new TypeError('Function.prototype.bind called on a non-function');
          }
          bound = function () {
            return fn.apply(fn.prototype && this instanceof fn ? this : scope, args.concat(multiArgs(arguments)));
          };
          bound.prototype = this.prototype;
          return bound;
        }
      });
      extend(date, false, false, {
        'now': function () {
          return new date().getTime();
        }
      });
      function buildISOString() {
        var d = new date(date.UTC(1999, 11, 31)), target = '1999-12-31T00:00:00.000Z';
        var support = d.toISOString && d.toISOString() === target;
        extendSimilar(date, true, !support, 'toISOString,toJSON', function (methods, name) {
          methods[name] = function () {
            return padNumber(this.getUTCFullYear(), 4) + '-' + padNumber(this.getUTCMonth() + 1, 2) + '-' + padNumber(this.getUTCDate(), 2) + 'T' + padNumber(this.getUTCHours(), 2) + ':' + padNumber(this.getUTCMinutes(), 2) + ':' + padNumber(this.getUTCSeconds(), 2) + '.' + padNumber(this.getUTCMilliseconds(), 3) + 'Z';
          };
        });
      }
      buildTrim();
      buildISOString();
      function multiMatch(el, match, scope, params) {
        var result = true;
        if (el === match) {
          return true;
        } else if (isRegExp(match) && isString(el)) {
          return regexp(match).test(el);
        } else if (isFunction(match)) {
          return match.apply(scope, params);
        } else if (isObject(match) && isObjectPrimitive(el)) {
          iterateOverObject(match, function (key, value) {
            if (!multiMatch(el[key], match[key], scope, [
                el[key],
                el
              ])) {
              result = false;
            }
          });
          return result;
        } else {
          return isEqual(el, match);
        }
      }
      function transformArgument(el, map, context, mapArgs) {
        if (isUndefined(map)) {
          return el;
        } else if (isFunction(map)) {
          return map.apply(context, mapArgs || []);
        } else if (isFunction(el[map])) {
          return el[map].call(el);
        } else {
          return el[map];
        }
      }
      function arrayEach(arr, fn, startIndex, loop) {
        var length, index, i;
        if (startIndex < 0)
          startIndex = arr.length + startIndex;
        i = isNaN(startIndex) ? 0 : startIndex;
        length = loop === true ? arr.length + i : arr.length;
        while (i < length) {
          index = i % arr.length;
          if (!(index in arr)) {
            return iterateOverSparseArray(arr, fn, i, loop);
          } else if (fn.call(arr, arr[index], index, arr) === false) {
            break;
          }
          i++;
        }
      }
      function iterateOverSparseArray(arr, fn, fromIndex, loop) {
        var indexes = [], i;
        for (i in arr) {
          if (isArrayIndex(arr, i) && i >= fromIndex) {
            indexes.push(parseInt(i));
          }
        }
        indexes.sort().each(function (index) {
          return fn.call(arr, arr[index], index, arr);
        });
        return arr;
      }
      function isArrayIndex(arr, i) {
        return i in arr && toUInt32(i) == i && i != 4294967295;
      }
      function toUInt32(i) {
        return i >>> 0;
      }
      function arrayFind(arr, f, startIndex, loop, returnIndex) {
        var result, index;
        arrayEach(arr, function (el, i, arr) {
          if (multiMatch(el, f, arr, [
              el,
              i,
              arr
            ])) {
            result = el;
            index = i;
            return false;
          }
        }, startIndex, loop);
        return returnIndex ? index : result;
      }
      function arrayUnique(arr, map) {
        var result = [], o = {}, transformed;
        arrayEach(arr, function (el, i) {
          transformed = map ? transformArgument(el, map, arr, [
            el,
            i,
            arr
          ]) : el;
          if (!checkForElementInHashAndSet(o, transformed)) {
            result.push(el);
          }
        });
        return result;
      }
      function arrayIntersect(arr1, arr2, subtract) {
        var result = [], o = {};
        arr2.each(function (el) {
          checkForElementInHashAndSet(o, el);
        });
        arr1.each(function (el) {
          var stringified = stringify(el), isReference = !objectIsMatchedByValue(el);
          if (elementExistsInHash(o, stringified, el, isReference) != subtract) {
            discardElementFromHash(o, stringified, el, isReference);
            result.push(el);
          }
        });
        return result;
      }
      function arrayFlatten(arr, level, current) {
        level = level || Infinity;
        current = current || 0;
        var result = [];
        arrayEach(arr, function (el) {
          if (isArray(el) && current < level) {
            result = result.concat(arrayFlatten(el, level, current + 1));
          } else {
            result.push(el);
          }
        });
        return result;
      }
      function flatArguments(args) {
        var result = [];
        multiArgs(args, function (arg) {
          result = result.concat(arg);
        });
        return result;
      }
      function elementExistsInHash(hash, key, element, isReference) {
        var exists = key in hash;
        if (isReference) {
          if (!hash[key]) {
            hash[key] = [];
          }
          exists = hash[key].indexOf(element) !== -1;
        }
        return exists;
      }
      function checkForElementInHashAndSet(hash, element) {
        var stringified = stringify(element), isReference = !objectIsMatchedByValue(element), exists = elementExistsInHash(hash, stringified, element, isReference);
        if (isReference) {
          hash[stringified].push(element);
        } else {
          hash[stringified] = element;
        }
        return exists;
      }
      function discardElementFromHash(hash, key, element, isReference) {
        var arr, i = 0;
        if (isReference) {
          arr = hash[key];
          while (i < arr.length) {
            if (arr[i] === element) {
              arr.splice(i, 1);
            } else {
              i += 1;
            }
          }
        } else {
          delete hash[key];
        }
      }
      function getMinOrMax(obj, map, which, all) {
        var edge, result = [], max = which === 'max', min = which === 'min', isArray = Array.isArray(obj);
        iterateOverObject(obj, function (key) {
          var el = obj[key], test = transformArgument(el, map, obj, isArray ? [
              el,
              parseInt(key),
              obj
            ] : []);
          if (isUndefined(test)) {
            throw new TypeError('Cannot compare with undefined');
          }
          if (test === edge) {
            result.push(el);
          } else if (isUndefined(edge) || max && test > edge || min && test < edge) {
            result = [el];
            edge = test;
          }
        });
        if (!isArray)
          result = arrayFlatten(result, 1);
        return all ? result : result[0];
      }
      function collateStrings(a, b) {
        var aValue, bValue, aChar, bChar, aEquiv, bEquiv, index = 0, tiebreaker = 0;
        a = getCollationReadyString(a);
        b = getCollationReadyString(b);
        do {
          aChar = getCollationCharacter(a, index);
          bChar = getCollationCharacter(b, index);
          aValue = getCollationValue(aChar);
          bValue = getCollationValue(bChar);
          if (aValue === -1 || bValue === -1) {
            aValue = a.charCodeAt(index) || null;
            bValue = b.charCodeAt(index) || null;
          }
          aEquiv = aChar !== a.charAt(index);
          bEquiv = bChar !== b.charAt(index);
          if (aEquiv !== bEquiv && tiebreaker === 0) {
            tiebreaker = aEquiv - bEquiv;
          }
          index += 1;
        } while (aValue != null && bValue != null && aValue === bValue);
        if (aValue === bValue)
          return tiebreaker;
        return aValue < bValue ? -1 : 1;
      }
      function getCollationReadyString(str) {
        if (array[AlphanumericSortIgnoreCase]) {
          str = str.toLowerCase();
        }
        return str.replace(array[AlphanumericSortIgnore], '');
      }
      function getCollationCharacter(str, index) {
        var chr = str.charAt(index), eq = array[AlphanumericSortEquivalents] || {};
        return eq[chr] || chr;
      }
      function getCollationValue(chr) {
        var order = array[AlphanumericSortOrder];
        if (!chr) {
          return null;
        } else {
          return order.indexOf(chr);
        }
      }
      var AlphanumericSortOrder = 'AlphanumericSortOrder';
      var AlphanumericSortIgnore = 'AlphanumericSortIgnore';
      var AlphanumericSortIgnoreCase = 'AlphanumericSortIgnoreCase';
      var AlphanumericSortEquivalents = 'AlphanumericSortEquivalents';
      function buildEnhancements() {
        var callbackCheck = function () {
          var a = arguments;
          return a.length > 0 && !isFunction(a[0]);
        };
        extendSimilar(array, true, callbackCheck, 'map,every,all,some,any,none,filter', function (methods, name) {
          methods[name] = function (f) {
            return this[name](function (el, index) {
              if (name === 'map') {
                return transformArgument(el, f, this, [
                  el,
                  index,
                  this
                ]);
              } else {
                return multiMatch(el, f, this, [
                  el,
                  index,
                  this
                ]);
              }
            });
          };
        });
      }
      function buildAlphanumericSort() {
        var order = 'A\xc1\xc0\xc2\xc3\u0104BC\u0106\u010c\xc7D\u010e\xd0E\xc9\xc8\u011a\xca\xcb\u0118FG\u011eH\u0131I\xcd\xcc\u0130\xce\xcfJKL\u0141MN\u0143\u0147\xd1O\xd3\xd2\xd4PQR\u0158S\u015a\u0160\u015eT\u0164U\xda\xd9\u016e\xdb\xdcVWXY\xddZ\u0179\u017b\u017d\xde\xc6\u0152\xd8\xd5\xc5\xc4\xd6';
        var equiv = 'A\xc1\xc0\xc2\xc3\xc4,C\xc7,E\xc9\xc8\xca\xcb,I\xcd\xcc\u0130\xce\xcf,O\xd3\xd2\xd4\xd5\xd6,S\xdf,U\xda\xd9\xdb\xdc';
        array[AlphanumericSortOrder] = order.split('').map(function (str) {
          return str + str.toLowerCase();
        }).join('');
        var equivalents = {};
        arrayEach(equiv.split(','), function (set) {
          var equivalent = set.charAt(0);
          arrayEach(set.slice(1).split(''), function (chr) {
            equivalents[chr] = equivalent;
            equivalents[chr.toLowerCase()] = equivalent.toLowerCase();
          });
        });
        array[AlphanumericSortIgnoreCase] = true;
        array[AlphanumericSortEquivalents] = equivalents;
      }
      extend(array, false, false, {
        'create': function () {
          var result = [], tmp;
          multiArgs(arguments, function (a) {
            if (isObjectPrimitive(a)) {
              try {
                tmp = array.prototype.slice.call(a, 0);
                if (tmp.length > 0) {
                  a = tmp;
                }
              } catch (e) {
              }
              ;
            }
            result = result.concat(a);
          });
          return result;
        }
      });
      extend(array, true, false, {
        'find': function (f, index, loop) {
          return arrayFind(this, f, index, loop);
        },
        'findAll': function (f, index, loop) {
          var result = [];
          arrayEach(this, function (el, i, arr) {
            if (multiMatch(el, f, arr, [
                el,
                i,
                arr
              ])) {
              result.push(el);
            }
          }, index, loop);
          return result;
        },
        'findIndex': function (f, startIndex, loop) {
          var index = arrayFind(this, f, startIndex, loop, true);
          return isUndefined(index) ? -1 : index;
        },
        'count': function (f) {
          if (isUndefined(f))
            return this.length;
          return this.findAll(f).length;
        },
        'removeAt': function (start, end) {
          var i, len;
          if (isUndefined(start))
            return this;
          if (isUndefined(end))
            end = start;
          for (i = 0, len = end - start; i <= len; i++) {
            this.splice(start, 1);
          }
          return this;
        },
        'include': function (el, index) {
          return this.clone().add(el, index);
        },
        'exclude': function () {
          return array.prototype.remove.apply(this.clone(), arguments);
        },
        'clone': function () {
          return simpleMerge([], this);
        },
        'unique': function (map) {
          return arrayUnique(this, map);
        },
        'flatten': function (limit) {
          return arrayFlatten(this, limit);
        },
        'union': function () {
          return arrayUnique(this.concat(flatArguments(arguments)));
        },
        'intersect': function () {
          return arrayIntersect(this, flatArguments(arguments), false);
        },
        'subtract': function (a) {
          return arrayIntersect(this, flatArguments(arguments), true);
        },
        'at': function () {
          return entryAtIndex(this, arguments);
        },
        'first': function (num) {
          if (isUndefined(num))
            return this[0];
          if (num < 0)
            num = 0;
          return this.slice(0, num);
        },
        'last': function (num) {
          if (isUndefined(num))
            return this[this.length - 1];
          var start = this.length - num < 0 ? 0 : this.length - num;
          return this.slice(start);
        },
        'from': function (num) {
          return this.slice(num);
        },
        'to': function (num) {
          if (isUndefined(num))
            num = this.length;
          return this.slice(0, num);
        },
        'min': function (map, all) {
          return getMinOrMax(this, map, 'min', all);
        },
        'max': function (map, all) {
          return getMinOrMax(this, map, 'max', all);
        },
        'least': function (map, all) {
          return getMinOrMax(this.groupBy.apply(this, [map]), 'length', 'min', all);
        },
        'most': function (map, all) {
          return getMinOrMax(this.groupBy.apply(this, [map]), 'length', 'max', all);
        },
        'sum': function (map) {
          var arr = map ? this.map(map) : this;
          return arr.length > 0 ? arr.reduce(function (a, b) {
            return a + b;
          }) : 0;
        },
        'average': function (map) {
          var arr = map ? this.map(map) : this;
          return arr.length > 0 ? arr.sum() / arr.length : 0;
        },
        'inGroups': function (num, padding) {
          var pad = arguments.length > 1;
          var arr = this;
          var result = [];
          var divisor = ceil(this.length / num);
          getRange(0, num - 1, function (i) {
            var index = i * divisor;
            var group = arr.slice(index, index + divisor);
            if (pad && group.length < divisor) {
              getRange(1, divisor - group.length, function () {
                group = group.add(padding);
              });
            }
            result.push(group);
          });
          return result;
        },
        'inGroupsOf': function (num, padding) {
          var result = [], len = this.length, arr = this, group;
          if (len === 0 || num === 0)
            return arr;
          if (isUndefined(num))
            num = 1;
          if (isUndefined(padding))
            padding = null;
          getRange(0, ceil(len / num) - 1, function (i) {
            group = arr.slice(num * i, num * i + num);
            while (group.length < num) {
              group.push(padding);
            }
            result.push(group);
          });
          return result;
        },
        'isEmpty': function () {
          return this.compact().length == 0;
        },
        'sortBy': function (map, desc) {
          var arr = this.clone();
          arr.sort(function (a, b) {
            var aProperty, bProperty, comp;
            aProperty = transformArgument(a, map, arr, [a]);
            bProperty = transformArgument(b, map, arr, [b]);
            if (isString(aProperty) && isString(bProperty)) {
              comp = collateStrings(aProperty, bProperty);
            } else if (aProperty < bProperty) {
              comp = -1;
            } else if (aProperty > bProperty) {
              comp = 1;
            } else {
              comp = 0;
            }
            return comp * (desc ? -1 : 1);
          });
          return arr;
        },
        'randomize': function () {
          var arr = this.concat(), i = arr.length, j, x;
          while (i) {
            j = math.random() * i | 0;
            x = arr[--i];
            arr[i] = arr[j];
            arr[j] = x;
          }
          return arr;
        },
        'zip': function () {
          var args = multiArgs(arguments);
          return this.map(function (el, i) {
            return [el].concat(args.map(function (k) {
              return i in k ? k[i] : null;
            }));
          });
        },
        'sample': function (num) {
          var arr = this.randomize();
          return arguments.length > 0 ? arr.slice(0, num) : arr[0];
        },
        'each': function (fn, index, loop) {
          arrayEach(this, fn, index, loop);
          return this;
        },
        'add': function (el, index) {
          if (!isNumber(number(index)) || isNaN(index))
            index = this.length;
          array.prototype.splice.apply(this, [
            index,
            0
          ].concat(el));
          return this;
        },
        'remove': function () {
          var i, arr = this;
          multiArgs(arguments, function (f) {
            i = 0;
            while (i < arr.length) {
              if (multiMatch(arr[i], f, arr, [
                  arr[i],
                  i,
                  arr
                ])) {
                arr.splice(i, 1);
              } else {
                i++;
              }
            }
          });
          return arr;
        },
        'compact': function (all) {
          var result = [];
          arrayEach(this, function (el, i) {
            if (isArray(el)) {
              result.push(el.compact());
            } else if (all && el) {
              result.push(el);
            } else if (!all && el != null && el.valueOf() === el.valueOf()) {
              result.push(el);
            }
          });
          return result;
        },
        'groupBy': function (map, fn) {
          var arr = this, result = {}, key;
          arrayEach(arr, function (el, index) {
            key = transformArgument(el, map, arr, [
              el,
              index,
              arr
            ]);
            if (!result[key])
              result[key] = [];
            result[key].push(el);
          });
          if (fn) {
            iterateOverObject(result, fn);
          }
          return result;
        },
        'none': function () {
          return !this.any.apply(this, arguments);
        }
      });
      extend(array, true, false, {
        'all': array.prototype.every,
        'any': array.prototype.some,
        'insert': array.prototype.add
      });
      function keysWithCoercion(obj) {
        if (obj && obj.valueOf) {
          obj = obj.valueOf();
        }
        return object.keys(obj);
      }
      function buildEnumerableMethods(names, mapping) {
        extendSimilar(object, false, false, names, function (methods, name) {
          methods[name] = function (obj, arg1, arg2) {
            var result, coerced = keysWithCoercion(obj);
            result = array.prototype[name].call(coerced, function (key) {
              if (mapping) {
                return transformArgument(obj[key], arg1, obj, [
                  key,
                  obj[key],
                  obj
                ]);
              } else {
                return multiMatch(obj[key], arg1, obj, [
                  key,
                  obj[key],
                  obj
                ]);
              }
            }, arg2);
            if (isArray(result)) {
              result = result.reduce(function (o, key, i) {
                o[key] = obj[key];
                return o;
              }, {});
            }
            return result;
          };
        });
        buildObjectInstanceMethods(names, Hash);
      }
      extend(object, false, false, {
        'map': function (obj, map) {
          return keysWithCoercion(obj).reduce(function (result, key) {
            result[key] = transformArgument(obj[key], map, obj, [
              key,
              obj[key],
              obj
            ]);
            return result;
          }, {});
        },
        'reduce': function (obj) {
          var values = keysWithCoercion(obj).map(function (key) {
              return obj[key];
            });
          return values.reduce.apply(values, multiArgs(arguments).slice(1));
        },
        'each': function (obj, fn) {
          checkCallback(fn);
          iterateOverObject(obj, fn);
          return obj;
        },
        'size': function (obj) {
          return keysWithCoercion(obj).length;
        }
      });
      var EnumerableFindingMethods = 'any,all,none,count,find,findAll,isEmpty'.split(',');
      var EnumerableMappingMethods = 'sum,average,min,max,least,most'.split(',');
      var EnumerableOtherMethods = 'map,reduce,size'.split(',');
      var EnumerableMethods = EnumerableFindingMethods.concat(EnumerableMappingMethods).concat(EnumerableOtherMethods);
      buildEnhancements();
      buildAlphanumericSort();
      buildEnumerableMethods(EnumerableFindingMethods);
      buildEnumerableMethods(EnumerableMappingMethods, true);
      buildObjectInstanceMethods(EnumerableOtherMethods, Hash);
      var English;
      var CurrentLocalization;
      var TimeFormat = [
          'ampm',
          'hour',
          'minute',
          'second',
          'ampm',
          'utc',
          'offset_sign',
          'offset_hours',
          'offset_minutes',
          'ampm'
        ];
      var DecimalReg = '(?:[,.]\\d+)?';
      var HoursReg = '\\d{1,2}' + DecimalReg;
      var SixtyReg = '[0-5]\\d' + DecimalReg;
      var RequiredTime = '({t})?\\s*(' + HoursReg + ')(?:{h}(' + SixtyReg + ')?{m}(?::?(' + SixtyReg + '){s})?\\s*(?:({t})|(Z)|(?:([+-])(\\d{2,2})(?::?(\\d{2,2}))?)?)?|\\s*({t}))';
      var KanjiDigits = '\u3007\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d\u5341\u767e\u5343\u4e07';
      var FullWidthDigits = '\uff10\uff11\uff12\uff13\uff14\uff15\uff16\uff17\uff18\uff19';
      var AsianDigitMap = {};
      var AsianDigitReg;
      var DateArgumentUnits;
      var DateUnitsReversed;
      var CoreDateFormats = [];
      var DateOutputFormats = [
          {
            token: 'f{1,4}|ms|milliseconds',
            format: function (d) {
              return callDateGet(d, 'Milliseconds');
            }
          },
          {
            token: 'ss?|seconds',
            format: function (d, len) {
              return callDateGet(d, 'Seconds');
            }
          },
          {
            token: 'mm?|minutes',
            format: function (d, len) {
              return callDateGet(d, 'Minutes');
            }
          },
          {
            token: 'hh?|hours|12hr',
            format: function (d) {
              return getShortHour(d);
            }
          },
          {
            token: 'HH?|24hr',
            format: function (d) {
              return callDateGet(d, 'Hours');
            }
          },
          {
            token: 'dd?|date|day',
            format: function (d) {
              return callDateGet(d, 'Date');
            }
          },
          {
            token: 'dow|weekday',
            word: true,
            format: function (d, loc, n, t) {
              var dow = callDateGet(d, 'Day');
              return loc['weekdays'][dow + (n - 1) * 7];
            }
          },
          {
            token: 'MM?',
            format: function (d) {
              return callDateGet(d, 'Month') + 1;
            }
          },
          {
            token: 'mon|month',
            word: true,
            format: function (d, loc, n, len) {
              var month = callDateGet(d, 'Month');
              return loc['months'][month + (n - 1) * 12];
            }
          },
          {
            token: 'y{2,4}|year',
            format: function (d) {
              return callDateGet(d, 'FullYear');
            }
          },
          {
            token: '[Tt]{1,2}',
            format: function (d, loc, n, format) {
              if (loc['ampm'].length == 0)
                return '';
              var hours = callDateGet(d, 'Hours');
              var str = loc['ampm'][floor(hours / 12)];
              if (format.length === 1)
                str = str.slice(0, 1);
              if (format.slice(0, 1) === 'T')
                str = str.toUpperCase();
              return str;
            }
          },
          {
            token: 'z{1,4}|tz|timezone',
            text: true,
            format: function (d, loc, n, format) {
              var tz = d.getUTCOffset();
              if (format == 'z' || format == 'zz') {
                tz = tz.replace(/(\d{2})(\d{2})/, function (f, h, m) {
                  return padNumber(h, format.length);
                });
              }
              return tz;
            }
          },
          {
            token: 'iso(tz|timezone)',
            format: function (d) {
              return d.getUTCOffset(true);
            }
          },
          {
            token: 'ord',
            format: function (d) {
              var date = callDateGet(d, 'Date');
              return date + getOrdinalizedSuffix(date);
            }
          }
        ];
      var DateUnits = [
          {
            unit: 'year',
            method: 'FullYear',
            ambiguous: true,
            multiplier: function (d) {
              var adjust = d ? d.isLeapYear() ? 1 : 0 : .25;
              return (365 + adjust) * 24 * 60 * 60 * 1e3;
            }
          },
          {
            unit: 'month',
            method: 'Month',
            ambiguous: true,
            multiplier: function (d, ms) {
              var days = 30.4375, inMonth;
              if (d) {
                inMonth = d.daysInMonth();
                if (ms <= inMonth.days()) {
                  days = inMonth;
                }
              }
              return days * 24 * 60 * 60 * 1e3;
            },
            error: .919
          },
          {
            unit: 'week',
            method: 'ISOWeek',
            multiplier: function () {
              return 7 * 24 * 60 * 60 * 1e3;
            }
          },
          {
            unit: 'day',
            method: 'Date',
            ambiguous: true,
            multiplier: function () {
              return 24 * 60 * 60 * 1e3;
            }
          },
          {
            unit: 'hour',
            method: 'Hours',
            multiplier: function () {
              return 60 * 60 * 1e3;
            }
          },
          {
            unit: 'minute',
            method: 'Minutes',
            multiplier: function () {
              return 60 * 1e3;
            }
          },
          {
            unit: 'second',
            method: 'Seconds',
            multiplier: function () {
              return 1e3;
            }
          },
          {
            unit: 'millisecond',
            method: 'Milliseconds',
            multiplier: function () {
              return 1;
            }
          }
        ];
      var Localizations = {};
      function Localization(l) {
        simpleMerge(this, l);
        this.compiledFormats = CoreDateFormats.concat();
      }
      Localization.prototype = {
        getMonth: function (n) {
          if (isNumber(n)) {
            return n - 1;
          } else {
            return this['months'].indexOf(n) % 12;
          }
        },
        getWeekday: function (n) {
          return this['weekdays'].indexOf(n) % 7;
        },
        getNumber: function (n) {
          var i;
          if (isNumber(n)) {
            return n;
          } else if (n && (i = this['numbers'].indexOf(n)) !== -1) {
            return (i + 1) % 10;
          } else {
            return 1;
          }
        },
        getNumericDate: function (n) {
          var self = this;
          return n.replace(regexp(this['num'], 'g'), function (d) {
            var num = self.getNumber(d);
            return num || '';
          });
        },
        getEnglishUnit: function (n) {
          return English['units'][this['units'].indexOf(n) % 8];
        },
        getRelativeFormat: function (adu) {
          return this.convertAdjustedToFormat(adu, adu[2] > 0 ? 'future' : 'past');
        },
        getDuration: function (ms) {
          return this.convertAdjustedToFormat(getAdjustedUnit(ms), 'duration');
        },
        hasVariant: function (code) {
          code = code || this.code;
          return code === 'en' || code === 'en-US' ? true : this['variant'];
        },
        matchAM: function (str) {
          return str === this['ampm'][0];
        },
        matchPM: function (str) {
          return str && str === this['ampm'][1];
        },
        convertAdjustedToFormat: function (adu, mode) {
          var sign, unit, mult, num = adu[0], u = adu[1], ms = adu[2], format = this[mode] || this['relative'];
          if (isFunction(format)) {
            return format.call(this, num, u, ms, mode);
          }
          mult = this['plural'] && num > 1 ? 1 : 0;
          unit = this['units'][mult * 8 + u] || this['units'][u];
          if (this['capitalizeUnit'])
            unit = simpleCapitalize(unit);
          sign = this['modifiers'].filter(function (m) {
            return m.name == 'sign' && m.value == (ms > 0 ? 1 : -1);
          })[0];
          return format.replace(/\{(.*?)\}/g, function (full, match) {
            switch (match) {
            case 'num':
              return num;
            case 'unit':
              return unit;
            case 'sign':
              return sign.src;
            }
          });
        },
        getFormats: function () {
          return this.cachedFormat ? [this.cachedFormat].concat(this.compiledFormats) : this.compiledFormats;
        },
        addFormat: function (src, allowsTime, match, variant, iso) {
          var to = match || [], loc = this, time, timeMarkers, lastIsNumeral;
          src = src.replace(/\s+/g, '[-,. ]*');
          src = src.replace(/\{([^,]+?)\}/g, function (all, k) {
            var value, arr, result, opt = k.match(/\?$/), nc = k.match(/^(\d+)\??$/), slice = k.match(/(\d)(?:-(\d))?/), key = k.replace(/[^a-z]+$/, '');
            if (nc) {
              value = loc['tokens'][nc[1]];
            } else if (loc[key]) {
              value = loc[key];
            } else if (loc[key + 's']) {
              value = loc[key + 's'];
              if (slice) {
                arr = [];
                value.forEach(function (m, i) {
                  var mod = i % (loc['units'] ? 8 : value.length);
                  if (mod >= slice[1] && mod <= (slice[2] || slice[1])) {
                    arr.push(m);
                  }
                });
                value = arr;
              }
              value = arrayToAlternates(value);
            }
            if (nc) {
              result = '(?:' + value + ')';
            } else {
              if (!match) {
                to.push(key);
              }
              result = '(' + value + ')';
            }
            if (opt) {
              result += '?';
            }
            return result;
          });
          if (allowsTime) {
            time = prepareTime(RequiredTime, loc, iso);
            timeMarkers = [
              't',
              '[\\s\\u3000]'
            ].concat(loc['timeMarker']);
            lastIsNumeral = src.match(/\\d\{\d,\d\}\)+\??$/);
            addDateInputFormat(loc, '(?:' + time + ')[,\\s\\u3000]+?' + src, TimeFormat.concat(to), variant);
            addDateInputFormat(loc, src + '(?:[,\\s]*(?:' + timeMarkers.join('|') + (lastIsNumeral ? '+' : '*') + ')' + time + ')?', to.concat(TimeFormat), variant);
          } else {
            addDateInputFormat(loc, src, to, variant);
          }
        }
      };
      function getLocalization(localeCode, fallback) {
        var loc;
        if (!isString(localeCode))
          localeCode = '';
        loc = Localizations[localeCode] || Localizations[localeCode.slice(0, 2)];
        if (fallback === false && !loc) {
          throw new Error('Invalid locale.');
        }
        return loc || CurrentLocalization;
      }
      function setLocalization(localeCode, set) {
        var loc, canAbbreviate;
        function initializeField(name) {
          var val = loc[name];
          if (isString(val)) {
            loc[name] = val.split(',');
          } else if (!val) {
            loc[name] = [];
          }
        }
        function eachAlternate(str, fn) {
          str = str.split('+').map(function (split) {
            return split.replace(/(.+):(.+)$/, function (full, base, suffixes) {
              return suffixes.split('|').map(function (suffix) {
                return base + suffix;
              }).join('|');
            });
          }).join('|');
          return str.split('|').forEach(fn);
        }
        function setArray(name, abbreviate, multiple) {
          var arr = [];
          loc[name].forEach(function (full, i) {
            if (abbreviate) {
              full += '+' + full.slice(0, 3);
            }
            eachAlternate(full, function (day, j) {
              arr[j * multiple + i] = day.toLowerCase();
            });
          });
          loc[name] = arr;
        }
        function getDigit(start, stop, allowNumbers) {
          var str = '\\d{' + start + ',' + stop + '}';
          if (allowNumbers)
            str += '|(?:' + arrayToAlternates(loc['numbers']) + ')+';
          return str;
        }
        function getNum() {
          var arr = ['\\d+'].concat(loc['articles']);
          if (loc['numbers'])
            arr = arr.concat(loc['numbers']);
          return arrayToAlternates(arr);
        }
        function setDefault(name, value) {
          loc[name] = loc[name] || value;
        }
        function setModifiers() {
          var arr = [];
          loc.modifiersByName = {};
          loc['modifiers'].forEach(function (modifier) {
            var name = modifier.name;
            eachAlternate(modifier.src, function (t) {
              var locEntry = loc[name];
              loc.modifiersByName[t] = modifier;
              arr.push({
                name: name,
                src: t,
                value: modifier.value
              });
              loc[name] = locEntry ? locEntry + '|' + t : t;
            });
          });
          loc['day'] += '|' + arrayToAlternates(loc['weekdays']);
          loc['modifiers'] = arr;
        }
        loc = new Localization(set);
        initializeField('modifiers');
        'months,weekdays,units,numbers,articles,tokens,timeMarker,ampm,timeSuffixes,dateParse,timeParse'.split(',').forEach(initializeField);
        canAbbreviate = !loc['monthSuffix'];
        setArray('months', canAbbreviate, 12);
        setArray('weekdays', canAbbreviate, 7);
        setArray('units', false, 8);
        setArray('numbers', false, 10);
        setDefault('code', localeCode);
        setDefault('date', getDigit(1, 2, loc['digitDate']));
        setDefault('year', "'\\d{2}|" + getDigit(4, 4));
        setDefault('num', getNum());
        setModifiers();
        if (loc['monthSuffix']) {
          loc['month'] = getDigit(1, 2);
          loc['months'] = getRange(1, 12).map(function (n) {
            return n + loc['monthSuffix'];
          });
        }
        loc['full_month'] = getDigit(1, 2) + '|' + arrayToAlternates(loc['months']);
        if (loc['timeSuffixes'].length > 0) {
          loc.addFormat(prepareTime(RequiredTime, loc), false, TimeFormat);
        }
        loc.addFormat('{day}', true);
        loc.addFormat('{month}' + (loc['monthSuffix'] || ''));
        loc.addFormat('{year}' + (loc['yearSuffix'] || ''));
        loc['timeParse'].forEach(function (src) {
          loc.addFormat(src, true);
        });
        loc['dateParse'].forEach(function (src) {
          loc.addFormat(src);
        });
        return Localizations[localeCode] = loc;
      }
      function addDateInputFormat(locale, format, match, variant) {
        locale.compiledFormats.unshift({
          variant: variant,
          locale: locale,
          reg: regexp('^' + format + '$', 'i'),
          to: match
        });
      }
      function simpleCapitalize(str) {
        return str.slice(0, 1).toUpperCase() + str.slice(1);
      }
      function arrayToAlternates(arr) {
        return arr.filter(function (el) {
          return !!el;
        }).join('|');
      }
      function collectDateArguments(args, allowDuration) {
        var obj, arr;
        if (isObject(args[0])) {
          return args;
        } else if (isNumber(args[0]) && !isNumber(args[1])) {
          return [args[0]];
        } else if (isString(args[0]) && allowDuration) {
          return [
            getDateParamsFromString(args[0]),
            args[1]
          ];
        }
        obj = {};
        DateArgumentUnits.forEach(function (u, i) {
          obj[u.unit] = args[i];
        });
        return [obj];
      }
      function getDateParamsFromString(str, num) {
        var params = {};
        match = str.match(/^(\d+)?\s?(\w+?)s?$/i);
        if (match) {
          if (isUndefined(num)) {
            num = parseInt(match[1]) || 1;
          }
          params[match[2].toLowerCase()] = num;
        }
        return params;
      }
      function getFormatMatch(match, arr) {
        var obj = {}, value, num;
        arr.forEach(function (key, i) {
          value = match[i + 1];
          if (isUndefined(value) || value === '')
            return;
          if (key === 'year') {
            obj.yearAsString = value.replace(/'/, '');
          }
          num = parseFloat(value.replace(/'/, '').replace(/,/, '.'));
          obj[key] = !isNaN(num) ? num : value.toLowerCase();
        });
        return obj;
      }
      function cleanDateInput(str) {
        str = str.trim().replace(/^just (?=now)|\.+$/i, '');
        return convertAsianDigits(str);
      }
      function convertAsianDigits(str) {
        return str.replace(AsianDigitReg, function (full, disallowed, match) {
          var sum = 0, place = 1, lastWasHolder, lastHolder;
          if (disallowed)
            return full;
          match.split('').reverse().forEach(function (letter) {
            var value = AsianDigitMap[letter], holder = value > 9;
            if (holder) {
              if (lastWasHolder)
                sum += place;
              place *= value / (lastHolder || 1);
              lastHolder = value;
            } else {
              if (lastWasHolder === false) {
                place *= 10;
              }
              sum += place * value;
            }
            lastWasHolder = holder;
          });
          if (lastWasHolder)
            sum += place;
          return sum;
        });
      }
      function getExtendedDate(f, localeCode, prefer, forceUTC) {
        var d = new date, relative = false, baseLocalization, loc, format, set, unit, weekday, num, tmp, after;
        d.utc(forceUTC);
        if (isDate(f)) {
          d.utc(f.isUTC()).setTime(f.getTime());
        } else if (isNumber(f)) {
          d.setTime(f);
        } else if (isObject(f)) {
          d.set(f, true);
          set = f;
        } else if (isString(f)) {
          baseLocalization = getLocalization(localeCode);
          f = cleanDateInput(f);
          if (baseLocalization) {
            iterateOverObject(baseLocalization.getFormats(), function (i, dif) {
              var match = f.match(dif.reg);
              if (match) {
                format = dif;
                loc = format.locale;
                set = getFormatMatch(match, format.to, loc);
                if (set['utc']) {
                  d.utc();
                }
                loc.cachedFormat = format;
                if (set.timestamp) {
                  set = set.timestamp;
                  return false;
                }
                if (format.variant && !isString(set['month']) && (isString(set['date']) || baseLocalization.hasVariant(localeCode))) {
                  tmp = set['month'];
                  set['month'] = set['date'];
                  set['date'] = tmp;
                }
                if (set['year'] && set.yearAsString.length === 2) {
                  set['year'] = getYearFromAbbreviation(set['year']);
                }
                if (set['month']) {
                  set['month'] = loc.getMonth(set['month']);
                  if (set['shift'] && !set['unit'])
                    set['unit'] = loc['units'][7];
                }
                if (set['weekday'] && set['date']) {
                  delete set['weekday'];
                } else if (set['weekday']) {
                  set['weekday'] = loc.getWeekday(set['weekday']);
                  if (set['shift'] && !set['unit'])
                    set['unit'] = loc['units'][5];
                }
                if (set['day'] && (tmp = loc.modifiersByName[set['day']])) {
                  set['day'] = tmp.value;
                  d.reset();
                  relative = true;
                } else if (set['day'] && (weekday = loc.getWeekday(set['day'])) > -1) {
                  delete set['day'];
                  if (set['num'] && set['month']) {
                    after = function () {
                      var w = d.getWeekday();
                      d.setWeekday(7 * (set['num'] - 1) + (w > weekday ? weekday + 7 : weekday));
                    };
                    set['day'] = 1;
                  } else {
                    set['weekday'] = weekday;
                  }
                }
                if (set['date'] && !isNumber(set['date'])) {
                  set['date'] = loc.getNumericDate(set['date']);
                }
                if (loc.matchPM(set['ampm']) && set['hour'] < 12) {
                  set['hour'] += 12;
                } else if (loc.matchAM(set['ampm']) && set['hour'] === 12) {
                  set['hour'] = 0;
                }
                if ('offset_hours' in set || 'offset_minutes' in set) {
                  d.utc();
                  set['offset_minutes'] = set['offset_minutes'] || 0;
                  set['offset_minutes'] += set['offset_hours'] * 60;
                  if (set['offset_sign'] === '-') {
                    set['offset_minutes'] *= -1;
                  }
                  set['minute'] -= set['offset_minutes'];
                }
                if (set['unit']) {
                  relative = true;
                  num = loc.getNumber(set['num']);
                  unit = loc.getEnglishUnit(set['unit']);
                  if (set['shift'] || set['edge']) {
                    num *= (tmp = loc.modifiersByName[set['shift']]) ? tmp.value : 0;
                    if (unit === 'month' && isDefined(set['date'])) {
                      d.set({ 'day': set['date'] }, true);
                      delete set['date'];
                    }
                    if (unit === 'year' && isDefined(set['month'])) {
                      d.set({
                        'month': set['month'],
                        'day': set['date']
                      }, true);
                      delete set['month'];
                      delete set['date'];
                    }
                  }
                  if (set['sign'] && (tmp = loc.modifiersByName[set['sign']])) {
                    num *= tmp.value;
                  }
                  if (isDefined(set['weekday'])) {
                    d.set({ 'weekday': set['weekday'] }, true);
                    delete set['weekday'];
                  }
                  set[unit] = (set[unit] || 0) + num;
                }
                if (set['year_sign'] === '-') {
                  set['year'] *= -1;
                }
                DateUnitsReversed.slice(1, 4).forEach(function (u, i) {
                  var value = set[u.unit], fraction = value % 1;
                  if (fraction) {
                    set[DateUnitsReversed[i].unit] = round(fraction * (u.unit === 'second' ? 1e3 : 60));
                    set[u.unit] = floor(value);
                  }
                });
                return false;
              }
            });
          }
          if (!format) {
            if (f !== 'now') {
              d = new date(f);
            }
            if (forceUTC) {
              d.addMinutes(-d.getTimezoneOffset());
            }
          } else if (relative) {
            d.advance(set);
          } else {
            if (d._utc) {
              d.reset();
            }
            updateDate(d, set, true, false, prefer);
          }
          if (set && set['edge']) {
            tmp = loc.modifiersByName[set['edge']];
            iterateOverObject(DateUnitsReversed.slice(4), function (i, u) {
              if (isDefined(set[u.unit])) {
                unit = u.unit;
                return false;
              }
            });
            if (unit === 'year')
              set.specificity = 'month';
            else if (unit === 'month' || unit === 'week')
              set.specificity = 'day';
            d[(tmp.value < 0 ? 'endOf' : 'beginningOf') + simpleCapitalize(unit)]();
            if (tmp.value === -2)
              d.reset();
          }
          if (after) {
            after();
          }
          d.utc(false);
        }
        return {
          date: d,
          set: set
        };
      }
      function getYearFromAbbreviation(year) {
        return round(callDateGet(new date, 'FullYear') / 100) * 100 - round(year / 100) * 100 + year;
      }
      function getShortHour(d) {
        var hours = callDateGet(d, 'Hours');
        return hours === 0 ? 12 : hours - floor(hours / 13) * 12;
      }
      function getWeekNumber(date) {
        date = date.clone();
        var dow = callDateGet(date, 'Day') || 7;
        date.addDays(4 - dow).reset();
        return 1 + floor(date.daysSince(date.clone().beginningOfYear()) / 7);
      }
      function getAdjustedUnit(ms) {
        var next, ams = math.abs(ms), value = ams, unit = 0;
        DateUnitsReversed.slice(1).forEach(function (u, i) {
          next = floor(round(ams / u.multiplier() * 10) / 10);
          if (next >= 1) {
            value = next;
            unit = i + 1;
          }
        });
        return [
          value,
          unit,
          ms
        ];
      }
      function getAdjustedUnitWithMonthFallback(date) {
        var adu = getAdjustedUnit(date.millisecondsFromNow());
        if (adu[1] === 6) {
          adu[0] = math.abs(date.monthsFromNow());
        }
        return adu;
      }
      function formatDate(date, format, relative, localeCode) {
        var adu, loc = getLocalization(localeCode), caps = regexp(/^[A-Z]/), value, shortcut;
        if (!date.isValid()) {
          return 'Invalid Date';
        } else if (Date[format]) {
          format = Date[format];
        } else if (isFunction(format)) {
          adu = getAdjustedUnitWithMonthFallback(date);
          format = format.apply(date, adu.concat(loc));
        }
        if (!format && relative) {
          adu = adu || getAdjustedUnitWithMonthFallback(date);
          if (adu[1] === 0) {
            adu[1] = 1;
            adu[0] = 1;
          }
          return loc.getRelativeFormat(adu);
        }
        format = format || 'long';
        format = loc[format] || format;
        DateOutputFormats.forEach(function (dof) {
          format = format.replace(regexp('\\{(' + dof.token + ')(\\d)?\\}', dof.word ? 'i' : ''), function (m, t, d) {
            var val = dof.format(date, loc, d || 1, t), l = t.length, one = t.match(/^(.)\1+$/);
            if (dof.word) {
              if (l === 3)
                val = val.slice(0, 3);
              if (one || t.match(caps))
                val = simpleCapitalize(val);
            } else if (one && !dof.text) {
              val = (isNumber(val) ? padNumber(val, l) : val.toString()).slice(-l);
            }
            return val;
          });
        });
        return format;
      }
      function compareDate(d, find, buffer, forceUTC) {
        var p, t, min, max, minOffset, maxOffset, override, capitalized, accuracy = 0, loBuffer = 0, hiBuffer = 0;
        p = getExtendedDate(find, null, null, forceUTC);
        if (buffer > 0) {
          loBuffer = hiBuffer = buffer;
          override = true;
        }
        if (!p.date.isValid())
          return false;
        if (p.set && p.set.specificity) {
          DateUnits.forEach(function (u, i) {
            if (u.unit === p.set.specificity) {
              accuracy = u.multiplier(p.date, d - p.date) - 1;
            }
          });
          capitalized = simpleCapitalize(p.set.specificity);
          if (p.set['edge'] || p.set['shift']) {
            p.date['beginningOf' + capitalized]();
          }
          if (p.set.specificity === 'month') {
            max = p.date.clone()['endOf' + capitalized]().getTime();
          }
          if (!override && p.set['sign'] && p.set.specificity != 'millisecond') {
            loBuffer = 50;
            hiBuffer = -50;
          }
        }
        t = d.getTime();
        min = p.date.getTime();
        max = max || min + accuracy;
        max = compensateForTimezoneTraversal(d, min, max);
        return t >= min - loBuffer && t <= max + hiBuffer;
      }
      function compensateForTimezoneTraversal(d, min, max) {
        var dMin, dMax, minOffset, maxOffset;
        dMin = new Date(min);
        dMax = new Date(max).utc(d.isUTC());
        if (callDateGet(dMax, 'Hours') !== 23) {
          minOffset = dMin.getTimezoneOffset();
          maxOffset = dMax.getTimezoneOffset();
          if (minOffset !== maxOffset) {
            max += (maxOffset - minOffset).minutes();
          }
        }
        return max;
      }
      function updateDate(d, params, reset, advance, prefer) {
        var weekday, specificityIndex;
        function getParam(key) {
          return isDefined(params[key]) ? params[key] : params[key + 's'];
        }
        function paramExists(key) {
          return isDefined(getParam(key));
        }
        function uniqueParamExists(key, isDay) {
          return paramExists(key) || isDay && paramExists('weekday');
        }
        function canDisambiguate() {
          var now = new date;
          return prefer === -1 && d > now || prefer === 1 && d < now;
        }
        if (isNumber(params) && advance) {
          params = { 'milliseconds': params };
        } else if (isNumber(params)) {
          d.setTime(params);
          return d;
        }
        if (isDefined(params['date'])) {
          params['day'] = params['date'];
        }
        iterateOverObject(DateUnitsReversed, function (i, u) {
          var isDay = u.unit === 'day';
          if (uniqueParamExists(u.unit, isDay)) {
            params.specificity = u.unit;
            specificityIndex = +i;
            return false;
          } else if (reset && u.unit !== 'week' && (!isDay || !paramExists('week'))) {
            callDateSet(d, u.method, isDay ? 1 : 0);
          }
        });
        DateUnits.forEach(function (u, i) {
          var unit = u.unit, method = u.method, higherUnit = DateUnits[i - 1], value;
          value = getParam(unit);
          if (isUndefined(value))
            return;
          if (advance) {
            if (unit === 'week') {
              value = (params['day'] || 0) + value * 7;
              method = 'Date';
            }
            value = value * advance + callDateGet(d, method);
          } else if (unit === 'month' && paramExists('day')) {
            callDateSet(d, 'Date', 15);
          }
          callDateSet(d, method, value);
          if (advance && unit === 'month') {
            checkMonthTraversal(d, value);
          }
        });
        if (!advance && !paramExists('day') && paramExists('weekday')) {
          var weekday = getParam('weekday'), isAhead, futurePreferred;
          d.setWeekday(weekday);
        }
        if (canDisambiguate()) {
          iterateOverObject(DateUnitsReversed.slice(specificityIndex + 1), function (i, u) {
            var ambiguous = u.ambiguous || u.unit === 'week' && paramExists('weekday');
            if (ambiguous && !uniqueParamExists(u.unit, u.unit === 'day')) {
              d[u.addMethod](prefer);
              return false;
            }
          });
        }
        return d;
      }
      function callDateGet(d, method) {
        return d['get' + (d._utc ? 'UTC' : '') + method]();
      }
      function callDateSet(d, method, value) {
        return d['set' + (d._utc && method != 'ISOWeek' ? 'UTC' : '') + method](value);
      }
      function prepareTime(format, loc, iso) {
        var timeSuffixMapping = {
            'h': 0,
            'm': 1,
            's': 2
          }, add;
        loc = loc || English;
        return format.replace(/{([a-z])}/g, function (full, token) {
          var separators = [], isHours = token === 'h', tokenIsRequired = isHours && !iso;
          if (token === 't') {
            return loc['ampm'].join('|');
          } else {
            if (isHours) {
              separators.push(':');
            }
            if (add = loc['timeSuffixes'][timeSuffixMapping[token]]) {
              separators.push(add + '\\s*');
            }
            return separators.length === 0 ? '' : '(?:' + separators.join('|') + ')' + (tokenIsRequired ? '' : '?');
          }
        });
      }
      function checkMonthTraversal(date, targetMonth) {
        if (targetMonth < 0) {
          targetMonth = targetMonth % 12 + 12;
        }
        if (targetMonth % 12 != callDateGet(date, 'Month')) {
          callDateSet(date, 'Date', 0);
        }
      }
      function createDate(args, prefer, forceUTC) {
        var f, localeCode;
        if (isNumber(args[1])) {
          f = collectDateArguments(args)[0];
        } else {
          f = args[0];
          localeCode = args[1];
        }
        return getExtendedDate(f, localeCode, prefer, forceUTC).date;
      }
      function buildDateUnits() {
        DateUnitsReversed = DateUnits.concat().reverse();
        DateArgumentUnits = DateUnits.concat();
        DateArgumentUnits.splice(2, 1);
      }
      function buildDateMethods() {
        extendSimilar(date, true, false, DateUnits, function (methods, u, i) {
          var unit = u.unit, caps = simpleCapitalize(unit), multiplier = u.multiplier(), since, until;
          u.addMethod = 'add' + caps + 's';
          function applyErrorMargin(ms) {
            var num = ms / multiplier, fraction = num % 1, error = u.error || .999;
            if (fraction && math.abs(fraction % 1) > error) {
              num = round(num);
            }
            return parseInt(num);
          }
          since = function (f, localeCode) {
            return applyErrorMargin(this.getTime() - date.create(f, localeCode).getTime());
          };
          until = function (f, localeCode) {
            return applyErrorMargin(date.create(f, localeCode).getTime() - this.getTime());
          };
          methods[unit + 'sAgo'] = until;
          methods[unit + 'sUntil'] = until;
          methods[unit + 'sSince'] = since;
          methods[unit + 'sFromNow'] = since;
          methods[u.addMethod] = function (num, reset) {
            var set = {};
            set[unit] = num;
            return this.advance(set, reset);
          };
          buildNumberToDateAlias(u, multiplier);
          if (i < 3) {
            [
              'Last',
              'This',
              'Next'
            ].forEach(function (shift) {
              methods['is' + shift + caps] = function () {
                return this.is(shift + ' ' + unit);
              };
            });
          }
          if (i < 4) {
            methods['beginningOf' + caps] = function () {
              var set = {};
              switch (unit) {
              case 'year':
                set['year'] = callDateGet(this, 'FullYear');
                break;
              case 'month':
                set['month'] = callDateGet(this, 'Month');
                break;
              case 'day':
                set['day'] = callDateGet(this, 'Date');
                break;
              case 'week':
                set['weekday'] = 0;
                break;
              }
              return this.set(set, true);
            };
            methods['endOf' + caps] = function () {
              var set = {
                  'hours': 23,
                  'minutes': 59,
                  'seconds': 59,
                  'milliseconds': 999
                };
              switch (unit) {
              case 'year':
                set['month'] = 11;
                set['day'] = 31;
                break;
              case 'month':
                set['day'] = this.daysInMonth();
                break;
              case 'week':
                set['weekday'] = 6;
                break;
              }
              return this.set(set, true);
            };
          }
        });
      }
      function buildCoreInputFormats() {
        English.addFormat('([+-])?(\\d{4,4})[-.]?{full_month}[-.]?(\\d{1,2})?', true, [
          'year_sign',
          'year',
          'month',
          'date'
        ], false, true);
        English.addFormat('(\\d{1,2})[-.\\/]{full_month}(?:[-.\\/](\\d{2,4}))?', true, [
          'date',
          'month',
          'year'
        ], true);
        English.addFormat('{full_month}[-.](\\d{4,4})', false, [
          'month',
          'year'
        ]);
        English.addFormat('\\/Date\\((\\d+(?:\\+\\d{4,4})?)\\)\\/', false, ['timestamp']);
        English.addFormat(prepareTime(RequiredTime, English), false, TimeFormat);
        CoreDateFormats = English.compiledFormats.slice(0, 7).reverse();
        English.compiledFormats = English.compiledFormats.slice(7).concat(CoreDateFormats);
      }
      function buildDateOutputShortcuts() {
        extendSimilar(date, true, false, 'short,long,full', function (methods, name) {
          methods[name] = function (localeCode) {
            return formatDate(this, name, false, localeCode);
          };
        });
      }
      function buildAsianDigits() {
        KanjiDigits.split('').forEach(function (digit, value) {
          var holder;
          if (value > 9) {
            value = math.pow(10, value - 9);
          }
          AsianDigitMap[digit] = value;
        });
        FullWidthDigits.split('').forEach(function (digit, value) {
          AsianDigitMap[digit] = value;
        });
        AsianDigitReg = regexp('([\u671f\u9031\u5468])?([' + KanjiDigits + FullWidthDigits + ']+)(?!\u6628)', 'g');
      }
      function buildRelativeAliases() {
        var special = 'today,yesterday,tomorrow,weekday,weekend,future,past'.split(',');
        var weekdays = English['weekdays'].slice(0, 7);
        var months = English['months'].slice(0, 12);
        extendSimilar(date, true, false, special.concat(weekdays).concat(months), function (methods, name) {
          methods['is' + simpleCapitalize(name)] = function (utc) {
            return this.is(name, 0, utc);
          };
        });
      }
      function buildUTCAliases() {
        date.extend({
          'utc': {
            'create': function () {
              return createDate(arguments, 0, true);
            },
            'past': function () {
              return createDate(arguments, -1, true);
            },
            'future': function () {
              return createDate(arguments, 1, true);
            }
          }
        }, false, false);
      }
      function setDateProperties() {
        date.extend({
          'RFC1123': '{Dow}, {dd} {Mon} {yyyy} {HH}:{mm}:{ss} {tz}',
          'RFC1036': '{Weekday}, {dd}-{Mon}-{yy} {HH}:{mm}:{ss} {tz}',
          'ISO8601_DATE': '{yyyy}-{MM}-{dd}',
          'ISO8601_DATETIME': '{yyyy}-{MM}-{dd}T{HH}:{mm}:{ss}.{fff}{isotz}'
        }, false, false);
      }
      date.extend({
        'create': function () {
          return createDate(arguments);
        },
        'past': function () {
          return createDate(arguments, -1);
        },
        'future': function () {
          return createDate(arguments, 1);
        },
        'addLocale': function (localeCode, set) {
          return setLocalization(localeCode, set);
        },
        'setLocale': function (localeCode, set) {
          var loc = getLocalization(localeCode, false);
          CurrentLocalization = loc;
          if (localeCode && localeCode != loc['code']) {
            loc['code'] = localeCode;
          }
          return loc;
        },
        'getLocale': function (localeCode) {
          return !localeCode ? CurrentLocalization : getLocalization(localeCode, false);
        },
        'addFormat': function (format, match, localeCode) {
          addDateInputFormat(getLocalization(localeCode), format, match);
        }
      }, false, false);
      date.extend({
        'set': function () {
          var args = collectDateArguments(arguments);
          return updateDate(this, args[0], args[1]);
        },
        'setWeekday': function (dow) {
          if (isUndefined(dow))
            return;
          return callDateSet(this, 'Date', callDateGet(this, 'Date') + dow - callDateGet(this, 'Day'));
        },
        'setISOWeek': function (week) {
          var weekday = callDateGet(this, 'Day') || 7;
          if (isUndefined(week))
            return;
          this.set({
            'month': 0,
            'date': 4
          });
          this.set({ 'weekday': 1 });
          if (week > 1) {
            this.addWeeks(week - 1);
          }
          if (weekday !== 1) {
            this.advance({ 'days': weekday - 1 });
          }
          return this.getTime();
        },
        'getISOWeek': function () {
          return getWeekNumber(this);
        },
        'getUTCOffset': function (iso) {
          var offset = this._utc ? 0 : this.getTimezoneOffset();
          var colon = iso === true ? ':' : '';
          if (!offset && iso)
            return 'Z';
          return padNumber(round(-offset / 60), 2, true) + colon + padNumber(offset % 60, 2);
        },
        'utc': function (set) {
          defineProperty(this, '_utc', set === true || arguments.length === 0);
          return this;
        },
        'isUTC': function () {
          return !!this._utc || this.getTimezoneOffset() === 0;
        },
        'advance': function () {
          var args = collectDateArguments(arguments, true);
          return updateDate(this, args[0], args[1], 1);
        },
        'rewind': function () {
          var args = collectDateArguments(arguments, true);
          return updateDate(this, args[0], args[1], -1);
        },
        'isValid': function () {
          return !isNaN(this.getTime());
        },
        'isAfter': function (d, margin, utc) {
          return this.getTime() > date.create(d).getTime() - (margin || 0);
        },
        'isBefore': function (d, margin) {
          return this.getTime() < date.create(d).getTime() + (margin || 0);
        },
        'isBetween': function (d1, d2, margin) {
          var t = this.getTime();
          var t1 = date.create(d1).getTime();
          var t2 = date.create(d2).getTime();
          var lo = math.min(t1, t2);
          var hi = math.max(t1, t2);
          margin = margin || 0;
          return lo - margin < t && hi + margin > t;
        },
        'isLeapYear': function () {
          var year = callDateGet(this, 'FullYear');
          return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
        },
        'daysInMonth': function () {
          return 32 - callDateGet(new date(callDateGet(this, 'FullYear'), callDateGet(this, 'Month'), 32), 'Date');
        },
        'format': function (f, localeCode) {
          return formatDate(this, f, false, localeCode);
        },
        'relative': function (f, localeCode) {
          if (isString(f)) {
            localeCode = f;
            f = null;
          }
          return formatDate(this, f, true, localeCode);
        },
        'is': function (d, margin, utc) {
          var tmp, comp;
          if (!this.isValid())
            return;
          if (isString(d)) {
            d = d.trim().toLowerCase();
            comp = this.clone().utc(utc);
            switch (true) {
            case d === 'future':
              return this.getTime() > new date().getTime();
            case d === 'past':
              return this.getTime() < new date().getTime();
            case d === 'weekday':
              return callDateGet(comp, 'Day') > 0 && callDateGet(comp, 'Day') < 6;
            case d === 'weekend':
              return callDateGet(comp, 'Day') === 0 || callDateGet(comp, 'Day') === 6;
            case (tmp = English['weekdays'].indexOf(d) % 7) > -1:
              return callDateGet(comp, 'Day') === tmp;
            case (tmp = English['months'].indexOf(d) % 12) > -1:
              return callDateGet(comp, 'Month') === tmp;
            }
          }
          return compareDate(this, d, margin, utc);
        },
        'reset': function (unit) {
          var params = {}, recognized;
          unit = unit || 'hours';
          if (unit === 'date')
            unit = 'days';
          recognized = DateUnits.some(function (u) {
            return unit === u.unit || unit === u.unit + 's';
          });
          params[unit] = unit.match(/^days?/) ? 1 : 0;
          return recognized ? this.set(params, true) : this;
        },
        'clone': function () {
          var d = new date(this.getTime());
          d.utc(!!this._utc);
          return d;
        }
      });
      date.extend({
        'iso': function () {
          return this.toISOString();
        },
        'getWeekday': date.prototype.getDay,
        'getUTCWeekday': date.prototype.getUTCDay
      });
      function buildNumberToDateAlias(u, multiplier) {
        var unit = u.unit, methods = {};
        function base() {
          return round(this * multiplier);
        }
        function after() {
          return createDate(arguments)[u.addMethod](this);
        }
        function before() {
          return createDate(arguments)[u.addMethod](-this);
        }
        methods[unit] = base;
        methods[unit + 's'] = base;
        methods[unit + 'Before'] = before;
        methods[unit + 'sBefore'] = before;
        methods[unit + 'Ago'] = before;
        methods[unit + 'sAgo'] = before;
        methods[unit + 'After'] = after;
        methods[unit + 'sAfter'] = after;
        methods[unit + 'FromNow'] = after;
        methods[unit + 'sFromNow'] = after;
        number.extend(methods);
      }
      number.extend({
        'duration': function (localeCode) {
          return getLocalization(localeCode).getDuration(this);
        }
      });
      English = CurrentLocalization = date.addLocale('en', {
        'plural': true,
        'timeMarker': 'at',
        'ampm': 'am,pm',
        'months': 'January,February,March,April,May,June,July,August,September,October,November,December',
        'weekdays': 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday',
        'units': 'millisecond:|s,second:|s,minute:|s,hour:|s,day:|s,week:|s,month:|s,year:|s',
        'numbers': 'one,two,three,four,five,six,seven,eight,nine,ten',
        'articles': 'a,an,the',
        'tokens': 'the,st|nd|rd|th,of',
        'short': '{Month} {d}, {yyyy}',
        'long': '{Month} {d}, {yyyy} {h}:{mm}{tt}',
        'full': '{Weekday} {Month} {d}, {yyyy} {h}:{mm}:{ss}{tt}',
        'past': '{num} {unit} {sign}',
        'future': '{num} {unit} {sign}',
        'duration': '{num} {unit}',
        'modifiers': [
          {
            'name': 'day',
            'src': 'yesterday',
            'value': -1
          },
          {
            'name': 'day',
            'src': 'today',
            'value': 0
          },
          {
            'name': 'day',
            'src': 'tomorrow',
            'value': 1
          },
          {
            'name': 'sign',
            'src': 'ago|before',
            'value': -1
          },
          {
            'name': 'sign',
            'src': 'from now|after|from|in|later',
            'value': 1
          },
          {
            'name': 'edge',
            'src': 'last day',
            'value': -2
          },
          {
            'name': 'edge',
            'src': 'end',
            'value': -1
          },
          {
            'name': 'edge',
            'src': 'first day|beginning',
            'value': 1
          },
          {
            'name': 'shift',
            'src': 'last',
            'value': -1
          },
          {
            'name': 'shift',
            'src': 'the|this',
            'value': 0
          },
          {
            'name': 'shift',
            'src': 'next',
            'value': 1
          }
        ],
        'dateParse': [
          '{num} {unit} {sign}',
          '{sign} {num} {unit}',
          '{month} {year}',
          '{shift} {unit=5-7}',
          '{0?} {date}{1}',
          '{0?} {edge} of {shift?} {unit=4-7?}{month?}{year?}'
        ],
        'timeParse': [
          '{0} {num}{1} {day} of {month} {year?}',
          '{weekday?} {month} {date}{1?} {year?}',
          '{date} {month} {year}',
          '{date} {month}',
          '{shift} {weekday}',
          '{shift} week {weekday}',
          '{weekday} {2?} {shift} week',
          '{num} {unit=4-5} {sign} {day}',
          '{0?} {date}{1} of {month}',
          '{0?}{month?} {date?}{1?} of {shift} {unit=6-7}'
        ]
      });
      buildDateUnits();
      buildDateMethods();
      buildCoreInputFormats();
      buildDateOutputShortcuts();
      buildAsianDigits();
      buildRelativeAliases();
      buildUTCAliases();
      setDateProperties();
      var DateRange = function (start, end) {
        this.start = date.create(start);
        this.end = date.create(end);
      };
      DateRange.prototype.toString = function () {
        return this.isValid() ? this.start.full() + '..' + this.end.full() : 'Invalid DateRange';
      };
      extend(DateRange, true, false, {
        'isValid': function () {
          return this.start < this.end;
        },
        'duration': function () {
          return this.isValid() ? this.end.getTime() - this.start.getTime() : NaN;
        },
        'contains': function (obj) {
          var self = this, arr = obj.start && obj.end ? [
              obj.start,
              obj.end
            ] : [obj];
          return arr.every(function (d) {
            return d >= self.start && d <= self.end;
          });
        },
        'every': function (increment, fn) {
          var current = this.start.clone(), result = [], index = 0, params, isDay;
          if (isString(increment)) {
            current.advance(getDateParamsFromString(increment, 0), true);
            params = getDateParamsFromString(increment);
            isDay = increment.toLowerCase() === 'day';
          } else {
            params = { 'milliseconds': increment };
          }
          while (current <= this.end) {
            result.push(current);
            if (fn)
              fn(current, index);
            if (isDay && callDateGet(current, 'Hours') === 23) {
              current = current.clone();
              callDateSet(current, 'Hours', 48);
            } else {
              current = current.clone().advance(params, true);
            }
            index++;
          }
          return result;
        },
        'union': function (range) {
          return new DateRange(this.start < range.start ? this.start : range.start, this.end > range.end ? this.end : range.end);
        },
        'intersect': function (range) {
          return new DateRange(this.start > range.start ? this.start : range.start, this.end < range.end ? this.end : range.end);
        },
        'clone': function (range) {
          return new DateRange(this.start, this.end);
        }
      });
      extendSimilar(DateRange, true, false, 'Millisecond,Second,Minute,Hour,Day,Week,Month,Year', function (methods, name) {
        methods['each' + name] = function (fn) {
          return this.every(name, fn);
        };
      });
      extend(date, false, false, {
        'range': function (start, end) {
          return new DateRange(start, end);
        }
      });
      function setDelay(fn, ms, after, scope, args) {
        var index;
        if (ms === Infinity)
          return;
        if (!fn.timers)
          fn.timers = [];
        if (!isNumber(ms))
          ms = 0;
        fn.timers.push(setTimeout(function () {
          fn.timers.splice(index, 1);
          after.apply(scope, args || []);
        }, ms));
        index = fn.timers.length;
      }
      extend(Function, true, false, {
        'lazy': function (ms, limit) {
          var fn = this, queue = [], lock = false, execute, rounded, perExecution, result;
          ms = ms || 1;
          limit = limit || Infinity;
          rounded = ceil(ms);
          perExecution = round(rounded / ms) || 1;
          execute = function () {
            if (lock || queue.length == 0)
              return;
            var max = math.max(queue.length - perExecution, 0);
            while (queue.length > max) {
              result = Function.prototype.apply.apply(fn, queue.shift());
            }
            setDelay(lazy, rounded, function () {
              lock = false;
              execute();
            });
            lock = true;
          };
          function lazy() {
            if (!lock || queue.length < limit - 1) {
              queue.push([
                this,
                arguments
              ]);
              execute();
            }
            return result;
          }
          return lazy;
        },
        'delay': function (ms) {
          var fn = this;
          var args = multiArgs(arguments).slice(1);
          setDelay(fn, ms, fn, fn, args);
          return fn;
        },
        'throttle': function (ms) {
          return this.lazy(ms, 1);
        },
        'debounce': function (ms) {
          var fn = this;
          function debounced() {
            debounced.cancel();
            setDelay(debounced, ms, fn, this, arguments);
          }
          ;
          return debounced;
        },
        'cancel': function () {
          if (isArray(this.timers)) {
            while (this.timers.length > 0) {
              clearTimeout(this.timers.shift());
            }
          }
          return this;
        },
        'after': function (num) {
          var fn = this, counter = 0, storedArguments = [];
          if (!isNumber(num)) {
            num = 1;
          } else if (num === 0) {
            fn.call();
            return fn;
          }
          return function () {
            var ret;
            storedArguments.push(multiArgs(arguments));
            counter++;
            if (counter == num) {
              ret = fn.call(this, storedArguments);
              counter = 0;
              storedArguments = [];
              return ret;
            }
          };
        },
        'once': function () {
          return this.throttle(Infinity);
        },
        'fill': function () {
          var fn = this, curried = multiArgs(arguments);
          return function () {
            var args = multiArgs(arguments);
            curried.forEach(function (arg, index) {
              if (arg != null || index >= args.length)
                args.splice(index, 0, arg);
            });
            return fn.apply(this, args);
          };
        }
      });
      function abbreviateNumber(num, roundTo, str, mid, limit, bytes) {
        var fixed = num.toFixed(20), decimalPlace = fixed.search(/\./), numeralPlace = fixed.search(/[1-9]/), significant = decimalPlace - numeralPlace, unit, i, divisor;
        if (significant > 0) {
          significant -= 1;
        }
        i = math.max(math.min((significant / 3).floor(), limit === false ? str.length : limit), -mid);
        unit = str.charAt(i + mid - 1);
        if (significant < -9) {
          i = -3;
          roundTo = significant.abs() - 9;
          unit = str.slice(0, 1);
        }
        divisor = bytes ? 2..pow(10 * i) : 10..pow(i * 3);
        return (num / divisor).round(roundTo || 0).format() + unit.trim();
      }
      extend(number, false, false, {
        'random': function (n1, n2) {
          var min, max;
          if (arguments.length == 1)
            n2 = n1, n1 = 0;
          min = math.min(n1 || 0, isUndefined(n2) ? 1 : n2);
          max = math.max(n1 || 0, isUndefined(n2) ? 1 : n2) + 1;
          return floor(math.random() * (max - min) + min);
        }
      });
      extend(number, true, false, {
        'log': function (base) {
          return math.log(this) / (base ? math.log(base) : 1);
        },
        'abbr': function (precision) {
          return abbreviateNumber(this, precision, 'kmbt', 0, 4);
        },
        'metric': function (precision, limit) {
          return abbreviateNumber(this, precision, 'n\u03bcm kMGTPE', 4, isUndefined(limit) ? 1 : limit);
        },
        'bytes': function (precision, limit) {
          return abbreviateNumber(this, precision, 'kMGTPE', 0, isUndefined(limit) ? 4 : limit, true) + 'B';
        },
        'isInteger': function () {
          return this % 1 == 0;
        },
        'isOdd': function () {
          return !isNaN(this) && !this.isMultipleOf(2);
        },
        'isEven': function () {
          return this.isMultipleOf(2);
        },
        'isMultipleOf': function (num) {
          return this % num === 0;
        },
        'format': function (place, thousands, decimal) {
          var i, str, split, integer, fraction, result = '';
          if (isUndefined(thousands)) {
            thousands = ',';
          }
          if (isUndefined(decimal)) {
            decimal = '.';
          }
          str = (isNumber(place) ? round(this, place || 0).toFixed(math.max(place, 0)) : this.toString()).replace(/^-/, '');
          split = str.split('.');
          integer = split[0];
          fraction = split[1];
          for (i = integer.length; i > 0; i -= 3) {
            if (i < integer.length) {
              result = thousands + result;
            }
            result = integer.slice(math.max(0, i - 3), i) + result;
          }
          if (fraction) {
            result += decimal + repeatString((place || 0) - fraction.length, '0') + fraction;
          }
          return (this < 0 ? '-' : '') + result;
        },
        'hex': function (pad) {
          return this.pad(pad || 1, false, 16);
        },
        'upto': function (num, fn, step) {
          return getRange(this, num, fn, step || 1);
        },
        'downto': function (num, fn, step) {
          return getRange(this, num, fn, -(step || 1));
        },
        'times': function (fn) {
          if (fn) {
            for (var i = 0; i < this; i++) {
              fn.call(this, i);
            }
          }
          return this.toNumber();
        },
        'chr': function () {
          return string.fromCharCode(this);
        },
        'pad': function (place, sign, base) {
          return padNumber(this, place, sign, base);
        },
        'ordinalize': function () {
          var suffix, num = this.abs(), last = parseInt(num.toString().slice(-2));
          return this + getOrdinalizedSuffix(last);
        },
        'toNumber': function () {
          return parseFloat(this, 10);
        }
      });
      function buildNumber() {
        extendSimilar(number, true, false, 'round,floor,ceil', function (methods, name) {
          methods[name] = function (precision) {
            return round(this, precision, name);
          };
        });
        extendSimilar(number, true, false, 'abs,pow,sin,asin,cos,acos,tan,atan,exp,pow,sqrt', function (methods, name) {
          methods[name] = function (a, b) {
            return math[name](this, a, b);
          };
        });
      }
      buildNumber();
      var ObjectTypeMethods = 'isObject,isNaN'.split(',');
      var ObjectHashMethods = 'keys,values,select,reject,each,merge,clone,equal,watch,tap,has'.split(',');
      function setParamsObject(obj, param, value, deep) {
        var reg = /^(.+?)(\[.*\])$/, paramIsArray, match, allKeys, key;
        if (deep !== false && (match = param.match(reg))) {
          key = match[1];
          allKeys = match[2].replace(/^\[|\]$/g, '').split('][');
          allKeys.forEach(function (k) {
            paramIsArray = !k || k.match(/^\d+$/);
            if (!key && isArray(obj))
              key = obj.length;
            if (!hasOwnProperty(obj, key)) {
              obj[key] = paramIsArray ? [] : {};
            }
            obj = obj[key];
            key = k;
          });
          if (!key && paramIsArray)
            key = obj.length.toString();
          setParamsObject(obj, key, value);
        } else if (value.match(/^[+-]?\d+(\.\d+)?$/)) {
          obj[param] = parseFloat(value);
        } else if (value === 'true') {
          obj[param] = true;
        } else if (value === 'false') {
          obj[param] = false;
        } else {
          obj[param] = value;
        }
      }
      function matchKey(key, match) {
        if (isRegExp(match)) {
          return match.test(key);
        } else if (isObjectPrimitive(match)) {
          return hasOwnProperty(match, key);
        } else {
          return key === string(match);
        }
      }
      function selectFromObject(obj, args, select) {
        var result = {}, match;
        iterateOverObject(obj, function (key, value) {
          match = false;
          flattenedArgs(args, function (arg) {
            if (matchKey(key, arg)) {
              match = true;
            }
          }, 1);
          if (match === select) {
            result[key] = value;
          }
        });
        return result;
      }
      function buildTypeMethods() {
        extendSimilar(object, false, false, ClassNames, function (methods, name) {
          var method = 'is' + name;
          ObjectTypeMethods.push(method);
          methods[method] = typeChecks[name];
        });
      }
      function buildObjectExtend() {
        extend(object, false, function () {
          return arguments.length === 0;
        }, {
          'extend': function () {
            var methods = ObjectTypeMethods.concat(ObjectHashMethods);
            if (typeof EnumerableMethods !== 'undefined') {
              methods = methods.concat(EnumerableMethods);
            }
            buildObjectInstanceMethods(methods, object);
          }
        });
      }
      extend(object, false, true, {
        'watch': function (obj, prop, fn) {
          if (!definePropertySupport)
            return;
          var value = obj[prop];
          object.defineProperty(obj, prop, {
            'enumerable': true,
            'configurable': true,
            'get': function () {
              return value;
            },
            'set': function (to) {
              value = fn.call(obj, prop, value, to);
            }
          });
        }
      });
      extend(object, false, function (arg1, arg2) {
        return isFunction(arg2);
      }, {
        'keys': function (obj, fn) {
          var keys = object.keys(obj);
          keys.forEach(function (key) {
            fn.call(obj, key, obj[key]);
          });
          return keys;
        }
      });
      extend(object, false, false, {
        'isObject': function (obj) {
          return isObject(obj);
        },
        'isNaN': function (obj) {
          return isNumber(obj) && obj.valueOf() !== obj.valueOf();
        },
        'equal': function (a, b) {
          return isEqual(a, b);
        },
        'extended': function (obj) {
          return new Hash(obj);
        },
        'merge': function (target, source, deep, resolve) {
          var key, val;
          if (target && typeof source != 'string') {
            for (key in source) {
              if (!hasOwnProperty(source, key) || !target)
                continue;
              val = source[key];
              if (isDefined(target[key])) {
                if (resolve === false) {
                  continue;
                }
                if (isFunction(resolve)) {
                  val = resolve.call(source, key, target[key], source[key]);
                }
              }
              if (deep === true && val && isObjectPrimitive(val)) {
                if (isDate(val)) {
                  val = new date(val.getTime());
                } else if (isRegExp(val)) {
                  val = new regexp(val.source, getRegExpFlags(val));
                } else {
                  if (!target[key])
                    target[key] = array.isArray(val) ? [] : {};
                  object.merge(target[key], source[key], deep, resolve);
                  continue;
                }
              }
              target[key] = val;
            }
          }
          return target;
        },
        'values': function (obj, fn) {
          var values = [];
          iterateOverObject(obj, function (k, v) {
            values.push(v);
            if (fn)
              fn.call(obj, v);
          });
          return values;
        },
        'clone': function (obj, deep) {
          var target;
          if (isDate(obj) && obj.clone) {
            return obj.clone();
          } else if (!isObjectPrimitive(obj)) {
            return obj;
          } else if (obj instanceof Hash) {
            target = new Hash;
          } else {
            target = new obj.constructor;
          }
          return object.merge(target, obj, deep);
        },
        'fromQueryString': function (str, deep) {
          var result = object.extended(), split;
          str = str && str.toString ? str.toString() : '';
          str.replace(/^.*?\?/, '').split('&').forEach(function (p) {
            var split = p.split('=');
            if (split.length !== 2)
              return;
            setParamsObject(result, split[0], decodeURIComponent(split[1]), deep);
          });
          return result;
        },
        'tap': function (obj, arg) {
          var fn = arg;
          if (!isFunction(arg)) {
            fn = function () {
              if (arg)
                obj[arg]();
            };
          }
          fn.call(obj, obj);
          return obj;
        },
        'has': function (obj, key) {
          return hasOwnProperty(obj, key);
        },
        'select': function (obj) {
          return selectFromObject(obj, arguments, true);
        },
        'reject': function (obj) {
          return selectFromObject(obj, arguments, false);
        }
      });
      buildTypeMethods();
      buildObjectExtend();
      buildObjectInstanceMethods(ObjectHashMethods, Hash);
      function uniqueRegExpFlags(flags) {
        return flags.split('').sort().join('').replace(/([gimy])\1+/g, '$1');
      }
      extend(regexp, false, false, {
        'escape': function (str) {
          return escapeRegExp(str);
        }
      });
      extend(regexp, true, false, {
        'getFlags': function () {
          return getRegExpFlags(this);
        },
        'setFlags': function (flags) {
          return regexp(this.source, flags);
        },
        'addFlag': function (flag) {
          return this.setFlags(getRegExpFlags(this, flag));
        },
        'removeFlag': function (flag) {
          return this.setFlags(getRegExpFlags(this).replace(flag, ''));
        }
      });
      function getAcronym(word) {
        var inflector = string.Inflector;
        var word = inflector && inflector.acronyms[word];
        if (isString(word)) {
          return word;
        }
      }
      function padString(str, p, left, right) {
        var padding = string(p);
        if (padding != p) {
          padding = '';
        }
        if (!isNumber(left))
          left = 1;
        if (!isNumber(right))
          right = 1;
        return padding.repeat(left) + str + padding.repeat(right);
      }
      function chr(num) {
        return string.fromCharCode(num);
      }
      var btoa, atob;
      function buildBase64(key) {
        if (this.btoa) {
          btoa = this.btoa;
          atob = this.atob;
          return;
        }
        var base64reg = /[^A-Za-z0-9\+\/\=]/g;
        btoa = function (str) {
          var output = '';
          var chr1, chr2, chr3;
          var enc1, enc2, enc3, enc4;
          var i = 0;
          do {
            chr1 = str.charCodeAt(i++);
            chr2 = str.charCodeAt(i++);
            chr3 = str.charCodeAt(i++);
            enc1 = chr1 >> 2;
            enc2 = (chr1 & 3) << 4 | chr2 >> 4;
            enc3 = (chr2 & 15) << 2 | chr3 >> 6;
            enc4 = chr3 & 63;
            if (isNaN(chr2)) {
              enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
              enc4 = 64;
            }
            output = output + key.charAt(enc1) + key.charAt(enc2) + key.charAt(enc3) + key.charAt(enc4);
            chr1 = chr2 = chr3 = '';
            enc1 = enc2 = enc3 = enc4 = '';
          } while (i < str.length);
          return output;
        };
        atob = function (input) {
          var output = '';
          var chr1, chr2, chr3;
          var enc1, enc2, enc3, enc4;
          var i = 0;
          if (input.match(base64reg)) {
            throw new Error('String contains invalid base64 characters');
          }
          input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
          do {
            enc1 = key.indexOf(input.charAt(i++));
            enc2 = key.indexOf(input.charAt(i++));
            enc3 = key.indexOf(input.charAt(i++));
            enc4 = key.indexOf(input.charAt(i++));
            chr1 = enc1 << 2 | enc2 >> 4;
            chr2 = (enc2 & 15) << 4 | enc3 >> 2;
            chr3 = (enc3 & 3) << 6 | enc4;
            output = output + chr(chr1);
            if (enc3 != 64) {
              output = output + chr(chr2);
            }
            if (enc4 != 64) {
              output = output + chr(chr3);
            }
            chr1 = chr2 = chr3 = '';
            enc1 = enc2 = enc3 = enc4 = '';
          } while (i < input.length);
          return output;
        };
      }
      extend(string, true, function (reg) {
        return isRegExp(reg) || arguments.length > 2;
      }, {
        'startsWith': function (reg, pos, c) {
          var str = this, source;
          if (pos)
            str = str.slice(pos);
          if (isUndefined(c))
            c = true;
          source = isRegExp(reg) ? reg.source.replace('^', '') : escapeRegExp(reg);
          return regexp('^' + source, c ? '' : 'i').test(str);
        },
        'endsWith': function (reg, pos, c) {
          var str = this, source;
          if (isDefined(pos))
            str = str.slice(0, pos);
          if (isUndefined(c))
            c = true;
          source = isRegExp(reg) ? reg.source.replace('$', '') : escapeRegExp(reg);
          return regexp(source + '$', c ? '' : 'i').test(str);
        }
      });
      extend(string, true, false, {
        'escapeRegExp': function () {
          return escapeRegExp(this);
        },
        'escapeURL': function (param) {
          return param ? encodeURIComponent(this) : encodeURI(this);
        },
        'unescapeURL': function (param) {
          return param ? decodeURI(this) : decodeURIComponent(this);
        },
        'escapeHTML': function () {
          return this.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&apos;').replace(/\//g, '&#x2f;');
        },
        'unescapeHTML': function () {
          return this.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"').replace(/&apos;/g, "'").replace(/&#x2f;/g, '/').replace(/&amp;/g, '&');
        },
        'encodeBase64': function () {
          return btoa(this);
        },
        'decodeBase64': function () {
          return atob(this);
        },
        'each': function (search, fn) {
          var match, i, len;
          if (isFunction(search)) {
            fn = search;
            search = /[\s\S]/g;
          } else if (!search) {
            search = /[\s\S]/g;
          } else if (isString(search)) {
            search = regexp(escapeRegExp(search), 'gi');
          } else if (isRegExp(search)) {
            search = regexp(search.source, getRegExpFlags(search, 'g'));
          }
          match = this.match(search) || [];
          if (fn) {
            for (i = 0, len = match.length; i < len; i++) {
              match[i] = fn.call(this, match[i], i, match) || match[i];
            }
          }
          return match;
        },
        'shift': function (n) {
          var result = '';
          n = n || 0;
          this.codes(function (c) {
            result += chr(c + n);
          });
          return result;
        },
        'codes': function (fn) {
          var codes = [], i, len;
          for (i = 0, len = this.length; i < len; i++) {
            var code = this.charCodeAt(i);
            codes.push(code);
            if (fn)
              fn.call(this, code, i);
          }
          return codes;
        },
        'chars': function (fn) {
          return this.each(fn);
        },
        'words': function (fn) {
          return this.trim().each(/\S+/g, fn);
        },
        'lines': function (fn) {
          return this.trim().each(/^.*$/gm, fn);
        },
        'paragraphs': function (fn) {
          var paragraphs = this.trim().split(/[\r\n]{2,}/);
          paragraphs = paragraphs.map(function (p) {
            if (fn)
              var s = fn.call(p);
            return s ? s : p;
          });
          return paragraphs;
        },
        'isBlank': function () {
          return this.trim().length === 0;
        },
        'has': function (find) {
          return this.search(isRegExp(find) ? find : escapeRegExp(find)) !== -1;
        },
        'add': function (str, index) {
          index = isUndefined(index) ? this.length : index;
          return this.slice(0, index) + str + this.slice(index);
        },
        'remove': function (f) {
          return this.replace(f, '');
        },
        'reverse': function () {
          return this.split('').reverse().join('');
        },
        'compact': function () {
          return this.trim().replace(/([\r\n\s　])+/g, function (match, whitespace) {
            return whitespace === '\u3000' ? whitespace : ' ';
          });
        },
        'at': function () {
          return entryAtIndex(this, arguments, true);
        },
        'from': function (num) {
          return this.slice(num);
        },
        'to': function (num) {
          if (isUndefined(num))
            num = this.length;
          return this.slice(0, num);
        },
        'dasherize': function () {
          return this.underscore().replace(/_/g, '-');
        },
        'underscore': function () {
          return this.replace(/[-\s]+/g, '_').replace(string.Inflector && string.Inflector.acronymRegExp, function (acronym, index) {
            return (index > 0 ? '_' : '') + acronym.toLowerCase();
          }).replace(/([A-Z\d]+)([A-Z][a-z])/g, '$1_$2').replace(/([a-z\d])([A-Z])/g, '$1_$2').toLowerCase();
        },
        'camelize': function (first) {
          return this.underscore().replace(/(^|_)([^_]+)/g, function (match, pre, word, index) {
            var acronym = getAcronym(word), capitalize = first !== false || index > 0;
            if (acronym)
              return capitalize ? acronym : acronym.toLowerCase();
            return capitalize ? word.capitalize() : word;
          });
        },
        'spacify': function () {
          return this.underscore().replace(/_/g, ' ');
        },
        'stripTags': function () {
          var str = this, args = arguments.length > 0 ? arguments : [''];
          flattenedArgs(args, function (tag) {
            str = str.replace(regexp('</?' + escapeRegExp(tag) + '[^<>]*>', 'gi'), '');
          });
          return str;
        },
        'removeTags': function () {
          var str = this, args = arguments.length > 0 ? arguments : ['\\S+'];
          flattenedArgs(args, function (t) {
            var reg = regexp('<(' + t + ')[^<>]*(?:\\/>|>.*?<\\/\\1>)', 'gi');
            str = str.replace(reg, '');
          });
          return str;
        },
        'truncate': function (length, split, from, ellipsis) {
          var pos, prepend = '', append = '', str = this.toString(), chars = '[' + getTrimmableCharacters() + ']+', space = '[^' + getTrimmableCharacters() + ']*', reg = regexp(chars + space + '$');
          ellipsis = isUndefined(ellipsis) ? '...' : string(ellipsis);
          if (str.length <= length) {
            return str;
          }
          switch (from) {
          case 'left':
            pos = str.length - length;
            prepend = ellipsis;
            str = str.slice(pos);
            reg = regexp('^' + space + chars);
            break;
          case 'middle':
            pos = floor(length / 2);
            append = ellipsis + str.slice(str.length - pos).trimLeft();
            str = str.slice(0, pos);
            break;
          default:
            pos = length;
            append = ellipsis;
            str = str.slice(0, pos);
          }
          if (split === false && this.slice(pos, pos + 1).match(/\S/)) {
            str = str.remove(reg);
          }
          return prepend + str + append;
        },
        'pad': function (padding, num) {
          return repeatString(num, padding) + this + repeatString(num, padding);
        },
        'padLeft': function (padding, num) {
          return repeatString(num, padding) + this;
        },
        'padRight': function (padding, num) {
          return this + repeatString(num, padding);
        },
        'first': function (num) {
          if (isUndefined(num))
            num = 1;
          return this.substr(0, num);
        },
        'last': function (num) {
          if (isUndefined(num))
            num = 1;
          var start = this.length - num < 0 ? 0 : this.length - num;
          return this.substr(start);
        },
        'repeat': function (num) {
          var result = '', str = this;
          if (!isNumber(num) || num < 1)
            return '';
          while (num) {
            if (num & 1) {
              result += str;
            }
            if (num >>= 1) {
              str += str;
            }
          }
          return result;
        },
        'toNumber': function (base) {
          var str = this.replace(/,/g, '');
          return str.match(/\./) ? parseFloat(str) : parseInt(str, base || 10);
        },
        'capitalize': function (all) {
          var lastResponded;
          return this.toLowerCase().replace(all ? /[\s\S]/g : /^\S/, function (lower) {
            var upper = lower.toUpperCase(), result;
            result = lastResponded ? lower : upper;
            lastResponded = upper !== lower;
            return result;
          });
        },
        'assign': function () {
          var assign = {};
          multiArgs(arguments, function (a, i) {
            if (isObject(a)) {
              simpleMerge(assign, a);
            } else {
              assign[i + 1] = a;
            }
          });
          return this.replace(/\{([^{]+?)\}/g, function (m, key) {
            return hasOwnProperty(assign, key) ? assign[key] : m;
          });
        },
        'namespace': function (context) {
          context = context || globalContext;
          iterateOverObject(this.split('.'), function (i, s) {
            return !!(context = context[s]);
          });
          return context;
        }
      });
      extend(string, true, false, { 'insert': string.prototype.add });
      buildBase64('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=');
      var plurals = [], singulars = [], uncountables = [], humans = [], acronyms = {}, Downcased, Inflector;
      function removeFromArray(arr, find) {
        var index = arr.indexOf(find);
        if (index > -1) {
          arr.splice(index, 1);
        }
      }
      function removeFromUncountablesAndAddTo(arr, rule, replacement) {
        if (isString(rule)) {
          removeFromArray(uncountables, rule);
        }
        removeFromArray(uncountables, replacement);
        arr.unshift({
          rule: rule,
          replacement: replacement
        });
      }
      function paramMatchesType(param, type) {
        return param == type || param == 'all' || !param;
      }
      function isUncountable(word) {
        return uncountables.some(function (uncountable) {
          return new regexp('\\b' + uncountable + '$', 'i').test(word);
        });
      }
      function inflect(word, pluralize) {
        word = isString(word) ? word.toString() : '';
        if (word.isBlank() || isUncountable(word)) {
          return word;
        } else {
          return runReplacements(word, pluralize ? plurals : singulars);
        }
      }
      function runReplacements(word, table) {
        iterateOverObject(table, function (i, inflection) {
          if (word.match(inflection.rule)) {
            word = word.replace(inflection.rule, inflection.replacement);
            return false;
          }
        });
        return word;
      }
      function capitalize(word) {
        return word.replace(/^\W*[a-z]/, function (w) {
          return w.toUpperCase();
        });
      }
      Inflector = {
        'acronym': function (word) {
          acronyms[word.toLowerCase()] = word;
          var all = object.keys(acronyms).map(function (key) {
              return acronyms[key];
            });
          Inflector.acronymRegExp = regexp(all.join('|'), 'g');
        },
        'plural': function (rule, replacement) {
          removeFromUncountablesAndAddTo(plurals, rule, replacement);
        },
        'singular': function (rule, replacement) {
          removeFromUncountablesAndAddTo(singulars, rule, replacement);
        },
        'irregular': function (singular, plural) {
          var singularFirst = singular.first(), singularRest = singular.from(1), pluralFirst = plural.first(), pluralRest = plural.from(1), pluralFirstUpper = pluralFirst.toUpperCase(), pluralFirstLower = pluralFirst.toLowerCase(), singularFirstUpper = singularFirst.toUpperCase(), singularFirstLower = singularFirst.toLowerCase();
          removeFromArray(uncountables, singular);
          removeFromArray(uncountables, plural);
          if (singularFirstUpper == pluralFirstUpper) {
            Inflector.plural(new regexp('({1}){2}$'.assign(singularFirst, singularRest), 'i'), '$1' + pluralRest);
            Inflector.plural(new regexp('({1}){2}$'.assign(pluralFirst, pluralRest), 'i'), '$1' + pluralRest);
            Inflector.singular(new regexp('({1}){2}$'.assign(pluralFirst, pluralRest), 'i'), '$1' + singularRest);
          } else {
            Inflector.plural(new regexp('{1}{2}$'.assign(singularFirstUpper, singularRest)), pluralFirstUpper + pluralRest);
            Inflector.plural(new regexp('{1}{2}$'.assign(singularFirstLower, singularRest)), pluralFirstLower + pluralRest);
            Inflector.plural(new regexp('{1}{2}$'.assign(pluralFirstUpper, pluralRest)), pluralFirstUpper + pluralRest);
            Inflector.plural(new regexp('{1}{2}$'.assign(pluralFirstLower, pluralRest)), pluralFirstLower + pluralRest);
            Inflector.singular(new regexp('{1}{2}$'.assign(pluralFirstUpper, pluralRest)), singularFirstUpper + singularRest);
            Inflector.singular(new regexp('{1}{2}$'.assign(pluralFirstLower, pluralRest)), singularFirstLower + singularRest);
          }
        },
        'uncountable': function (first) {
          var add = array.isArray(first) ? first : multiArgs(arguments);
          uncountables = uncountables.concat(add);
        },
        'human': function (rule, replacement) {
          humans.unshift({
            rule: rule,
            replacement: replacement
          });
        },
        'clear': function (type) {
          if (paramMatchesType(type, 'singulars'))
            singulars = [];
          if (paramMatchesType(type, 'plurals'))
            plurals = [];
          if (paramMatchesType(type, 'uncountables'))
            uncountables = [];
          if (paramMatchesType(type, 'humans'))
            humans = [];
          if (paramMatchesType(type, 'acronyms'))
            acronyms = {};
        }
      };
      Downcased = [
        'and',
        'or',
        'nor',
        'a',
        'an',
        'the',
        'so',
        'but',
        'to',
        'of',
        'at',
        'by',
        'from',
        'into',
        'on',
        'onto',
        'off',
        'out',
        'in',
        'over',
        'with',
        'for'
      ];
      Inflector.plural(/$/, 's');
      Inflector.plural(/s$/gi, 's');
      Inflector.plural(/(ax|test)is$/gi, '$1es');
      Inflector.plural(/(octop|vir|fung|foc|radi|alumn)(i|us)$/gi, '$1i');
      Inflector.plural(/(census|alias|status)$/gi, '$1es');
      Inflector.plural(/(bu)s$/gi, '$1ses');
      Inflector.plural(/(buffal|tomat)o$/gi, '$1oes');
      Inflector.plural(/([ti])um$/gi, '$1a');
      Inflector.plural(/([ti])a$/gi, '$1a');
      Inflector.plural(/sis$/gi, 'ses');
      Inflector.plural(/f+e?$/gi, 'ves');
      Inflector.plural(/(cuff|roof)$/gi, '$1s');
      Inflector.plural(/([ht]ive)$/gi, '$1s');
      Inflector.plural(/([^aeiouy]o)$/gi, '$1es');
      Inflector.plural(/([^aeiouy]|qu)y$/gi, '$1ies');
      Inflector.plural(/(x|ch|ss|sh)$/gi, '$1es');
      Inflector.plural(/(matr|vert|ind)(?:ix|ex)$/gi, '$1ices');
      Inflector.plural(/([ml])ouse$/gi, '$1ice');
      Inflector.plural(/([ml])ice$/gi, '$1ice');
      Inflector.plural(/^(ox)$/gi, '$1en');
      Inflector.plural(/^(oxen)$/gi, '$1');
      Inflector.plural(/(quiz)$/gi, '$1zes');
      Inflector.plural(/(phot|cant|hom|zer|pian|portic|pr|quart|kimon)o$/gi, '$1os');
      Inflector.plural(/(craft)$/gi, '$1');
      Inflector.plural(/([ft])[eo]{2}(th?)$/gi, '$1ee$2');
      Inflector.singular(/s$/gi, '');
      Inflector.singular(/([pst][aiu]s)$/gi, '$1');
      Inflector.singular(/([aeiouy])ss$/gi, '$1ss');
      Inflector.singular(/(n)ews$/gi, '$1ews');
      Inflector.singular(/([ti])a$/gi, '$1um');
      Inflector.singular(/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$/gi, '$1$2sis');
      Inflector.singular(/(^analy)ses$/gi, '$1sis');
      Inflector.singular(/(i)(f|ves)$/i, '$1fe');
      Inflector.singular(/([aeolr]f?)(f|ves)$/i, '$1f');
      Inflector.singular(/([ht]ive)s$/gi, '$1');
      Inflector.singular(/([^aeiouy]|qu)ies$/gi, '$1y');
      Inflector.singular(/(s)eries$/gi, '$1eries');
      Inflector.singular(/(m)ovies$/gi, '$1ovie');
      Inflector.singular(/(x|ch|ss|sh)es$/gi, '$1');
      Inflector.singular(/([ml])(ous|ic)e$/gi, '$1ouse');
      Inflector.singular(/(bus)(es)?$/gi, '$1');
      Inflector.singular(/(o)es$/gi, '$1');
      Inflector.singular(/(shoe)s?$/gi, '$1');
      Inflector.singular(/(cris|ax|test)[ie]s$/gi, '$1is');
      Inflector.singular(/(octop|vir|fung|foc|radi|alumn)(i|us)$/gi, '$1us');
      Inflector.singular(/(census|alias|status)(es)?$/gi, '$1');
      Inflector.singular(/^(ox)(en)?/gi, '$1');
      Inflector.singular(/(vert|ind)(ex|ices)$/gi, '$1ex');
      Inflector.singular(/(matr)(ix|ices)$/gi, '$1ix');
      Inflector.singular(/(quiz)(zes)?$/gi, '$1');
      Inflector.singular(/(database)s?$/gi, '$1');
      Inflector.singular(/ee(th?)$/gi, 'oo$1');
      Inflector.irregular('person', 'people');
      Inflector.irregular('man', 'men');
      Inflector.irregular('child', 'children');
      Inflector.irregular('sex', 'sexes');
      Inflector.irregular('move', 'moves');
      Inflector.irregular('save', 'saves');
      Inflector.irregular('save', 'saves');
      Inflector.irregular('cow', 'kine');
      Inflector.irregular('goose', 'geese');
      Inflector.irregular('zombie', 'zombies');
      Inflector.uncountable('equipment,information,rice,money,species,series,fish,sheep,jeans'.split(','));
      extend(string, true, false, {
        'pluralize': function () {
          return inflect(this, true);
        },
        'singularize': function () {
          return inflect(this, false);
        },
        'humanize': function () {
          var str = runReplacements(this, humans), acronym;
          str = str.replace(/_id$/g, '');
          str = str.replace(/(_)?([a-z\d]*)/gi, function (match, _, word) {
            acronym = hasOwnProperty(acronyms, word) ? acronyms[word] : null;
            return (_ ? ' ' : '') + (acronym || word.toLowerCase());
          });
          return capitalize(str);
        },
        'titleize': function () {
          var fullStopPunctuation = /[.:;!]$/, hasPunctuation, lastHadPunctuation, isFirstOrLast;
          return this.spacify().humanize().words(function (word, index, words) {
            hasPunctuation = fullStopPunctuation.test(word);
            isFirstOrLast = index == 0 || index == words.length - 1 || hasPunctuation || lastHadPunctuation;
            lastHadPunctuation = hasPunctuation;
            if (isFirstOrLast || Downcased.indexOf(word) === -1) {
              return capitalize(word);
            } else {
              return word;
            }
          }).join(' ');
        },
        'parameterize': function (separator) {
          var str = this;
          if (separator === undefined)
            separator = '-';
          if (str.normalize) {
            str = str.normalize();
          }
          str = str.replace(/[^a-z0-9\-_]+/gi, separator);
          if (separator) {
            str = str.replace(new regexp('^{sep}+|{sep}+$|({sep}){sep}+'.assign({ 'sep': escapeRegExp(separator) }), 'g'), '$1');
          }
          return encodeURI(str.toLowerCase());
        }
      });
      string.Inflector = Inflector;
      string.Inflector.acronyms = acronyms;
      var NormalizeMap, NormalizeReg = '', NormalizeSource;
      var unicodeScripts = [
          {
            names: ['Arabic'],
            source: '\u0600-\u06ff'
          },
          {
            names: ['Cyrillic'],
            source: '\u0400-\u04ff'
          },
          {
            names: ['Devanagari'],
            source: '\u0900-\u097f'
          },
          {
            names: ['Greek'],
            source: '\u0370-\u03ff'
          },
          {
            names: ['Hangul'],
            source: '\uac00-\ud7af\u1100-\u11ff'
          },
          {
            names: [
              'Han',
              'Kanji'
            ],
            source: '\u4e00-\u9fff\uf900-\ufaff'
          },
          {
            names: ['Hebrew'],
            source: '\u0590-\u05ff'
          },
          {
            names: ['Hiragana'],
            source: '\u3040-\u309f\u30fb-\u30fc'
          },
          {
            names: ['Kana'],
            source: '\u3040-\u30ff\uff61-\uff9f'
          },
          {
            names: ['Katakana'],
            source: '\u30a0-\u30ff\uff61-\uff9f'
          },
          {
            names: ['Latin'],
            source: '\x01-\x7f\x80-\xff\u0100-\u017f\u0180-\u024f'
          },
          {
            names: ['Thai'],
            source: '\u0e00-\u0e7f'
          }
        ];
      function buildUnicodeScripts() {
        unicodeScripts.forEach(function (s) {
          var is = regexp('^[' + s.source + '\\s]+$');
          var has = regexp('[' + s.source + ']');
          s.names.forEach(function (name) {
            defineProperty(string.prototype, 'is' + name, function () {
              return is.test(this.trim());
            });
            defineProperty(string.prototype, 'has' + name, function () {
              return has.test(this);
            });
          });
        });
      }
      var widthConversionRanges = [
          {
            type: 'a',
            shift: 65248,
            start: 65,
            end: 90
          },
          {
            type: 'a',
            shift: 65248,
            start: 97,
            end: 122
          },
          {
            type: 'n',
            shift: 65248,
            start: 48,
            end: 57
          },
          {
            type: 'p',
            shift: 65248,
            start: 33,
            end: 47
          },
          {
            type: 'p',
            shift: 65248,
            start: 58,
            end: 64
          },
          {
            type: 'p',
            shift: 65248,
            start: 91,
            end: 96
          },
          {
            type: 'p',
            shift: 65248,
            start: 123,
            end: 126
          }
        ];
      var WidthConversionTable;
      var allHankaku = /[\u0020-\u00A5]|[\uFF61-\uFF9F][ﾞﾟ]?/g;
      var allZenkaku = /[\u3000-\u301C]|[\u301A-\u30FC]|[\uFF01-\uFF60]|[\uFFE0-\uFFE6]/g;
      var hankakuPunctuation = '\uff61\uff64\uff62\uff63\xa5\xa2\xa3';
      var zenkakuPunctuation = '\u3002\u3001\u300c\u300d\uffe5\uffe0\uffe1';
      var voicedKatakana = /[カキクケコサシスセソタチツテトハヒフヘホ]/;
      var semiVoicedKatakana = /[ハヒフヘホヲ]/;
      var hankakuKatakana = '\uff71\uff72\uff73\uff74\uff75\uff67\uff68\uff69\uff6a\uff6b\uff76\uff77\uff78\uff79\uff7a\uff7b\uff7c\uff7d\uff7e\uff7f\uff80\uff81\uff82\uff6f\uff83\uff84\uff85\uff86\uff87\uff88\uff89\uff8a\uff8b\uff8c\uff8d\uff8e\uff8f\uff90\uff91\uff92\uff93\uff94\uff6c\uff95\uff6d\uff96\uff6e\uff97\uff98\uff99\uff9a\uff9b\uff9c\uff66\uff9d\uff70\uff65';
      var zenkakuKatakana = '\u30a2\u30a4\u30a6\u30a8\u30aa\u30a1\u30a3\u30a5\u30a7\u30a9\u30ab\u30ad\u30af\u30b1\u30b3\u30b5\u30b7\u30b9\u30bb\u30bd\u30bf\u30c1\u30c4\u30c3\u30c6\u30c8\u30ca\u30cb\u30cc\u30cd\u30ce\u30cf\u30d2\u30d5\u30d8\u30db\u30de\u30df\u30e0\u30e1\u30e2\u30e4\u30e3\u30e6\u30e5\u30e8\u30e7\u30e9\u30ea\u30eb\u30ec\u30ed\u30ef\u30f2\u30f3\u30fc\u30fb';
      function convertCharacterWidth(str, args, reg, type) {
        if (!WidthConversionTable) {
          buildWidthConversionTables();
        }
        var mode = multiArgs(args).join(''), table = WidthConversionTable[type];
        mode = mode.replace(/all/, '').replace(/(\w)lphabet|umbers?|atakana|paces?|unctuation/g, '$1');
        return str.replace(reg, function (c) {
          if (table[c] && (!mode || mode.has(table[c].type))) {
            return table[c].to;
          } else {
            return c;
          }
        });
      }
      function buildWidthConversionTables() {
        var hankaku;
        WidthConversionTable = {
          'zenkaku': {},
          'hankaku': {}
        };
        widthConversionRanges.forEach(function (r) {
          getRange(r.start, r.end, function (n) {
            setWidthConversion(r.type, chr(n), chr(n + r.shift));
          });
        });
        zenkakuKatakana.each(function (c, i) {
          hankaku = hankakuKatakana.charAt(i);
          setWidthConversion('k', hankaku, c);
          if (c.match(voicedKatakana)) {
            setWidthConversion('k', hankaku + '\uff9e', c.shift(1));
          }
          if (c.match(semiVoicedKatakana)) {
            setWidthConversion('k', hankaku + '\uff9f', c.shift(2));
          }
        });
        zenkakuPunctuation.each(function (c, i) {
          setWidthConversion('p', hankakuPunctuation.charAt(i), c);
        });
        setWidthConversion('k', '\uff73\uff9e', '\u30f4');
        setWidthConversion('k', '\uff66\uff9e', '\u30fa');
        setWidthConversion('s', ' ', '\u3000');
      }
      function setWidthConversion(type, half, full) {
        WidthConversionTable['zenkaku'][half] = {
          type: type,
          to: full
        };
        WidthConversionTable['hankaku'][full] = {
          type: type,
          to: half
        };
      }
      function buildNormalizeMap() {
        NormalizeMap = {};
        iterateOverObject(NormalizeSource, function (normalized, str) {
          str.split('').forEach(function (character) {
            NormalizeMap[character] = normalized;
          });
          NormalizeReg += str;
        });
        NormalizeReg = regexp('[' + NormalizeReg + ']', 'g');
      }
      NormalizeSource = {
        'A': 'A\u24b6\uff21\xc0\xc1\xc2\u1ea6\u1ea4\u1eaa\u1ea8\xc3\u0100\u0102\u1eb0\u1eae\u1eb4\u1eb2\u0226\u01e0\xc4\u01de\u1ea2\xc5\u01fa\u01cd\u0200\u0202\u1ea0\u1eac\u1eb6\u1e00\u0104\u023a\u2c6f',
        'B': 'B\u24b7\uff22\u1e02\u1e04\u1e06\u0243\u0182\u0181',
        'C': 'C\u24b8\uff23\u0106\u0108\u010a\u010c\xc7\u1e08\u0187\u023b\ua73e',
        'D': 'D\u24b9\uff24\u1e0a\u010e\u1e0c\u1e10\u1e12\u1e0e\u0110\u018b\u018a\u0189\ua779',
        'E': 'E\u24ba\uff25\xc8\xc9\xca\u1ec0\u1ebe\u1ec4\u1ec2\u1ebc\u0112\u1e14\u1e16\u0114\u0116\xcb\u1eba\u011a\u0204\u0206\u1eb8\u1ec6\u0228\u1e1c\u0118\u1e18\u1e1a\u0190\u018e',
        'F': 'F\u24bb\uff26\u1e1e\u0191\ua77b',
        'G': 'G\u24bc\uff27\u01f4\u011c\u1e20\u011e\u0120\u01e6\u0122\u01e4\u0193\ua7a0\ua77d\ua77e',
        'H': 'H\u24bd\uff28\u0124\u1e22\u1e26\u021e\u1e24\u1e28\u1e2a\u0126\u2c67\u2c75\ua78d',
        'I': 'I\u24be\uff29\xcc\xcd\xce\u0128\u012a\u012c\u0130\xcf\u1e2e\u1ec8\u01cf\u0208\u020a\u1eca\u012e\u1e2c\u0197',
        'J': 'J\u24bf\uff2a\u0134\u0248',
        'K': 'K\u24c0\uff2b\u1e30\u01e8\u1e32\u0136\u1e34\u0198\u2c69\ua740\ua742\ua744\ua7a2',
        'L': 'L\u24c1\uff2c\u013f\u0139\u013d\u1e36\u1e38\u013b\u1e3c\u1e3a\u0141\u023d\u2c62\u2c60\ua748\ua746\ua780',
        'M': 'M\u24c2\uff2d\u1e3e\u1e40\u1e42\u2c6e\u019c',
        'N': 'N\u24c3\uff2e\u01f8\u0143\xd1\u1e44\u0147\u1e46\u0145\u1e4a\u1e48\u0220\u019d\ua790\ua7a4',
        'O': 'O\u24c4\uff2f\xd2\xd3\xd4\u1ed2\u1ed0\u1ed6\u1ed4\xd5\u1e4c\u022c\u1e4e\u014c\u1e50\u1e52\u014e\u022e\u0230\xd6\u022a\u1ece\u0150\u01d1\u020c\u020e\u01a0\u1edc\u1eda\u1ee0\u1ede\u1ee2\u1ecc\u1ed8\u01ea\u01ec\xd8\u01fe\u0186\u019f\ua74a\ua74c',
        'P': 'P\u24c5\uff30\u1e54\u1e56\u01a4\u2c63\ua750\ua752\ua754',
        'Q': 'Q\u24c6\uff31\ua756\ua758\u024a',
        'R': 'R\u24c7\uff32\u0154\u1e58\u0158\u0210\u0212\u1e5a\u1e5c\u0156\u1e5e\u024c\u2c64\ua75a\ua7a6\ua782',
        'S': 'S\u24c8\uff33\u1e9e\u015a\u1e64\u015c\u1e60\u0160\u1e66\u1e62\u1e68\u0218\u015e\u2c7e\ua7a8\ua784',
        'T': 'T\u24c9\uff34\u1e6a\u0164\u1e6c\u021a\u0162\u1e70\u1e6e\u0166\u01ac\u01ae\u023e\ua786',
        'U': 'U\u24ca\uff35\xd9\xda\xdb\u0168\u1e78\u016a\u1e7a\u016c\xdc\u01db\u01d7\u01d5\u01d9\u1ee6\u016e\u0170\u01d3\u0214\u0216\u01af\u1eea\u1ee8\u1eee\u1eec\u1ef0\u1ee4\u1e72\u0172\u1e76\u1e74\u0244',
        'V': 'V\u24cb\uff36\u1e7c\u1e7e\u01b2\ua75e\u0245',
        'W': 'W\u24cc\uff37\u1e80\u1e82\u0174\u1e86\u1e84\u1e88\u2c72',
        'X': 'X\u24cd\uff38\u1e8a\u1e8c',
        'Y': 'Y\u24ce\uff39\u1ef2\xdd\u0176\u1ef8\u0232\u1e8e\u0178\u1ef6\u1ef4\u01b3\u024e\u1efe',
        'Z': 'Z\u24cf\uff3a\u0179\u1e90\u017b\u017d\u1e92\u1e94\u01b5\u0224\u2c7f\u2c6b\ua762',
        'a': 'a\u24d0\uff41\u1e9a\xe0\xe1\xe2\u1ea7\u1ea5\u1eab\u1ea9\xe3\u0101\u0103\u1eb1\u1eaf\u1eb5\u1eb3\u0227\u01e1\xe4\u01df\u1ea3\xe5\u01fb\u01ce\u0201\u0203\u1ea1\u1ead\u1eb7\u1e01\u0105\u2c65\u0250',
        'b': 'b\u24d1\uff42\u1e03\u1e05\u1e07\u0180\u0183\u0253',
        'c': 'c\u24d2\uff43\u0107\u0109\u010b\u010d\xe7\u1e09\u0188\u023c\ua73f\u2184',
        'd': 'd\u24d3\uff44\u1e0b\u010f\u1e0d\u1e11\u1e13\u1e0f\u0111\u018c\u0256\u0257\ua77a',
        'e': 'e\u24d4\uff45\xe8\xe9\xea\u1ec1\u1ebf\u1ec5\u1ec3\u1ebd\u0113\u1e15\u1e17\u0115\u0117\xeb\u1ebb\u011b\u0205\u0207\u1eb9\u1ec7\u0229\u1e1d\u0119\u1e19\u1e1b\u0247\u025b\u01dd',
        'f': 'f\u24d5\uff46\u1e1f\u0192\ua77c',
        'g': 'g\u24d6\uff47\u01f5\u011d\u1e21\u011f\u0121\u01e7\u0123\u01e5\u0260\ua7a1\u1d79\ua77f',
        'h': 'h\u24d7\uff48\u0125\u1e23\u1e27\u021f\u1e25\u1e29\u1e2b\u1e96\u0127\u2c68\u2c76\u0265',
        'i': 'i\u24d8\uff49\xec\xed\xee\u0129\u012b\u012d\xef\u1e2f\u1ec9\u01d0\u0209\u020b\u1ecb\u012f\u1e2d\u0268\u0131',
        'j': 'j\u24d9\uff4a\u0135\u01f0\u0249',
        'k': 'k\u24da\uff4b\u1e31\u01e9\u1e33\u0137\u1e35\u0199\u2c6a\ua741\ua743\ua745\ua7a3',
        'l': 'l\u24db\uff4c\u0140\u013a\u013e\u1e37\u1e39\u013c\u1e3d\u1e3b\u017f\u0142\u019a\u026b\u2c61\ua749\ua781\ua747',
        'm': 'm\u24dc\uff4d\u1e3f\u1e41\u1e43\u0271\u026f',
        'n': 'n\u24dd\uff4e\u01f9\u0144\xf1\u1e45\u0148\u1e47\u0146\u1e4b\u1e49\u019e\u0272\u0149\ua791\ua7a5',
        'o': 'o\u24de\uff4f\xf2\xf3\xf4\u1ed3\u1ed1\u1ed7\u1ed5\xf5\u1e4d\u022d\u1e4f\u014d\u1e51\u1e53\u014f\u022f\u0231\xf6\u022b\u1ecf\u0151\u01d2\u020d\u020f\u01a1\u1edd\u1edb\u1ee1\u1edf\u1ee3\u1ecd\u1ed9\u01eb\u01ed\xf8\u01ff\u0254\ua74b\ua74d\u0275',
        'p': 'p\u24df\uff50\u1e55\u1e57\u01a5\u1d7d\ua751\ua753\ua755',
        'q': 'q\u24e0\uff51\u024b\ua757\ua759',
        'r': 'r\u24e1\uff52\u0155\u1e59\u0159\u0211\u0213\u1e5b\u1e5d\u0157\u1e5f\u024d\u027d\ua75b\ua7a7\ua783',
        's': 's\u24e2\uff53\u015b\u1e65\u015d\u1e61\u0161\u1e67\u1e63\u1e69\u0219\u015f\u023f\ua7a9\ua785\u1e9b',
        't': 't\u24e3\uff54\u1e6b\u1e97\u0165\u1e6d\u021b\u0163\u1e71\u1e6f\u0167\u01ad\u0288\u2c66\ua787',
        'u': 'u\u24e4\uff55\xf9\xfa\xfb\u0169\u1e79\u016b\u1e7b\u016d\xfc\u01dc\u01d8\u01d6\u01da\u1ee7\u016f\u0171\u01d4\u0215\u0217\u01b0\u1eeb\u1ee9\u1eef\u1eed\u1ef1\u1ee5\u1e73\u0173\u1e77\u1e75\u0289',
        'v': 'v\u24e5\uff56\u1e7d\u1e7f\u028b\ua75f\u028c',
        'w': 'w\u24e6\uff57\u1e81\u1e83\u0175\u1e87\u1e85\u1e98\u1e89\u2c73',
        'x': 'x\u24e7\uff58\u1e8b\u1e8d',
        'y': 'y\u24e8\uff59\u1ef3\xfd\u0177\u1ef9\u0233\u1e8f\xff\u1ef7\u1e99\u1ef5\u01b4\u024f\u1eff',
        'z': 'z\u24e9\uff5a\u017a\u1e91\u017c\u017e\u1e93\u1e95\u01b6\u0225\u0240\u2c6c\ua763',
        'AA': '\ua732',
        'AE': '\xc6\u01fc\u01e2',
        'AO': '\ua734',
        'AU': '\ua736',
        'AV': '\ua738\ua73a',
        'AY': '\ua73c',
        'DZ': '\u01f1\u01c4',
        'Dz': '\u01f2\u01c5',
        'LJ': '\u01c7',
        'Lj': '\u01c8',
        'NJ': '\u01ca',
        'Nj': '\u01cb',
        'OI': '\u01a2',
        'OO': '\ua74e',
        'OU': '\u0222',
        'TZ': '\ua728',
        'VY': '\ua760',
        'aa': '\ua733',
        'ae': '\xe6\u01fd\u01e3',
        'ao': '\ua735',
        'au': '\ua737',
        'av': '\ua739\ua73b',
        'ay': '\ua73d',
        'dz': '\u01f3\u01c6',
        'hv': '\u0195',
        'lj': '\u01c9',
        'nj': '\u01cc',
        'oi': '\u01a3',
        'ou': '\u0223',
        'oo': '\ua74f',
        'ss': '\xdf',
        'tz': '\ua729',
        'vy': '\ua761'
      };
      extend(string, true, false, {
        'normalize': function () {
          if (!NormalizeMap) {
            buildNormalizeMap();
          }
          return this.replace(NormalizeReg, function (character) {
            return NormalizeMap[character];
          });
        },
        'hankaku': function () {
          return convertCharacterWidth(this, arguments, allZenkaku, 'hankaku');
        },
        'zenkaku': function () {
          return convertCharacterWidth(this, arguments, allHankaku, 'zenkaku');
        },
        'hiragana': function (all) {
          var str = this;
          if (all !== false) {
            str = str.zenkaku('k');
          }
          return str.replace(/[\u30A1-\u30F6]/g, function (c) {
            return c.shift(-96);
          });
        },
        'katakana': function () {
          return this.replace(/[\u3041-\u3096]/g, function (c) {
            return c.shift(96);
          });
        }
      });
      buildUnicodeScripts();
      Date.addLocale('da', {
        'plural': true,
        'months': 'januar,februar,marts,april,maj,juni,juli,august,september,oktober,november,december',
        'weekdays': 's\xf8ndag|sondag,mandag,tirsdag,onsdag,torsdag,fredag,l\xf8rdag|lordag',
        'units': 'millisekund:|er,sekund:|er,minut:|ter,tim:e|er,dag:|e,ug:e|er|en,m\xe5ned:|er|en+maaned:|er|en,\xe5r:||et+aar:||et',
        'numbers': 'en|et,to,tre,fire,fem,seks,syv,otte,ni,ti',
        'tokens': 'den,for',
        'articles': 'den',
        'short': 'd. {d}. {month} {yyyy}',
        'long': 'den {d}. {month} {yyyy} {H}:{mm}',
        'full': '{Weekday} den {d}. {month} {yyyy} {H}:{mm}:{ss}',
        'past': '{num} {unit} {sign}',
        'future': '{sign} {num} {unit}',
        'duration': '{num} {unit}',
        'ampm': 'am,pm',
        'modifiers': [
          {
            'name': 'day',
            'src': 'forg\xe5rs|i forg\xe5rs|forgaars|i forgaars',
            'value': -2
          },
          {
            'name': 'day',
            'src': 'i g\xe5r|ig\xe5r|i gaar|igaar',
            'value': -1
          },
          {
            'name': 'day',
            'src': 'i dag|idag',
            'value': 0
          },
          {
            'name': 'day',
            'src': 'i morgen|imorgen',
            'value': 1
          },
          {
            'name': 'day',
            'src': 'over morgon|overmorgen|i over morgen|i overmorgen|iovermorgen',
            'value': 2
          },
          {
            'name': 'sign',
            'src': 'siden',
            'value': -1
          },
          {
            'name': 'sign',
            'src': 'om',
            'value': 1
          },
          {
            'name': 'shift',
            'src': 'i sidste|sidste',
            'value': -1
          },
          {
            'name': 'shift',
            'src': 'denne',
            'value': 0
          },
          {
            'name': 'shift',
            'src': 'n\xe6ste|naeste',
            'value': 1
          }
        ],
        'dateParse': [
          '{num} {unit} {sign}',
          '{sign} {num} {unit}',
          '{1?} {num} {unit} {sign}',
          '{shift} {unit=5-7}'
        ],
        'timeParse': [
          '{0?} {weekday?} {date?} {month} {year}',
          '{date} {month}',
          '{shift} {weekday}'
        ]
      });
      Date.addLocale('de', {
        'plural': true,
        'capitalizeUnit': true,
        'months': 'Januar,Februar,M\xe4rz|Marz,April,Mai,Juni,Juli,August,September,Oktober,November,Dezember',
        'weekdays': 'Sonntag,Montag,Dienstag,Mittwoch,Donnerstag,Freitag,Samstag',
        'units': 'Millisekunde:|n,Sekunde:|n,Minute:|n,Stunde:|n,Tag:|en,Woche:|n,Monat:|en,Jahr:|en',
        'numbers': 'ein:|e|er|en|em,zwei,drei,vier,fuenf,sechs,sieben,acht,neun,zehn',
        'tokens': 'der',
        'short': '{d}. {Month} {yyyy}',
        'long': '{d}. {Month} {yyyy} {H}:{mm}',
        'full': '{Weekday} {d}. {Month} {yyyy} {H}:{mm}:{ss}',
        'past': '{sign} {num} {unit}',
        'future': '{sign} {num} {unit}',
        'duration': '{num} {unit}',
        'timeMarker': 'um',
        'ampm': 'am,pm',
        'modifiers': [
          {
            'name': 'day',
            'src': 'vorgestern',
            'value': -2
          },
          {
            'name': 'day',
            'src': 'gestern',
            'value': -1
          },
          {
            'name': 'day',
            'src': 'heute',
            'value': 0
          },
          {
            'name': 'day',
            'src': 'morgen',
            'value': 1
          },
          {
            'name': 'day',
            'src': '\xfcbermorgen|ubermorgen|uebermorgen',
            'value': 2
          },
          {
            'name': 'sign',
            'src': 'vor:|her',
            'value': -1
          },
          {
            'name': 'sign',
            'src': 'in',
            'value': 1
          },
          {
            'name': 'shift',
            'src': 'letzte:|r|n|s',
            'value': -1
          },
          {
            'name': 'shift',
            'src': 'n\xe4chste:|r|n|s+nachste:|r|n|s+naechste:|r|n|s+kommende:n|r',
            'value': 1
          }
        ],
        'dateParse': [
          '{sign} {num} {unit}',
          '{num} {unit} {sign}',
          '{shift} {unit=5-7}'
        ],
        'timeParse': [
          '{weekday?} {date?} {month} {year?}',
          '{shift} {weekday}'
        ]
      });
      Date.addLocale('es', {
        'plural': true,
        'months': 'enero,febrero,marzo,abril,mayo,junio,julio,agosto,septiembre,octubre,noviembre,diciembre',
        'weekdays': 'domingo,lunes,martes,mi\xe9rcoles|miercoles,jueves,viernes,s\xe1bado|sabado',
        'units': 'milisegundo:|s,segundo:|s,minuto:|s,hora:|s,d\xeda|d\xedas|dia|dias,semana:|s,mes:|es,a\xf1o|a\xf1os|ano|anos',
        'numbers': 'uno,dos,tres,cuatro,cinco,seis,siete,ocho,nueve,diez',
        'tokens': 'el,de',
        'short': '{d} {month} {yyyy}',
        'long': '{d} {month} {yyyy} {H}:{mm}',
        'full': '{Weekday} {d} {month} {yyyy} {H}:{mm}:{ss}',
        'past': '{sign} {num} {unit}',
        'future': '{num} {unit} {sign}',
        'duration': '{num} {unit}',
        'timeMarker': 'a las',
        'ampm': 'am,pm',
        'modifiers': [
          {
            'name': 'day',
            'src': 'anteayer',
            'value': -2
          },
          {
            'name': 'day',
            'src': 'ayer',
            'value': -1
          },
          {
            'name': 'day',
            'src': 'hoy',
            'value': 0
          },
          {
            'name': 'day',
            'src': 'ma\xf1ana|manana',
            'value': 1
          },
          {
            'name': 'sign',
            'src': 'hace',
            'value': -1
          },
          {
            'name': 'sign',
            'src': 'de ahora',
            'value': 1
          },
          {
            'name': 'shift',
            'src': 'pasad:o|a',
            'value': -1
          },
          {
            'name': 'shift',
            'src': 'pr\xf3ximo|pr\xf3xima|proximo|proxima',
            'value': 1
          }
        ],
        'dateParse': [
          '{sign} {num} {unit}',
          '{num} {unit} {sign}',
          '{0?} {unit=5-7} {shift}',
          '{0?} {shift} {unit=5-7}'
        ],
        'timeParse': [
          '{shift} {weekday}',
          '{weekday} {shift}',
          '{date?} {1?} {month} {1?} {year?}'
        ]
      });
      Date.addLocale('fi', {
        'plural': true,
        'timeMarker': 'kello',
        'ampm': ',',
        'months': 'tammikuu,helmikuu,maaliskuu,huhtikuu,toukokuu,kes\xe4kuu,hein\xe4kuu,elokuu,syyskuu,lokakuu,marraskuu,joulukuu',
        'weekdays': 'sunnuntai,maanantai,tiistai,keskiviikko,torstai,perjantai,lauantai',
        'units': 'millisekun:ti|tia|teja|tina|nin,sekun:ti|tia|teja|tina|nin,minuut:ti|tia|teja|tina|in,tun:ti|tia|teja|tina|nin,p\xe4iv:\xe4|\xe4\xe4|i\xe4|\xe4n\xe4|\xe4n,viik:ko|koa|koja|on|kona,kuukau:si|sia|tta|den|tena,vuo:si|sia|tta|den|tena',
        'numbers': 'yksi|ensimm\xe4inen,kaksi|toinen,kolm:e|as,nelj\xe4:s,vii:si|des,kuu:si|des,seitsem\xe4:n|s,kahdeksa:n|s,yhdeks\xe4:n|s,kymmene:n|s',
        'articles': '',
        'optionals': '',
        'short': '{d}. {month}ta {yyyy}',
        'long': '{d}. {month}ta {yyyy} kello {H}.{mm}',
        'full': '{Weekday}na {d}. {month}ta {yyyy} kello {H}.{mm}',
        'relative': function (num, unit, ms, format) {
          var units = this['units'];
          function numberWithUnit(mult) {
            return (num === 1 ? '' : num + ' ') + units[8 * mult + unit];
          }
          switch (format) {
          case 'duration':
            return numberWithUnit(0);
          case 'past':
            return numberWithUnit(num > 1 ? 1 : 0) + ' sitten';
          case 'future':
            return numberWithUnit(4) + ' p\xe4\xe4st\xe4';
          }
        },
        'modifiers': [
          {
            'name': 'day',
            'src': 'toissa p\xe4iv\xe4n\xe4|toissa p\xe4iv\xe4ist\xe4',
            'value': -2
          },
          {
            'name': 'day',
            'src': 'eilen|eilist\xe4',
            'value': -1
          },
          {
            'name': 'day',
            'src': 't\xe4n\xe4\xe4n',
            'value': 0
          },
          {
            'name': 'day',
            'src': 'huomenna|huomista',
            'value': 1
          },
          {
            'name': 'day',
            'src': 'ylihuomenna|ylihuomista',
            'value': 2
          },
          {
            'name': 'sign',
            'src': 'sitten|aiemmin',
            'value': -1
          },
          {
            'name': 'sign',
            'src': 'p\xe4\xe4st\xe4|kuluttua|my\xf6hemmin',
            'value': 1
          },
          {
            'name': 'edge',
            'src': 'viimeinen|viimeisen\xe4',
            'value': -2
          },
          {
            'name': 'edge',
            'src': 'lopussa',
            'value': -1
          },
          {
            'name': 'edge',
            'src': 'ensimm\xe4inen|ensimm\xe4isen\xe4',
            'value': 1
          },
          {
            'name': 'shift',
            'src': 'edellinen|edellisen\xe4|edelt\xe4v\xe4|edelt\xe4v\xe4n\xe4|viime|toissa',
            'value': -1
          },
          {
            'name': 'shift',
            'src': 't\xe4n\xe4|t\xe4m\xe4n',
            'value': 0
          },
          {
            'name': 'shift',
            'src': 'seuraava|seuraavana|tuleva|tulevana|ensi',
            'value': 1
          }
        ],
        'dateParse': [
          '{num} {unit} {sign}',
          '{sign} {num} {unit}',
          '{num} {unit=4-5} {sign} {day}',
          '{month} {year}',
          '{shift} {unit=5-7}'
        ],
        'timeParse': [
          '{0} {num}{1} {day} of {month} {year?}',
          '{weekday?} {month} {date}{1} {year?}',
          '{date} {month} {year}',
          '{shift} {weekday}',
          '{shift} week {weekday}',
          '{weekday} {2} {shift} week',
          '{0} {date}{1} of {month}',
          '{0}{month?} {date?}{1} of {shift} {unit=6-7}'
        ]
      });
      Date.addLocale('fr', {
        'plural': true,
        'months': 'janvier,f\xe9vrier|fevrier,mars,avril,mai,juin,juillet,ao\xfbt,septembre,octobre,novembre,d\xe9cembre|decembre',
        'weekdays': 'dimanche,lundi,mardi,mercredi,jeudi,vendredi,samedi',
        'units': 'milliseconde:|s,seconde:|s,minute:|s,heure:|s,jour:|s,semaine:|s,mois,an:|s|n\xe9e|nee',
        'numbers': 'un:|e,deux,trois,quatre,cinq,six,sept,huit,neuf,dix',
        'tokens': ["l'|la|le"],
        'short': '{d} {month} {yyyy}',
        'long': '{d} {month} {yyyy} {H}:{mm}',
        'full': '{Weekday} {d} {month} {yyyy} {H}:{mm}:{ss}',
        'past': '{sign} {num} {unit}',
        'future': '{sign} {num} {unit}',
        'duration': '{num} {unit}',
        'timeMarker': '\xe0',
        'ampm': 'am,pm',
        'modifiers': [
          {
            'name': 'day',
            'src': 'hier',
            'value': -1
          },
          {
            'name': 'day',
            'src': "aujourd'hui",
            'value': 0
          },
          {
            'name': 'day',
            'src': 'demain',
            'value': 1
          },
          {
            'name': 'sign',
            'src': 'il y a',
            'value': -1
          },
          {
            'name': 'sign',
            'src': "dans|d'ici",
            'value': 1
          },
          {
            'name': 'shift',
            'src': 'derni:\xe8r|er|\xe8re|ere',
            'value': -1
          },
          {
            'name': 'shift',
            'src': 'prochain:|e',
            'value': 1
          }
        ],
        'dateParse': [
          '{sign} {num} {unit}',
          '{sign} {num} {unit}',
          '{0?} {unit=5-7} {shift}'
        ],
        'timeParse': [
          '{weekday?} {0?} {date?} {month} {year?}',
          '{0?} {weekday} {shift}'
        ]
      });
      Date.addLocale('it', {
        'plural': true,
        'months': 'Gennaio,Febbraio,Marzo,Aprile,Maggio,Giugno,Luglio,Agosto,Settembre,Ottobre,Novembre,Dicembre',
        'weekdays': 'Domenica,Luned:\xec|i,Marted:\xec|i,Mercoled:\xec|i,Gioved:\xec|i,Venerd:\xec|i,Sabato',
        'units': 'millisecond:o|i,second:o|i,minut:o|i,or:a|e,giorn:o|i,settiman:a|e,mes:e|i,ann:o|i',
        'numbers': "un:|a|o|',due,tre,quattro,cinque,sei,sette,otto,nove,dieci",
        'tokens': "l'|la|il",
        'short': '{d} {Month} {yyyy}',
        'long': '{d} {Month} {yyyy} {H}:{mm}',
        'full': '{Weekday} {d} {Month} {yyyy} {H}:{mm}:{ss}',
        'past': '{num} {unit} {sign}',
        'future': '{num} {unit} {sign}',
        'duration': '{num} {unit}',
        'timeMarker': 'alle',
        'ampm': 'am,pm',
        'modifiers': [
          {
            'name': 'day',
            'src': 'ieri',
            'value': -1
          },
          {
            'name': 'day',
            'src': 'oggi',
            'value': 0
          },
          {
            'name': 'day',
            'src': 'domani',
            'value': 1
          },
          {
            'name': 'day',
            'src': 'dopodomani',
            'value': 2
          },
          {
            'name': 'sign',
            'src': 'fa',
            'value': -1
          },
          {
            'name': 'sign',
            'src': 'da adesso',
            'value': 1
          },
          {
            'name': 'shift',
            'src': 'scors:o|a',
            'value': -1
          },
          {
            'name': 'shift',
            'src': 'prossim:o|a',
            'value': 1
          }
        ],
        'dateParse': [
          '{num} {unit} {sign}',
          '{0?} {unit=5-7} {shift}',
          '{0?} {shift} {unit=5-7}'
        ],
        'timeParse': [
          '{weekday?} {date?} {month} {year?}',
          '{shift} {weekday}'
        ]
      });
      Date.addLocale('ja', {
        'monthSuffix': '\u6708',
        'weekdays': '\u65e5\u66dc\u65e5,\u6708\u66dc\u65e5,\u706b\u66dc\u65e5,\u6c34\u66dc\u65e5,\u6728\u66dc\u65e5,\u91d1\u66dc\u65e5,\u571f\u66dc\u65e5',
        'units': '\u30df\u30ea\u79d2,\u79d2,\u5206,\u6642\u9593,\u65e5,\u9031\u9593|\u9031,\u30f6\u6708|\u30f5\u6708|\u6708,\u5e74',
        'short': '{yyyy}\u5e74{M}\u6708{d}\u65e5',
        'long': '{yyyy}\u5e74{M}\u6708{d}\u65e5 {H}\u6642{mm}\u5206',
        'full': '{yyyy}\u5e74{M}\u6708{d}\u65e5 {Weekday} {H}\u6642{mm}\u5206{ss}\u79d2',
        'past': '{num}{unit}{sign}',
        'future': '{num}{unit}{sign}',
        'duration': '{num}{unit}',
        'timeSuffixes': '\u6642,\u5206,\u79d2',
        'ampm': '\u5348\u524d,\u5348\u5f8c',
        'modifiers': [
          {
            'name': 'day',
            'src': '\u4e00\u6628\u65e5',
            'value': -2
          },
          {
            'name': 'day',
            'src': '\u6628\u65e5',
            'value': -1
          },
          {
            'name': 'day',
            'src': '\u4eca\u65e5',
            'value': 0
          },
          {
            'name': 'day',
            'src': '\u660e\u65e5',
            'value': 1
          },
          {
            'name': 'day',
            'src': '\u660e\u5f8c\u65e5',
            'value': 2
          },
          {
            'name': 'sign',
            'src': '\u524d',
            'value': -1
          },
          {
            'name': 'sign',
            'src': '\u5f8c',
            'value': 1
          },
          {
            'name': 'shift',
            'src': '\u53bb|\u5148',
            'value': -1
          },
          {
            'name': 'shift',
            'src': '\u6765',
            'value': 1
          }
        ],
        'dateParse': ['{num}{unit}{sign}'],
        'timeParse': [
          '{shift}{unit=5-7}{weekday?}',
          '{year}\u5e74{month?}\u6708?{date?}\u65e5?',
          '{month}\u6708{date?}\u65e5?',
          '{date}\u65e5'
        ]
      });
      Date.addLocale('ko', {
        'digitDate': true,
        'monthSuffix': '\uc6d4',
        'weekdays': '\uc77c\uc694\uc77c,\uc6d4\uc694\uc77c,\ud654\uc694\uc77c,\uc218\uc694\uc77c,\ubaa9\uc694\uc77c,\uae08\uc694\uc77c,\ud1a0\uc694\uc77c',
        'units': '\ubc00\ub9ac\ucd08,\ucd08,\ubd84,\uc2dc\uac04,\uc77c,\uc8fc,\uac1c\uc6d4|\ub2ec,\ub144',
        'numbers': '\uc77c|\ud55c,\uc774,\uc0bc,\uc0ac,\uc624,\uc721,\uce60,\ud314,\uad6c,\uc2ed',
        'short': '{yyyy}\ub144{M}\uc6d4{d}\uc77c',
        'long': '{yyyy}\ub144{M}\uc6d4{d}\uc77c {H}\uc2dc{mm}\ubd84',
        'full': '{yyyy}\ub144{M}\uc6d4{d}\uc77c {Weekday} {H}\uc2dc{mm}\ubd84{ss}\ucd08',
        'past': '{num}{unit} {sign}',
        'future': '{num}{unit} {sign}',
        'duration': '{num}{unit}',
        'timeSuffixes': '\uc2dc,\ubd84,\ucd08',
        'ampm': '\uc624\uc804,\uc624\ud6c4',
        'modifiers': [
          {
            'name': 'day',
            'src': '\uadf8\uc800\uaed8',
            'value': -2
          },
          {
            'name': 'day',
            'src': '\uc5b4\uc81c',
            'value': -1
          },
          {
            'name': 'day',
            'src': '\uc624\ub298',
            'value': 0
          },
          {
            'name': 'day',
            'src': '\ub0b4\uc77c',
            'value': 1
          },
          {
            'name': 'day',
            'src': '\ubaa8\ub808',
            'value': 2
          },
          {
            'name': 'sign',
            'src': '\uc804',
            'value': -1
          },
          {
            'name': 'sign',
            'src': '\ud6c4',
            'value': 1
          },
          {
            'name': 'shift',
            'src': '\uc9c0\ub09c|\uc791',
            'value': -1
          },
          {
            'name': 'shift',
            'src': '\uc774\ubc88',
            'value': 0
          },
          {
            'name': 'shift',
            'src': '\ub2e4\uc74c|\ub0b4',
            'value': 1
          }
        ],
        'dateParse': [
          '{num}{unit} {sign}',
          '{shift?} {unit=5-7}'
        ],
        'timeParse': [
          '{shift} {unit=5?} {weekday}',
          '{year}\ub144{month?}\uc6d4?{date?}\uc77c?',
          '{month}\uc6d4{date?}\uc77c?',
          '{date}\uc77c'
        ]
      });
      Date.addLocale('nl', {
        'plural': true,
        'months': 'januari,februari,maart,april,mei,juni,juli,augustus,september,oktober,november,december',
        'weekdays': 'zondag|zo,maandag|ma,dinsdag|di,woensdag|woe|wo,donderdag|do,vrijdag|vrij|vr,zaterdag|za',
        'units': 'milliseconde:|n,seconde:|n,minu:ut|ten,uur,dag:|en,we:ek|ken,maand:|en,jaar',
        'numbers': 'een,twee,drie,vier,vijf,zes,zeven,acht,negen',
        'tokens': '',
        'short': '{d} {Month} {yyyy}',
        'long': '{d} {Month} {yyyy} {H}:{mm}',
        'full': '{Weekday} {d} {Month} {yyyy} {H}:{mm}:{ss}',
        'past': '{num} {unit} {sign}',
        'future': '{num} {unit} {sign}',
        'duration': '{num} {unit}',
        'timeMarker': "'s|om",
        'modifiers': [
          {
            'name': 'day',
            'src': 'gisteren',
            'value': -1
          },
          {
            'name': 'day',
            'src': 'vandaag',
            'value': 0
          },
          {
            'name': 'day',
            'src': 'morgen',
            'value': 1
          },
          {
            'name': 'day',
            'src': 'overmorgen',
            'value': 2
          },
          {
            'name': 'sign',
            'src': 'geleden',
            'value': -1
          },
          {
            'name': 'sign',
            'src': 'vanaf nu',
            'value': 1
          },
          {
            'name': 'shift',
            'src': 'laatste|vorige|afgelopen',
            'value': -1
          },
          {
            'name': 'shift',
            'src': 'volgend:|e',
            'value': 1
          }
        ],
        'dateParse': [
          '{num} {unit} {sign}',
          '{0?} {unit=5-7} {shift}',
          '{0?} {shift} {unit=5-7}'
        ],
        'timeParse': [
          '{weekday?} {date?} {month} {year?}',
          '{shift} {weekday}'
        ]
      });
      Date.addLocale('pl', {
        'plural': true,
        'months': 'Stycze\u0144|Stycznia,Luty|Lutego,Marzec|Marca,Kwiecie\u0144|Kwietnia,Maj|Maja,Czerwiec|Czerwca,Lipiec|Lipca,Sierpie\u0144|Sierpnia,Wrzesie\u0144|Wrze\u015bnia,Pa\u017adziernik|Pa\u017adziernika,Listopad|Listopada,Grudzie\u0144|Grudnia',
        'weekdays': 'Niedziela|Niedziel\u0119,Poniedzia\u0142ek,Wtorek,\u015arod:a|\u0119,Czwartek,Pi\u0105tek,Sobota|Sobot\u0119',
        'units': 'milisekund:a|y|,sekund:a|y|,minut:a|y|,godzin:a|y|,dzie\u0144|dni,tydzie\u0144|tygodnie|tygodni,miesi\u0105ce|miesi\u0105ce|miesi\u0119cy,rok|lata|lat',
        'numbers': 'jeden|jedn\u0105,dwa|dwie,trzy,cztery,pi\u0119\u0107,sze\u015b\u0107,siedem,osiem,dziewi\u0119\u0107,dziesi\u0119\u0107',
        'optionals': 'w|we,roku',
        'short': '{d} {Month} {yyyy}',
        'long': '{d} {Month} {yyyy} {H}:{mm}',
        'full': '{Weekday}, {d} {Month} {yyyy} {H}:{mm}:{ss}',
        'past': '{num} {unit} {sign}',
        'future': '{sign} {num} {unit}',
        'duration': '{num} {unit}',
        'timeMarker': 'o',
        'ampm': 'am,pm',
        'modifiers': [
          {
            'name': 'day',
            'src': 'przedwczoraj',
            'value': -2
          },
          {
            'name': 'day',
            'src': 'wczoraj',
            'value': -1
          },
          {
            'name': 'day',
            'src': 'dzisiaj|dzi\u015b',
            'value': 0
          },
          {
            'name': 'day',
            'src': 'jutro',
            'value': 1
          },
          {
            'name': 'day',
            'src': 'pojutrze',
            'value': 2
          },
          {
            'name': 'sign',
            'src': 'temu|przed',
            'value': -1
          },
          {
            'name': 'sign',
            'src': 'za',
            'value': 1
          },
          {
            'name': 'shift',
            'src': 'zesz\u0142y|zesz\u0142a|ostatni|ostatnia',
            'value': -1
          },
          {
            'name': 'shift',
            'src': 'nast\u0119pny|nast\u0119pna|nast\u0119pnego|przysz\u0142y|przysz\u0142a|przysz\u0142ego',
            'value': 1
          }
        ],
        'dateParse': [
          '{num} {unit} {sign}',
          '{sign} {num} {unit}',
          '{month} {year}',
          '{shift} {unit=5-7}',
          '{0} {shift?} {weekday}'
        ],
        'timeParse': [
          '{date} {month} {year?} {1}',
          '{0} {shift?} {weekday}'
        ]
      });
      Date.addLocale('pt', {
        'plural': true,
        'months': 'janeiro,fevereiro,mar\xe7o,abril,maio,junho,julho,agosto,setembro,outubro,novembro,dezembro',
        'weekdays': 'domingo,segunda-feira,ter\xe7a-feira,quarta-feira,quinta-feira,sexta-feira,s\xe1bado|sabado',
        'units': 'milisegundo:|s,segundo:|s,minuto:|s,hora:|s,dia:|s,semana:|s,m\xeas|m\xeases|mes|meses,ano:|s',
        'numbers': 'um,dois,tr\xeas|tres,quatro,cinco,seis,sete,oito,nove,dez,uma,duas',
        'tokens': 'a,de',
        'short': '{d} de {month} de {yyyy}',
        'long': '{d} de {month} de {yyyy} {H}:{mm}',
        'full': '{Weekday}, {d} de {month} de {yyyy} {H}:{mm}:{ss}',
        'past': '{num} {unit} {sign}',
        'future': '{sign} {num} {unit}',
        'duration': '{num} {unit}',
        'timeMarker': '\xe0s',
        'ampm': 'am,pm',
        'modifiers': [
          {
            'name': 'day',
            'src': 'anteontem',
            'value': -2
          },
          {
            'name': 'day',
            'src': 'ontem',
            'value': -1
          },
          {
            'name': 'day',
            'src': 'hoje',
            'value': 0
          },
          {
            'name': 'day',
            'src': 'amanh:\xe3|a',
            'value': 1
          },
          {
            'name': 'sign',
            'src': 'atr\xe1s|atras|h\xe1|ha',
            'value': -1
          },
          {
            'name': 'sign',
            'src': 'daqui a',
            'value': 1
          },
          {
            'name': 'shift',
            'src': 'passad:o|a',
            'value': -1
          },
          {
            'name': 'shift',
            'src': 'pr\xf3ximo|pr\xf3xima|proximo|proxima',
            'value': 1
          }
        ],
        'dateParse': [
          '{num} {unit} {sign}',
          '{sign} {num} {unit}',
          '{0?} {unit=5-7} {shift}',
          '{0?} {shift} {unit=5-7}'
        ],
        'timeParse': [
          '{date?} {1?} {month} {1?} {year?}',
          '{0?} {shift} {weekday}'
        ]
      });
      Date.addLocale('ru', {
        'months': '\u042f\u043d\u0432\u0430\u0440:\u044f|\u044c,\u0424\u0435\u0432\u0440\u0430\u043b:\u044f|\u044c,\u041c\u0430\u0440\u0442:\u0430|,\u0410\u043f\u0440\u0435\u043b:\u044f|\u044c,\u041c\u0430:\u044f|\u0439,\u0418\u044e\u043d:\u044f|\u044c,\u0418\u044e\u043b:\u044f|\u044c,\u0410\u0432\u0433\u0443\u0441\u0442:\u0430|,\u0421\u0435\u043d\u0442\u044f\u0431\u0440:\u044f|\u044c,\u041e\u043a\u0442\u044f\u0431\u0440:\u044f|\u044c,\u041d\u043e\u044f\u0431\u0440:\u044f|\u044c,\u0414\u0435\u043a\u0430\u0431\u0440:\u044f|\u044c',
        'weekdays': '\u0412\u043e\u0441\u043a\u0440\u0435\u0441\u0435\u043d\u044c\u0435,\u041f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a,\u0412\u0442\u043e\u0440\u043d\u0438\u043a,\u0421\u0440\u0435\u0434\u0430,\u0427\u0435\u0442\u0432\u0435\u0440\u0433,\u041f\u044f\u0442\u043d\u0438\u0446\u0430,\u0421\u0443\u0431\u0431\u043e\u0442\u0430',
        'units': '\u043c\u0438\u043b\u043b\u0438\u0441\u0435\u043a\u0443\u043d\u0434:\u0430|\u0443|\u044b|,\u0441\u0435\u043a\u0443\u043d\u0434:\u0430|\u0443|\u044b|,\u043c\u0438\u043d\u0443\u0442:\u0430|\u0443|\u044b|,\u0447\u0430\u0441:||\u0430|\u043e\u0432,\u0434\u0435\u043d\u044c|\u0434\u0435\u043d\u044c|\u0434\u043d\u044f|\u0434\u043d\u0435\u0439,\u043d\u0435\u0434\u0435\u043b:\u044f|\u044e|\u0438|\u044c|\u0435,\u043c\u0435\u0441\u044f\u0446:||\u0430|\u0435\u0432|\u0435,\u0433\u043e\u0434|\u0433\u043e\u0434|\u0433\u043e\u0434\u0430|\u043b\u0435\u0442|\u0433\u043e\u0434\u0443',
        'numbers': '\u043e\u0434:\u0438\u043d|\u043d\u0443,\u0434\u0432:\u0430|\u0435,\u0442\u0440\u0438,\u0447\u0435\u0442\u044b\u0440\u0435,\u043f\u044f\u0442\u044c,\u0448\u0435\u0441\u0442\u044c,\u0441\u0435\u043c\u044c,\u0432\u043e\u0441\u0435\u043c\u044c,\u0434\u0435\u0432\u044f\u0442\u044c,\u0434\u0435\u0441\u044f\u0442\u044c',
        'tokens': '\u0432|\u043d\u0430,\u0433\u043e\u0434\u0430',
        'short': '{d} {month} {yyyy} \u0433\u043e\u0434\u0430',
        'long': '{d} {month} {yyyy} \u0433\u043e\u0434\u0430 {H}:{mm}',
        'full': '{Weekday} {d} {month} {yyyy} \u0433\u043e\u0434\u0430 {H}:{mm}:{ss}',
        'relative': function (num, unit, ms, format) {
          var numberWithUnit, last = num.toString().slice(-1);
          switch (true) {
          case num >= 11 && num <= 15:
            mult = 3;
            break;
          case last == 1:
            mult = 1;
            break;
          case last >= 2 && last <= 4:
            mult = 2;
            break;
          default:
            mult = 3;
          }
          numberWithUnit = num + ' ' + this['units'][mult * 8 + unit];
          switch (format) {
          case 'duration':
            return numberWithUnit;
          case 'past':
            return numberWithUnit + ' \u043d\u0430\u0437\u0430\u0434';
          case 'future':
            return '\u0447\u0435\u0440\u0435\u0437 ' + numberWithUnit;
          }
        },
        'timeMarker': '\u0432',
        'ampm': ' \u0443\u0442\u0440\u0430, \u0432\u0435\u0447\u0435\u0440\u0430',
        'modifiers': [
          {
            'name': 'day',
            'src': '\u043f\u043e\u0437\u0430\u0432\u0447\u0435\u0440\u0430',
            'value': -2
          },
          {
            'name': 'day',
            'src': '\u0432\u0447\u0435\u0440\u0430',
            'value': -1
          },
          {
            'name': 'day',
            'src': '\u0441\u0435\u0433\u043e\u0434\u043d\u044f',
            'value': 0
          },
          {
            'name': 'day',
            'src': '\u0437\u0430\u0432\u0442\u0440\u0430',
            'value': 1
          },
          {
            'name': 'day',
            'src': '\u043f\u043e\u0441\u043b\u0435\u0437\u0430\u0432\u0442\u0440\u0430',
            'value': 2
          },
          {
            'name': 'sign',
            'src': '\u043d\u0430\u0437\u0430\u0434',
            'value': -1
          },
          {
            'name': 'sign',
            'src': '\u0447\u0435\u0440\u0435\u0437',
            'value': 1
          },
          {
            'name': 'shift',
            'src': '\u043f\u0440\u043e\u0448\u043b:\u044b\u0439|\u043e\u0439|\u043e\u043c',
            'value': -1
          },
          {
            'name': 'shift',
            'src': '\u0441\u043b\u0435\u0434\u0443\u044e\u0449:\u0438\u0439|\u0435\u0439|\u0435\u043c',
            'value': 1
          }
        ],
        'dateParse': [
          '{num} {unit} {sign}',
          '{sign} {num} {unit}',
          '{month} {year}',
          '{0?} {shift} {unit=5-7}'
        ],
        'timeParse': [
          '{date} {month} {year?} {1?}',
          '{0?} {shift} {weekday}'
        ]
      });
      Date.addLocale('sv', {
        'plural': true,
        'months': 'januari,februari,mars,april,maj,juni,juli,augusti,september,oktober,november,december',
        'weekdays': 's\xf6ndag|sondag,m\xe5ndag:|en+mandag:|en,tisdag,onsdag,torsdag,fredag,l\xf6rdag|lordag',
        'units': 'millisekund:|er,sekund:|er,minut:|er,timm:e|ar,dag:|ar,veck:a|or|an,m\xe5nad:|er|en+manad:|er|en,\xe5r:||et+ar:||et',
        'numbers': 'en|ett,tv\xe5|tva,tre,fyra,fem,sex,sju,\xe5tta|atta,nio,tio',
        'tokens': 'den,f\xf6r|for',
        'articles': 'den',
        'short': 'den {d} {month} {yyyy}',
        'long': 'den {d} {month} {yyyy} {H}:{mm}',
        'full': '{Weekday} den {d} {month} {yyyy} {H}:{mm}:{ss}',
        'past': '{num} {unit} {sign}',
        'future': '{sign} {num} {unit}',
        'duration': '{num} {unit}',
        'ampm': 'am,pm',
        'modifiers': [
          {
            'name': 'day',
            'src': 'f\xf6rrg\xe5r|i f\xf6rrg\xe5r|if\xf6rrg\xe5r|forrgar|i forrgar|iforrgar',
            'value': -2
          },
          {
            'name': 'day',
            'src': 'g\xe5r|i g\xe5r|ig\xe5r|gar|i gar|igar',
            'value': -1
          },
          {
            'name': 'day',
            'src': 'dag|i dag|idag',
            'value': 0
          },
          {
            'name': 'day',
            'src': 'morgon|i morgon|imorgon',
            'value': 1
          },
          {
            'name': 'day',
            'src': '\xf6ver morgon|\xf6vermorgon|i \xf6ver morgon|i \xf6vermorgon|i\xf6vermorgon|over morgon|overmorgon|i over morgon|i overmorgon|iovermorgon',
            'value': 2
          },
          {
            'name': 'sign',
            'src': 'sedan|sen',
            'value': -1
          },
          {
            'name': 'sign',
            'src': 'om',
            'value': 1
          },
          {
            'name': 'shift',
            'src': 'i f\xf6rra|f\xf6rra|i forra|forra',
            'value': -1
          },
          {
            'name': 'shift',
            'src': 'denna',
            'value': 0
          },
          {
            'name': 'shift',
            'src': 'n\xe4sta|nasta',
            'value': 1
          }
        ],
        'dateParse': [
          '{num} {unit} {sign}',
          '{sign} {num} {unit}',
          '{1?} {num} {unit} {sign}',
          '{shift} {unit=5-7}'
        ],
        'timeParse': [
          '{0?} {weekday?} {date?} {month} {year}',
          '{date} {month}',
          '{shift} {weekday}'
        ]
      });
      Date.addLocale('zh-CN', {
        'variant': true,
        'monthSuffix': '\u6708',
        'weekdays': '\u661f\u671f\u65e5|\u5468\u65e5,\u661f\u671f\u4e00|\u5468\u4e00,\u661f\u671f\u4e8c|\u5468\u4e8c,\u661f\u671f\u4e09|\u5468\u4e09,\u661f\u671f\u56db|\u5468\u56db,\u661f\u671f\u4e94|\u5468\u4e94,\u661f\u671f\u516d|\u5468\u516d',
        'units': '\u6beb\u79d2,\u79d2\u949f,\u5206\u949f,\u5c0f\u65f6,\u5929,\u4e2a\u661f\u671f|\u5468,\u4e2a\u6708,\u5e74',
        'tokens': '\u65e5|\u53f7',
        'short': '{yyyy}\u5e74{M}\u6708{d}\u65e5',
        'long': '{yyyy}\u5e74{M}\u6708{d}\u65e5 {tt}{h}:{mm}',
        'full': '{yyyy}\u5e74{M}\u6708{d}\u65e5 {weekday} {tt}{h}:{mm}:{ss}',
        'past': '{num}{unit}{sign}',
        'future': '{num}{unit}{sign}',
        'duration': '{num}{unit}',
        'timeSuffixes': '\u70b9|\u65f6,\u5206\u949f?,\u79d2',
        'ampm': '\u4e0a\u5348,\u4e0b\u5348',
        'modifiers': [
          {
            'name': 'day',
            'src': '\u524d\u5929',
            'value': -2
          },
          {
            'name': 'day',
            'src': '\u6628\u5929',
            'value': -1
          },
          {
            'name': 'day',
            'src': '\u4eca\u5929',
            'value': 0
          },
          {
            'name': 'day',
            'src': '\u660e\u5929',
            'value': 1
          },
          {
            'name': 'day',
            'src': '\u540e\u5929',
            'value': 2
          },
          {
            'name': 'sign',
            'src': '\u524d',
            'value': -1
          },
          {
            'name': 'sign',
            'src': '\u540e',
            'value': 1
          },
          {
            'name': 'shift',
            'src': '\u4e0a|\u53bb',
            'value': -1
          },
          {
            'name': 'shift',
            'src': '\u8fd9',
            'value': 0
          },
          {
            'name': 'shift',
            'src': '\u4e0b|\u660e',
            'value': 1
          }
        ],
        'dateParse': [
          '{num}{unit}{sign}',
          '{shift}{unit=5-7}'
        ],
        'timeParse': [
          '{shift}{weekday}',
          '{year}\u5e74{month?}\u6708?{date?}{0?}',
          '{month}\u6708{date?}{0?}',
          '{date}[\u65e5\u53f7]'
        ]
      });
      Date.addLocale('zh-TW', {
        'monthSuffix': '\u6708',
        'weekdays': '\u661f\u671f\u65e5|\u9031\u65e5,\u661f\u671f\u4e00|\u9031\u4e00,\u661f\u671f\u4e8c|\u9031\u4e8c,\u661f\u671f\u4e09|\u9031\u4e09,\u661f\u671f\u56db|\u9031\u56db,\u661f\u671f\u4e94|\u9031\u4e94,\u661f\u671f\u516d|\u9031\u516d',
        'units': '\u6beb\u79d2,\u79d2\u9418,\u5206\u9418,\u5c0f\u6642,\u5929,\u500b\u661f\u671f|\u9031,\u500b\u6708,\u5e74',
        'tokens': '\u65e5|\u865f',
        'short': '{yyyy}\u5e74{M}\u6708{d}\u65e5',
        'long': '{yyyy}\u5e74{M}\u6708{d}\u65e5 {tt}{h}:{mm}',
        'full': '{yyyy}\u5e74{M}\u6708{d}\u65e5 {Weekday} {tt}{h}:{mm}:{ss}',
        'past': '{num}{unit}{sign}',
        'future': '{num}{unit}{sign}',
        'duration': '{num}{unit}',
        'timeSuffixes': '\u9ede|\u6642,\u5206\u9418?,\u79d2',
        'ampm': '\u4e0a\u5348,\u4e0b\u5348',
        'modifiers': [
          {
            'name': 'day',
            'src': '\u524d\u5929',
            'value': -2
          },
          {
            'name': 'day',
            'src': '\u6628\u5929',
            'value': -1
          },
          {
            'name': 'day',
            'src': '\u4eca\u5929',
            'value': 0
          },
          {
            'name': 'day',
            'src': '\u660e\u5929',
            'value': 1
          },
          {
            'name': 'day',
            'src': '\u5f8c\u5929',
            'value': 2
          },
          {
            'name': 'sign',
            'src': '\u524d',
            'value': -1
          },
          {
            'name': 'sign',
            'src': '\u5f8c',
            'value': 1
          },
          {
            'name': 'shift',
            'src': '\u4e0a|\u53bb',
            'value': -1
          },
          {
            'name': 'shift',
            'src': '\u9019',
            'value': 0
          },
          {
            'name': 'shift',
            'src': '\u4e0b|\u660e',
            'value': 1
          }
        ],
        'dateParse': [
          '{num}{unit}{sign}',
          '{shift}{unit=5-7}'
        ],
        'timeParse': [
          '{shift}{weekday}',
          '{year}\u5e74{month?}\u6708?{date?}{0?}',
          '{month}\u6708{date?}{0?}',
          '{date}[\u65e5\u865f]'
        ]
      });
    }());
  });
  require.define('/ui\\Color.coffee', function (module, exports, __dirname, __filename) {
    var assert, Color, exports;
    module.exports = exports = Color = function (r, g, b, a) {
      if (null == a)
        a = 1;
      return new Float32Array([
        r,
        g,
        b,
        a
      ]);
    };
    Color.toRgbaString = function (color) {
      var convert;
      if (!(null != color))
        return null;
      convert = function (index) {
        return Math.round(color[index] * 255);
      };
      return 'rgba(' + convert(0) + ',' + convert(1) + ',' + convert(2) + ',' + color[3] + ')';
    };
    Color.aliceblue = Color(240 / 255, 248 / 255, 255 / 255);
    Color.antiquewhite = Color(250 / 255, 235 / 255, 215 / 255);
    Color.aqua = Color(0 / 255, 255 / 255, 255 / 255);
    Color.aquamarine = Color(127 / 255, 255 / 255, 212 / 255);
    Color.azure = Color(240 / 255, 255 / 255, 255 / 255);
    Color.beige = Color(245 / 255, 245 / 255, 220 / 255);
    Color.bisque = Color(255 / 255, 228 / 255, 196 / 255);
    Color.black = Color(0 / 255, 0 / 255, 0 / 255);
    Color.blanchedalmond = Color(255 / 255, 235 / 255, 205 / 255);
    Color.blue = Color(0 / 255, 0 / 255, 255 / 255);
    Color.blueviolet = Color(138 / 255, 43 / 255, 226 / 255);
    Color.brown = Color(165 / 255, 42 / 255, 42 / 255);
    Color.burlywood = Color(222 / 255, 184 / 255, 135 / 255);
    Color.cadetblue = Color(95 / 255, 158 / 255, 160 / 255);
    Color.chartreuse = Color(127 / 255, 255 / 255, 0 / 255);
    Color.chocolate = Color(210 / 255, 105 / 255, 30 / 255);
    Color.coral = Color(255 / 255, 127 / 255, 80 / 255);
    Color.cornflowerblue = Color(100 / 255, 149 / 255, 237 / 255);
    Color.cornsilk = Color(255 / 255, 248 / 255, 220 / 255);
    Color.crimson = Color(220 / 255, 20 / 255, 60 / 255);
    Color.cyan = Color(0 / 255, 255 / 255, 255 / 255);
    Color.darkblue = Color(0 / 255, 0 / 255, 139 / 255);
    Color.darkcyan = Color(0 / 255, 139 / 255, 139 / 255);
    Color.darkgoldenrod = Color(184 / 255, 134 / 255, 11 / 255);
    Color.darkgray = Color(169 / 255, 169 / 255, 169 / 255);
    Color.darkgreen = Color(0 / 255, 100 / 255, 0 / 255);
    Color.darkgrey = Color(169 / 255, 169 / 255, 169 / 255);
    Color.darkkhaki = Color(189 / 255, 183 / 255, 107 / 255);
    Color.darkmagenta = Color(139 / 255, 0 / 255, 139 / 255);
    Color.darkolivegreen = Color(85 / 255, 107 / 255, 47 / 255);
    Color.darkorange = Color(255 / 255, 140 / 255, 0 / 255);
    Color.darkorchid = Color(153 / 255, 50 / 255, 204 / 255);
    Color.darkred = Color(139 / 255, 0 / 255, 0 / 255);
    Color.darksalmon = Color(233 / 255, 150 / 255, 122 / 255);
    Color.darkseagreen = Color(143 / 255, 188 / 255, 143 / 255);
    Color.darkslateblue = Color(72 / 255, 61 / 255, 139 / 255);
    Color.darkslategray = Color(47 / 255, 79 / 255, 79 / 255);
    Color.darkslategrey = Color(47 / 255, 79 / 255, 79 / 255);
    Color.darkturquoise = Color(0 / 255, 206 / 255, 209 / 255);
    Color.darkviolet = Color(148 / 255, 0 / 255, 211 / 255);
    Color.deeppink = Color(255 / 255, 20 / 255, 147 / 255);
    Color.deepskyblue = Color(0 / 255, 191 / 255, 255 / 255);
    Color.dimgray = Color(105 / 255, 105 / 255, 105 / 255);
    Color.dimgrey = Color(105 / 255, 105 / 255, 105 / 255);
    Color.dodgerblue = Color(30 / 255, 144 / 255, 255 / 255);
    Color.firebrick = Color(178 / 255, 34 / 255, 34 / 255);
    Color.floralwhite = Color(255 / 255, 250 / 255, 240 / 255);
    Color.forestgreen = Color(34 / 255, 139 / 255, 34 / 255);
    Color.fuchsia = Color(255 / 255, 0 / 255, 255 / 255);
    Color.gainsboro = Color(220 / 255, 220 / 255, 220 / 255);
    Color.ghostwhite = Color(248 / 255, 248 / 255, 255 / 255);
    Color.gold = Color(255 / 255, 215 / 255, 0 / 255);
    Color.goldenrod = Color(218 / 255, 165 / 255, 32 / 255);
    Color.gray = Color(128 / 255, 128 / 255, 128 / 255);
    Color.green = Color(0 / 255, 128 / 255, 0 / 255);
    Color.greenyellow = Color(173 / 255, 255 / 255, 47 / 255);
    Color.grey = Color(128 / 255, 128 / 255, 128 / 255);
    Color.honeydew = Color(240 / 255, 255 / 255, 240 / 255);
    Color.hotpink = Color(255 / 255, 105 / 255, 180 / 255);
    Color.indianred = Color(205 / 255, 92 / 255, 92 / 255);
    Color.indigo = Color(75 / 255, 0 / 255, 130 / 255);
    Color.ivory = Color(255 / 255, 255 / 255, 240 / 255);
    Color.khaki = Color(240 / 255, 230 / 255, 140 / 255);
    Color.lavender = Color(230 / 255, 230 / 255, 250 / 255);
    Color.lavenderblush = Color(255 / 255, 240 / 255, 245 / 255);
    Color.lawngreen = Color(124 / 255, 252 / 255, 0 / 255);
    Color.lemonchiffon = Color(255 / 255, 250 / 255, 205 / 255);
    Color.lightblue = Color(173 / 255, 216 / 255, 230 / 255);
    Color.lightcoral = Color(240 / 255, 128 / 255, 128 / 255);
    Color.lightcyan = Color(224 / 255, 255 / 255, 255 / 255);
    Color.lightgoldenrodyellow = Color(250 / 255, 250 / 255, 210 / 255);
    Color.lightgray = Color(211 / 255, 211 / 255, 211 / 255);
    Color.lightgreen = Color(144 / 255, 238 / 255, 144 / 255);
    Color.lightgrey = Color(211 / 255, 211 / 255, 211 / 255);
    Color.lightpink = Color(255 / 255, 182 / 255, 193 / 255);
    Color.lightsalmon = Color(255 / 255, 160 / 255, 122 / 255);
    Color.lightseagreen = Color(32 / 255, 178 / 255, 170 / 255);
    Color.lightskyblue = Color(135 / 255, 206 / 255, 250 / 255);
    Color.lightslategray = Color(119 / 255, 136 / 255, 153 / 255);
    Color.lightslategrey = Color(119 / 255, 136 / 255, 153 / 255);
    Color.lightsteelblue = Color(176 / 255, 196 / 255, 222 / 255);
    Color.lightyellow = Color(255 / 255, 255 / 255, 224 / 255);
    Color.lime = Color(0 / 255, 255 / 255, 0 / 255);
    Color.limegreen = Color(50 / 255, 205 / 255, 50 / 255);
    Color.linen = Color(250 / 255, 240 / 255, 230 / 255);
    Color.magenta = Color(255 / 255, 0 / 255, 255 / 255);
    Color.maroon = Color(128 / 255, 0 / 255, 0 / 255);
    Color.mediumaquamarine = Color(102 / 255, 205 / 255, 170 / 255);
    Color.mediumblue = Color(0 / 255, 0 / 255, 205 / 255);
    Color.mediumorchid = Color(186 / 255, 85 / 255, 211 / 255);
    Color.mediumpurple = Color(147 / 255, 112 / 255, 219 / 255);
    Color.mediumseagreen = Color(60 / 255, 179 / 255, 113 / 255);
    Color.mediumslateblue = Color(123 / 255, 104 / 255, 238 / 255);
    Color.mediumspringgreen = Color(0 / 255, 250 / 255, 154 / 255);
    Color.mediumturquoise = Color(72 / 255, 209 / 255, 204 / 255);
    Color.mediumvioletred = Color(199 / 255, 21 / 255, 133 / 255);
    Color.midnightblue = Color(25 / 255, 25 / 255, 112 / 255);
    Color.mintcream = Color(245 / 255, 255 / 255, 250 / 255);
    Color.mistyrose = Color(255 / 255, 228 / 255, 225 / 255);
    Color.moccasin = Color(255 / 255, 228 / 255, 181 / 255);
    Color.navajowhite = Color(255 / 255, 222 / 255, 173 / 255);
    Color.navy = Color(0 / 255, 0 / 255, 128 / 255);
    Color.oldlace = Color(253 / 255, 245 / 255, 230 / 255);
    Color.olive = Color(128 / 255, 128 / 255, 0 / 255);
    Color.olivedrab = Color(107 / 255, 142 / 255, 35 / 255);
    Color.orange = Color(255 / 255, 165 / 255, 0 / 255);
    Color.orangered = Color(255 / 255, 69 / 255, 0 / 255);
    Color.orchid = Color(218 / 255, 112 / 255, 214 / 255);
    Color.palegoldenrod = Color(238 / 255, 232 / 255, 170 / 255);
    Color.palegreen = Color(152 / 255, 251 / 255, 152 / 255);
    Color.paleturquoise = Color(175 / 255, 238 / 255, 238 / 255);
    Color.palevioletred = Color(219 / 255, 112 / 255, 147 / 255);
    Color.papayawhip = Color(255 / 255, 239 / 255, 213 / 255);
    Color.peachpuff = Color(255 / 255, 218 / 255, 185 / 255);
    Color.peru = Color(205 / 255, 133 / 255, 63 / 255);
    Color.pink = Color(255 / 255, 192 / 255, 203 / 255);
    Color.plum = Color(221 / 255, 160 / 255, 221 / 255);
    Color.powderblue = Color(176 / 255, 224 / 255, 230 / 255);
    Color.purple = Color(128 / 255, 0 / 255, 128 / 255);
    Color.red = Color(255 / 255, 0 / 255, 0 / 255);
    Color.rosybrown = Color(188 / 255, 143 / 255, 143 / 255);
    Color.royalblue = Color(65 / 255, 105 / 255, 225 / 255);
    Color.saddlebrown = Color(139 / 255, 69 / 255, 19 / 255);
    Color.salmon = Color(250 / 255, 128 / 255, 114 / 255);
    Color.sandybrown = Color(244 / 255, 164 / 255, 96 / 255);
    Color.seagreen = Color(46 / 255, 139 / 255, 87 / 255);
    Color.seashell = Color(255 / 255, 245 / 255, 238 / 255);
    Color.sienna = Color(160 / 255, 82 / 255, 45 / 255);
    Color.silver = Color(192 / 255, 192 / 255, 192 / 255);
    Color.skyblue = Color(135 / 255, 206 / 255, 235 / 255);
    Color.slateblue = Color(106 / 255, 90 / 255, 205 / 255);
    Color.slategray = Color(112 / 255, 128 / 255, 144 / 255);
    Color.slategrey = Color(112 / 255, 128 / 255, 144 / 255);
    Color.snow = Color(255 / 255, 250 / 255, 250 / 255);
    Color.springgreen = Color(0 / 255, 255 / 255, 127 / 255);
    Color.steelblue = Color(70 / 255, 130 / 255, 180 / 255);
    Color.tan = Color(210 / 255, 180 / 255, 140 / 255);
    Color.teal = Color(0 / 255, 128 / 255, 128 / 255);
    Color.thistle = Color(216 / 255, 191 / 255, 216 / 255);
    Color.tomato = Color(255 / 255, 99 / 255, 71 / 255);
    Color.turquoise = Color(64 / 255, 224 / 255, 208 / 255);
    Color.violet = Color(238 / 255, 130 / 255, 238 / 255);
    Color.wheat = Color(245 / 255, 222 / 255, 179 / 255);
    Color.white = Color(255 / 255, 255 / 255, 255 / 255);
    Color.whitesmoke = Color(245 / 255, 245 / 255, 245 / 255);
    Color.yellow = Color(255 / 255, 255 / 255, 0 / 255);
    Color.yellowgreen = Color(154 / 255, 205 / 255, 50 / 255);
    if (typeof describe === 'function') {
      assert = require('assert', module);
      describe('glass.ui.Color', function () {
        return it('toRgbaString(Color.white) should yield rgba(255,255,255,1)', function () {
          return assert.equal(Color.toRgbaString(Color.white), 'rgba(255,255,255,1)');
        });
      });
    }
  });
  require.define('/patch.coffee', function (module, exports, __dirname, __filename) {
    var apply, assert, canWatch, combine, exports, watch;
    require('/global.coffee', module);
    apply = function (target, values, deleteUndefined) {
      var key, patchedValue, value;
      if (null == deleteUndefined)
        deleteUndefined = true;
      if (!((null != values ? values.constructor : void 0) === Object))
        return Object.clone(values, true);
      if ((null != target ? target.constructor : void 0) !== Object)
        target = {};
      for (key in values) {
        value = values[key];
        patchedValue = apply(target[key], value, deleteUndefined);
        if (value === void 0 && deleteUndefined) {
          delete target[key];
        } else {
          target[key] = patchedValue;
        }
      }
      return target;
    };
    combine = function (patch1, patch2) {
      return apply(patch1, patch2, false);
    };
    canWatch = function (object) {
      return null != object && typeof object === 'object';
    };
    watch = function (object, handler, callInitial) {
      var pendingPatch, processPatch, subWatchers, watcher;
      if (null == callInitial)
        callInitial = true;
      if (!canWatch(object))
        throw new Error('Cannot watch: ' + object);
      subWatchers = {};
      pendingPatch = null;
      processPatch = function (patchValues) {
        var name, value;
        for (name in patchValues) {
          if ('function' === typeof subWatchers[name])
            subWatchers[name]();
          value = object[name];
          if (canWatch(value))
            (function () {
              var saveName, subHandler;
              saveName = name;
              subHandler = function (patch) {
                var basePatch;
                basePatch = {};
                basePatch[saveName] = patch;
                if (null != pendingPatch) {
                  return pendingPatch = combine(pendingPatch, basePatch);
                } else {
                  return handler(basePatch);
                }
              };
              return subWatchers[saveName] = watch(value, subHandler, false);
            }());
        }
      };
      watcher = function (changes) {
        var change;
        pendingPatch = {};
        for (var i$ = 0, length$ = changes.length; i$ < length$; ++i$) {
          change = changes[i$];
          pendingPatch[change.name] = object[change.name];
        }
        processPatch(pendingPatch);
        return process.nextTick(function () {
          handler(pendingPatch);
          return pendingPatch = null;
        });
      };
      processPatch(object);
      Object.observe(object, watcher);
      return function () {
        Object.unobserve(object, watcher);
        return function (accum$) {
          var key, value;
          for (key in subWatchers) {
            value = subWatchers[key];
            accum$.push(value());
          }
          return accum$;
        }.call(this, []);
      };
    };
    module.exports = exports = {
      apply: apply,
      combine: combine,
      watch: watch
    };
    if (typeof describe === 'function') {
      assert = require('assert', module);
      describe('glass.patch', function () {
        return it('should work', function (done) {
          var source, target, unwatch;
          source = {
            name: 'Kris',
            age: 41,
            children: {
              Sadera: {
                grandchildren: {
                  One: 1,
                  Two: 2
                }
              },
              Orion: {}
            }
          };
          target = Object.clone(source);
          unwatch = watch(source, function (patch) {
            target = apply(target, patch);
            assert(Object.equal(source, target));
            done();
            return unwatch();
          });
          source.name = 'Fred';
          source.children.Orion = {
            a: 1,
            b: 2
          };
          source.children.Orion.c = 12;
          return source.children.Sadera.grandchildren.three = 3;
        });
      });
    }
  });
  require.define('/global.coffee', function (module, exports, __dirname, __filename) {
    var exports, global;
    require('/..\\node_modules\\sugar\\release\\sugar-full.development.js', module);
    global = function () {
      return this;
    }();
    if (null != global.global)
      global.global;
    else
      global.global = global;
    module.exports = exports = global;
  });
  require.define('/Enum.coffee', function (module, exports, __dirname, __filename) {
    var Enum;
    module.exports = Enum = function () {
      function Enum(param$, param$1) {
        this.name = param$;
        this.value = param$1;
      }
      Enum.prototype.toString = function () {
        return this.name;
      };
      Enum.prototype.valueOf = function () {
        return this.value;
      };
      return Enum;
    }();
  });
  require.define('/Component.coffee', function (module, exports, __dirname, __filename) {
    var assert, Component, dispose, extend, generateId, getBaseDefiningClass, getUnderrideName, glass_Component, initialize, isPrimitive, properties, underride;
    require('/global.coffee', module);
    generateId = function (parent, type) {
      var count, counts, name;
      name = type.name;
      if (!(null != name))
        throw new Error('type did not have a name: ' + type);
      counts = null != parent._Component_generateId_counts ? parent._Component_generateId_counts : parent._Component_generateId_counts = {};
      count = null != counts[name] ? counts[name] : counts[name] = 0;
      count++;
      counts[name] = count;
      return '' + name + '_' + count;
    };
    module.exports = Component = glass_Component = function () {
      function glass_Component(properties) {
        this.initialize(properties);
        this;
      }
      return glass_Component;
    }();
    isPrimitive = function (object) {
      return Object.isNumber(object) || Object.isBoolean(object) || Object.isString(object);
    };
    Component.normalizeProperties = function (properties, definingClass) {
      var name, property;
      if (null == properties)
        properties = {};
      for (name in properties) {
        property = properties[name];
        if (Object.isFunction(property)) {
          property = {
            writable: false,
            value: property
          };
        } else if (!(null != property) || isPrimitive(property) || Object.isArray(property)) {
          property = { value: property };
        }
        if (!(null != property.get) && !(null != property.set) && !property.hasOwnProperty('value'))
          property.value = null;
        if (property.hasOwnProperty('value'))
          if (null != property.writable)
            property.writable;
          else
            property.writable = true;
        if (Object.isFunction(property.value))
          if (null != property.value.id)
            property.value.id;
          else
            property.value.id = name;
        if (null != definingClass) {
          if (null != property.definingClass)
            property.definingClass;
          else
            property.definingClass = definingClass;
          if (Object.isFunction(property.value))
            if (null != property.value.definingClass)
              property.value.definingClass;
            else
              property.value.definingClass = definingClass;
        }
        properties[name] = property;
      }
      return properties;
    };
    Component.defineProperties = function (object, properties, definingClass) {
      properties = Component.normalizeProperties(properties, definingClass);
      Object.defineProperties(object, properties);
      return properties;
    };
    Component.disposeProperties = function (object) {
      var key, value;
      for (key in object) {
        value = object[key];
        if ('undefined' !== typeof value && null != value && value.parent === object && Object.isFunction(value.dispose))
          value.dispose();
      }
    };
    Component.id = 'glass.Component';
    Component.toString = function () {
      return this.id;
    };
    Component.valueOf = function () {
      return null != this.value ? this.value : this.id;
    };
    properties = {
      id: {
        get: function () {
          return this._id;
        },
        set: function (value) {
          if (null != this._id)
            throw new Error('id has already been set to ' + this._id);
          return this._id = value;
        }
      },
      parent: {
        get: function () {
          return this._parent;
        },
        set: function (value) {
          if (null != this._parent)
            throw new Error('parent has already been set to ' + this._parent);
          return this._parent = value;
        }
      },
      inner: {
        description: 'Calls the subclass defined function if present.',
        value: function (fn, args) {
          var innerName;
          args = 2 <= arguments.length ? [].slice.call(arguments, 1) : [];
          innerName = null != fn.innerName ? fn.innerName : fn.innerName = getUnderrideName(fn.definingClass, fn.id);
          if (null != this[innerName])
            return this[innerName].apply(this, args);
        }
      },
      initialize: initialize = function (properties) {
        var id, key, parent, value;
        if (!(null != properties))
          throw new Error('properties object is required ' + properties);
        if (!(null != properties.parent))
          throw new Error('parent is required');
        parent = properties.parent;
        id = null != properties.id ? properties.id : properties.id = generateId(parent, this.constructor);
        parent[id] = this;
        for (key in properties) {
          value = properties[key];
          this[key] = value;
        }
        return this.inner(initialize);
      },
      dispose: dispose = function () {
        if (null != this._parent) {
          Component.disposeProperties(this);
          if (this._parent === global) {
            delete this._parent[this.id];
          } else {
            this._parent[this.id] = null;
          }
          this._parent = null;
          this.inner(dispose);
        }
      },
      disposed: {
        get: function () {
          return this._parent === null;
        }
      },
      get: function (id, parsed) {
        var colon, factory, isClass, throwError, type, value;
        if (!(null != id))
          throw new Error('id is required');
        value = this[id];
        if (null != value)
          if (value.disposed === true) {
            value = null;
          } else {
            return value;
          }
        throwError = !(null != parsed);
        if (!(null != parsed)) {
          colon = id.indexOf(':');
          if (colon > 0) {
            parsed = {
              type: id.substring(0, colon),
              properties: JSON.parse(id.substring(colon + 1))
            };
          } else {
            parsed = false;
          }
        }
        if (parsed) {
          type = parsed.type;
          properties = parsed.properties;
          factory = this[type];
          if (Object.isFunction(factory)) {
            properties.parent = this;
            isClass = null != factory.properties;
            if (isClass) {
              value = new factory(properties);
            } else {
              value = factory(properties);
            }
          }
        }
        if (null != value)
          value;
        else
          value = 'function' === typeof this.parent.get ? this.parent.get(id, parsed) : void 0;
        if (null != value) {
          this[id] = value;
        } else if (throwError) {
          throw new Error('Component not found: ' + id);
        }
        return value;
      }
    };
    Component.properties = Component.defineProperties(Component.prototype, properties, Component);
    getUnderrideName = function (baseDefiningClass, name) {
      return '' + baseDefiningClass.name + '_subclass_' + name;
    };
    getBaseDefiningClass = function (classDefinition, properties, name) {
      var baseDefiningClass, baseFunction, baseProperty, callsUnderride, underrideName, underrideProperty;
      baseProperty = properties[name];
      while (true) {
        baseFunction = baseProperty.value;
        baseDefiningClass = baseProperty.definingClass;
        underrideName = getUnderrideName(baseDefiningClass, name);
        callsUnderride = baseFunction.toString().has(underrideName) || baseFunction.toString().has(/\binner\b/);
        if (!callsUnderride)
          throw new Error('' + classDefinition.name + '.' + name + ' cannot be defined because ' + baseDefiningClass.name + '.' + name + ' does not call ' + underrideName + '.');
        underrideProperty = properties[underrideName];
        if (null != underrideProperty) {
          baseProperty = underrideProperty;
        } else {
          return baseDefiningClass;
        }
      }
    };
    underride = function (classDefinition, properties, rootDefiningClass, name, fn) {
      var baseDefiningClass;
      baseDefiningClass = getBaseDefiningClass(classDefinition, properties, name);
      properties[getUnderrideName(baseDefiningClass, name)] = fn;
    };
    extend = function (baseClass, subClassDefinition) {
      var baseProperty, name, property, prototype, subClass, subProperties;
      if (!Object.isString(null != subClassDefinition ? subClassDefinition.id : void 0))
        throw new Error('missing id property');
      subClassDefinition.name = subClassDefinition.id.replace(/[\.\/]/g, '_');
      subClass = eval('\r\n(function ' + subClassDefinition.name + '(properties) {\r\n    this.initialize(properties);\r\n})');
      subProperties = subClassDefinition.properties = Component.normalizeProperties(subClassDefinition.properties, subClass);
      prototype = subClass.prototype;
      properties = Object.clone(baseClass.properties);
      for (name in subProperties) {
        property = subProperties[name];
        baseProperty = properties[name];
        if (Object.isFunction(null != baseProperty ? baseProperty.value : void 0)) {
          if (!Object.isFunction(property.value))
            throw new Error('Functions can only be overridden with other functions: ' + property.value);
          underride(subClassDefinition, properties, baseProperty.definingClass, name, property.value);
        } else {
          properties[name] = property;
        }
      }
      subClassDefinition.properties = properties;
      Object.merge(subClass, subClassDefinition);
      Component.defineProperties(prototype, properties, subClass);
      subClass.extend = function (subClassDefinition) {
        return extend(subClass, subClassDefinition);
      };
      return subClass;
    };
    Component.extend = function (subClassDefinition) {
      return extend(Component, subClassDefinition);
    };
    if (typeof describe === 'function') {
      assert = require('assert', module);
      describe('glass.Component', function () {
        it('should have an id', function () {
          return assert(Object.isString(Component.id));
        });
        it("its toString should return it's id", function () {
          return assert.equal(Component.toString(), 'glass.Component');
        });
        it('should have a name', function () {
          return assert.equal(Component.name, 'glass_Component');
        });
        describe('#dispose', function () {
          it('should mark self disposed', function () {
            var a;
            a = new Component({ parent: global });
            a.dispose();
            return assert(a.disposed);
          });
          it('should dispose of children', function () {
            var a, b;
            a = new Component({ parent: global });
            b = new Component({ parent: a });
            a.dispose();
            return assert(b.disposed);
          });
          return it('should remove property from parent', function () {
            var a;
            a = new Component({ parent: global });
            a.dispose();
            return assert(!(null != global[a.id]));
          });
        });
        describe('#defineProperties', function () {
          return it('should allow primitive values', function () {
            var object;
            object = {};
            Component.defineProperties(object, {
              f: function () {
                return 'function';
              },
              i: 2,
              b: true,
              a: [],
              s: 'hello'
            });
            assert(Object.isFunction(object.f));
            assert.equal(object.f(), 'function');
            assert.equal(object.i, 2);
            assert.equal(object.b, true);
            assert(Object.equal(object.a, []));
            return assert.equal(object.s, 'hello');
          });
        });
        describe('#Constructor', function () {
          it('should set itself as property on parent', function () {
            var a;
            a = new Component({ parent: global });
            assert(Object.isString(a.id));
            assert.equal(global[a.id], a);
            return a.dispose();
          });
          it('should require parent', function () {
            return assert.throws(function () {
              var a;
              return a = new Component;
            });
          });
          return it('should generate a missing id', function () {
            var a;
            a = new Component({ parent: global });
            assert(Object.isString(a.id));
            return a.dispose();
          });
        });
        describe('#get', function () {
          it('should throw exception if instance not found', function () {
            var a;
            a = new Component({ parent: global });
            assert.throws(function () {
              return a.get('foo');
            });
            return a.dispose();
          });
          return it('should create instances with factory', function () {
            var a, b, c;
            a = new Component({ parent: global });
            b = new Component({ parent: a });
            a[Component] = Component;
            c = b.get('glass.Component:{"x":2,"y":3}');
            assert.equal(c.x, 2);
            assert.equal(c.y, 3);
            assert.equal(c.parent, a);
            return a.dispose();
          });
        });
        return describe('extend', function () {
          it('should inherit base properties', function () {
            var SubComponent;
            SubComponent = Component.extend({ id: 'SubComponent' });
            return assert(null != SubComponent.properties.id);
          });
          it('should allow underriding constructors and functions', function () {
            var sub, SubComponent;
            SubComponent = Component.extend({
              id: 'SubComponent',
              properties: {
                initialize: function () {
                  this.constructorCalled = true;
                  return this;
                },
                dispose: function () {
                  this.disposeCalled = true;
                }
              }
            });
            sub = new SubComponent({ parent: global });
            assert(sub.constructorCalled);
            sub.dispose();
            assert(sub.disposed);
            return assert(sub.disposeCalled);
          });
          it('should allow recursive extension', function () {
            var AComponent, BComponent;
            AComponent = Component.extend({
              id: 'AComponent',
              properties: {
                dispose: function () {
                }
              }
            });
            return BComponent = AComponent.extend({
              id: 'BComponent',
              properties: {
                foo: function () {
                }
              }
            });
          });
          return it('should not allow final functions to be underridden', function () {
            var AComponent;
            AComponent = Component.extend({
              id: 'AComponent',
              properties: {
                dispose: function () {
                }
              }
            });
            return assert.throws(function () {
              var BComponent;
              return BComponent = AComponent.extend({
                id: 'BComponent',
                properties: {
                  dispose: function () {
                  }
                }
              });
            });
          });
        });
      });
    }
  });
  require('/index.coffee');
}.call(this, this));
/*
//@ sourceMappingURL=glass.map
*/