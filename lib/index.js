// Generated by CoffeeScript 1.6.3
(function() {
  var defineProperties, deserialize, freeze, isPrimitive, normalizeProperties, serialize,
    __hasProp = {}.hasOwnProperty;

  require('./global');

  isPrimitive = function(object) {
    return Object.isNumber(object) || Object.isBoolean(object) || Object.isString(object);
  };

  normalizeProperties = function(properties, defaults) {
    var name, property, _base, _base1;
    if (properties == null) {
      properties = {};
    }
    if (Object.isFunction(defaults)) {
      defaults = {
        definingClass: defaults
      };
    }
    for (name in properties) {
      property = properties[name];
      if (Object.isFunction(property)) {
        property = {
          writable: false,
          value: property
        };
      } else if ((property == null) || isPrimitive(property) || Object.isArray(property)) {
        property = {
          value: property
        };
      }
      if ((property.get == null) && (property.set == null) && !property.hasOwnProperty('value')) {
        property.value = void 0;
      }
      if (property.hasOwnProperty('value')) {
        if (property.writable == null) {
          property.writable = true;
        }
      }
      if (Object.isFunction(property.value)) {
        if ((_base = property.value).id == null) {
          _base.id = name;
        }
      }
      if (defaults != null) {
        Object.merge(property, defaults, true, false);
      }
      if (property.definingClass != null) {
        if (Object.isFunction(property.value)) {
          if ((_base1 = property.value).definingClass == null) {
            _base1.definingClass = property.definingClass;
          }
        }
      }
      properties[name] = property;
    }
    return properties;
  };

  defineProperties = function(object, properties, defaults) {
    properties = normalizeProperties(properties, defaults);
    Object.defineProperties(object, properties);
    return properties;
  };

  defineProperties(exports, {
    isPrimitive: isPrimitive,
    normalizeProperties: normalizeProperties,
    defineProperties: defineProperties,
    cache: function(name, fn) {
      return function(object) {
        if (object == null) {
          object = this;
        }
        if (!object.hasOwnProperty(name)) {
          object[name] = fn(object);
        }
        return object[name];
      };
    },
    freeze: freeze = function(object, deep) {
      var key, value;
      if (deep == null) {
        deep = true;
      }
      Object.freeze(object);
      if (deep) {
        for (key in object) {
          if (!__hasProp.call(object, key)) continue;
          value = object[key];
          if (Object.isObject(value)) {
            freeze(value, deep);
          }
        }
      }
      return object;
    },
    match: function(regex, map, string) {
      var key, object, result, value;
      result = regex.exec(string);
      if (result == null) {
        return null;
      }
      object = {};
      for (key in map) {
        value = map[key];
        if (result[value] != null) {
          object[key] = result[value];
        }
      }
      return object;
    },
    serialize: serialize = (function() {
      var value;
      value = function(object) {
        return JSON.stringify(object);
      };
      value.typeKey = '$type';
      return value;
    })(),
    deserialize: deserialize = (function() {
      var fromJSON;
      fromJSON = function(value) {
        var e, type, typeId;
        if (Object.isString(typeId = value != null ? value[serialize.typeKey] : void 0)) {
          delete value[serialize.typeKey];
          try {
            type = require(typeId);
          } catch (_error) {
            e = _error;
            throw new Error("" + typeId + " specified in JSON value " + (JSON.stringify(value)) + " was not found: " + e);
          }
        }
        if (type != null) {
          if (Object.isFunction(type.fromJSON)) {
            value = type.fromJSON(value, fromJSON);
          } else {
            value = new type(value);
          }
        }
        return value;
      };
      return function(string, defaults) {
        var json;
        if (Object.isObject(string)) {
          json = Object.clone(string);
        } else {
          json = JSON.parse(string);
        }
        if ((defaults != null) && Object.isObject(json)) {
          Object.merge(json, defaults, false, false);
        }
        return fromJSON(json);
      };
    })()
  });

  exports.test = (function() {
    var assert;
    assert = require('chai').assert;
    return {
      cache: function() {
        var cacheCount, count, r1, r2, x;
        count = 0;
        cacheCount = exports.cache("_foo", function() {
          return ++count;
        });
        x = {};
        r1 = cacheCount(x);
        r2 = cacheCount(x);
        assert.deepEqual(x, {
          _foo: 1
        });
        assert.equal(r1, 1);
        return assert.equal(r1, r2);
      },
      defineProperties: {
        "should allow primitive values": function() {
          var object;
          object = {};
          defineProperties(object, {
            f: function() {
              return "function";
            },
            i: 2,
            b: true,
            a: [],
            s: "hello"
          });
          assert(Object.isFunction(object.f));
          assert.equal(object.f(), "function");
          assert.equal(object.i, 2);
          assert.equal(object.b, true);
          assert(Object.equal(object.a, []));
          return assert.equal(object.s, "hello");
        }
      }
    };
  })();

}).call(this);
