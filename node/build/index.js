// Generated by CoffeeScript 1.6.2
(function() {
  var build, buildBrowserTestFile, check, exports, fs, getCjsifyCommand, getPackageJson, np, runTest, util, watchCompile, watchTest, watcher;

  require('sugar');

  fs = require('fs');

  np = require('path');

  util = require('./utility');

  watcher = require('./watcher');

  check = function(config) {
    var _base, _ref, _ref1;

    if (config.name == null) {
      throw new Error("config.name is required");
    }
    if (config.input == null) {
      throw new Error("config.input is required");
    }
    if (config.node.output == null) {
      throw new Error("config.node.output is required");
    }
    if ((_ref = config.main) == null) {
      config.main = "" + config.input + "/index.coffee";
    }
    if (config.browser != null) {
      if ((_ref1 = (_base = config.browser).name) == null) {
        _base.name = config.name;
      }
    }
  };

  getCjsifyCommand = function(config, watch) {
    var command, name, _ref;

    if (watch == null) {
      watch = false;
    }
    if ((config != null ? (_ref = config.browser) != null ? _ref.output : void 0 : void 0) == null) {
      return null;
    }
    name = "" + config.name + "-full-browser";
    command = "cjsify.cmd -r " + config.input + " --ignore-missing -o " + config.browser.output + "/" + config.browser.name + ".js --source-map " + config.browser.output + "/" + config.browser.name + ".map " + config.main;
    if (watch) {
      command += " -w";
    }
    return command;
  };

  buildBrowserTestFile = function(config) {
    var _ref;

    if ((config != null ? (_ref = config.browser) != null ? _ref.output : void 0 : void 0) == null) {
      return;
    }
    return fs.writeFileSync("" + config.browser.output + "/index.html", "<html>\n    <head>\n        <title>" + (config.browser.name.capitalize()) + " Test</title>\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"https://raw.github.com/visionmedia/mocha/master/mocha.css\">\n        <script src=\"https://raw.github.com/visionmedia/mocha/master/mocha.js\"></script>\n        <script>mocha.setup('bdd');</script>\n        <script src=\"" + config.browser.name + ".js\"></script>\n    </head>\n    <body>\n        <div id=\"mocha\"></div>\n        <script>\n        mocha.setup('bdd');\n        mocha.run();\n        </script>\n    </body>\n</html>", "utf8");
  };

  build = function(config, callback) {
    return util.spawn("coffee.cmd -c -m -o " + config.node.output + " " + config.input, function() {
      buildBrowserTestFile(config);
      return util.spawn(getCjsifyCommand(config, false), callback);
    });
  };

  runTest = function(config, callback) {
    var list;

    list = util.list(config.node.output, {
      match: ".js"
    });
    return util.spawn("mocha.cmd --harmony -R spec " + (list.join(' ')), callback);
  };

  watchCompile = function(config) {
    util.spawn("coffee.cmd -w -m -c -o " + config.node.output + " " + config.input);
    buildBrowserTestFile(config);
    return util.spawn(getCjsifyCommand(config, true));
  };

  watchTest = function(config) {
    var debouncedRunTest, options;

    debouncedRunTest = (function() {
      return runTest(config);
    }).debounce(500);
    options = {
      filter: ".js",
      initial: false
    };
    return watcher.watchDirectory(config.node.output, options, debouncedRunTest);
  };

  getPackageJson = function(config) {
    var path;

    path = np.join(config.node.output, 'package.json');
    return JSON.parse(fs.readFileSync(path, 'utf8'));
  };

  module.exports = exports = {
    build: function(config) {
      check(config);
      return build(config, function() {
        return runTest(config);
      });
    },
    watch: function(config) {
      check(config);
      watchCompile(config);
      return watchTest(config);
    },
    test: function(config) {
      check(config);
      return runTest(config);
    },
    publish: function(config) {
      return util.spawn("npm.cmd publish " + config.node.output);
    },
    bump: function(config) {
      var pj, version;

      pj = getPackageJson(config);
      version = pj.version.split('.');
      version[2] = parseInt(version[2]) + 1;
      version = version.join('.');
      return util.spawn("npm.cmd version " + version, {
        cwd: config.node.output
      }, function() {
        return exports.publish(config);
      });
    }
  };

}).call(this);

/*
//@ sourceMappingURL=index.map
*/
